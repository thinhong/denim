[{"path":"/articles/denim.html","id":"simple-sir-model-with-gamma-distributed-lengths-of-stay","dir":"Articles","previous_headings":"","what":"1. Simple SIR model with gamma distributed lengths of stay","title":"denim: deterministic discrete-time model with memory","text":"SIR model uses 3 compartments: S (susceptible), (infected), R (recovered) describe clinical status individuals. use simple form SIR model demonstrate define distribution lengths stay distribution. model equations : \\[S_{t+1} - S_{t} = -\\lambda S_{t} = -\\frac{\\beta I_{t}}{N}S_{t}\\] \\[I_{t+1} - I_{t} = \\frac{\\beta I_{t}}{N}S_{t} - \\gamma I_{t}\\] \\[R_{t+1} - R_{t} = \\gamma I_{t}\\] \\(N\\): total population size, \\(N = S + + R\\) \\(\\beta\\): product contact rates transmission probability; usually define \\(\\lambda =\\frac{\\beta I_{t}}{N}\\) force infection \\(\\gamma\\): recovery rate Usually solve model easier make assumption recovery rate \\(\\gamma\\) constant, leads exponentially distributed length stay .e individuals recover 1 day infected.  realistic length stay distribution can look like , patients recovered 4 days. defined using gamma distribution shape = 3 scale = 2.  model now look like : Model specification Model transition two transitions S -> -> R case. transitions specified list follow format \"transition\" = equation, equation defined one functions waiting time distribution. Initial state Use vector define compartments assigned names initial values format compartment_name = initial_value: Model parameters use math expression, symbols except compartment names parameters, defined constant values. two constant parameters example: beta N: Model application Time step specification run model 30 days give output 0.01 daily intervals. default interval (time step) 1 declared explicitly.","code":"transitions <- list(   \"S -> I\" = \"beta * S * I / N\",   \"I -> R\" = d_gamma(3, 2) ) initialValues <- c(   S = 999,    I = 1,    R = 0 ) parameters <- c(   beta = 0.012,   N = 1000 ) simulationDuration <- 30 timeStep <- 0.01 mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep) head(mod) #>   Time        S        I            R #> 1 0.00 999.0000 1.000000 0.000000e+00 #> 2 0.01 998.9880 1.011982 5.543225e-06 #> 3 0.02 998.9759 1.024097 2.219016e-05 #> 4 0.03 998.9636 1.036346 5.000038e-05 #> 5 0.04 998.9512 1.048730 8.903457e-05 #> 6 0.05 998.9386 1.061252 1.393545e-04 plot(mod)"},{"path":"/articles/denim.html","id":"how-the-algorithm-work","dir":"Articles","previous_headings":"","what":"2. How the algorithm work?","title":"denim: deterministic discrete-time model with memory","text":"SIR model, infected individuals presented single compartment recovery rate \\(\\gamma\\). want recovery rate individuals infected 1 day differ recovery rate 2-day infected patients. rather using one compartment infected (), define multiple infected sub-compartments. number sub-compartments depends maximum day expect infected individuals recovered. example, expect disease maximum 4 days infection, end 4 sub-compartments. sub-compartment recovery rate \\(\\gamma_{1}\\), \\(\\gamma_{2}\\), \\(\\gamma_{3}\\), \\(\\gamma_{4}\\). day 4 certain patient recover (assume disease maximum 4 days infection), \\(\\gamma_{4} = 1\\). Let \\(R_1 + R_2 + R_3 + R_4 = \\Sigma R\\). \\(\\frac{R_1}{\\Sigma R} = p_1\\), \\(\\frac{R_2}{\\Sigma R} = p_2\\), \\(\\frac{R_3}{\\Sigma R} = p_3\\), \\(\\frac{R_4}{\\Sigma R} = p_4\\). mission estimate \\(\\gamma_{1}\\), \\(\\gamma_{2}\\), \\(\\gamma_{3}\\) obtain \\(p_1\\), \\(p_2\\), \\(p_3\\), \\(p_4\\) fit pre-defined distribution equilibrium state. can obtained setting: \\[\\gamma_{} = \\frac{p_i}{1 - \\sum_{j=1}^{-1}p_j}\\] given length stay distribution, identify maximum length stay using cumulative distribution function. cumulative distribution function asymptotic 1 never equal 1, need set value acceptable rounded 1. want cumulative probability 0.999 rounded 1, set error tolerance threshold 1 - 0.999 = 0.001 (specified argument errorTolerance = 0.001). time cumulative probability = 0.999 set maximum length stay compartment. Default errorTolerance denim set 0.001.","code":""},{"path":"/articles/denim.html","id":"waiting-time-distribution","dir":"Articles","previous_headings":"","what":"3. Waiting time distribution","title":"denim: deterministic discrete-time model with memory","text":"Current available distribution package including: d_exponential(rate): Discrete exponential distribution parameter rate d_gamma(scale, shape): Discrete gamma distribution parameters scale shape d_weibull(scale, shape): Discrete Weibull distribution parameters scale shape d_lognormal(mu, sigma): Discrete log-normal distribution parameters mu sigma can define type transitions : Mathematical expression: Transition defined string value \"beta * S * / N\" converted mathematical expression. need define parameters compartment names parameters argument Constant: Transition defined numerical value 1, 2 converted constant. define number individuals moving time step. transprob(x): Every time step fixed percentage left compartment transit right compartment, also convenient way define \\(R_t - R_{t-1} = \\gamma \\) can input \"-> R\" = transprob(gamma) nonparametric(waitingTimes...): vector values, numbers, percentages, density length stay based real data, denim convert distribution multinomial(probabilities): convenient way define several probabilities compartment transit many compartments, may may time step. example, \"V -> VA, VS, VH\" = multinomial(0.6, 0.3, 0.1) means 60% V become VA, 30% become VS 10% become VH. continue define length stay distribution transitions e.g \"V -> VA\" = d_gamma(3, 2), probabilities defined multinomial() percentage left compartment transit time step, percentage individuals move VA equilibrium state. define length stay distribution, \"V -> VA, VS, VH\" = multinomial(0.6, 0.3, 0.1) percentage V transit right compartments per time step similar transprob() function. See detailed explanations Multiple transitions compartment section.","code":""},{"path":"/articles/denim.html","id":"multiple-transitions-from-a-compartment","dir":"Articles","previous_headings":"","what":"4. Multiple transitions from a compartment","title":"denim: deterministic discrete-time model with memory","text":"many ways define type transition two transitions compartment. Consider example: two scenarios example: Susceptible individuals can infected vaccinated. assumption infected first (S -> ), rest infected get vaccinated (S -> V). Infected individuals can recover die. mortality probability known, can implement model, example defining 0.9 * -> R (90% individuals recover) 0.1 * -> D (10% die). , ensure mortality probability 10%, also define length stay individuals infected state recover die follows gamma log-normal distribution, respectively. can define model example follows:  Tips: Instead writing: can also use multinomial(), define length stay distribution obtain result:","code":"transitions <- list(   \"S -> I\" = \"beta * S * I / N\",   \"S -> V\" = 7,   \"0.9 * I -> R\" = d_gamma(3, 2),   \"0.1 * I -> D\" = d_lognormal(2, 0.5) )  initialValues <- c(   S = 999,    I = 1,    R = 0,   V = 0,   D = 0 )  parameters <- c(   beta = 0.12,   N = 1000 )  simulationDuration <- 10 timeStep <- 0.01  mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep) plot(mod) \"0.9 * I -> R\" = d_gamma(3, 2), \"0.1 * I -> D\" = d_lognormal(2, 0.5) \"I -> R, D\" = multinomial(0.9, 0.1), \"I -> R\" = d_gamma(3, 2), \"I -> D\" = d_lognormal(2, 0.5)"},{"path":"/articles/denim.html","id":"another-example","dir":"Articles","previous_headings":"","what":"5. Another example","title":"denim: deterministic discrete-time model with memory","text":"","code":"transitions <- list(   \"S -> I\" = \"beta * S * (I + IV) / N\",   \"S -> V\" = 2,   \"0.1 * I -> D\" = d_lognormal(2, 0.5),   \"0.9 * I -> R\" = d_gamma(3, 2),   \"V -> IV\" = \"0.1 * beta * V * (I + IV) / N\",   \"IV -> R\" = d_exponential(2) )  initialValues <- c(   S = 999,    I = 1,    R = 0,   V = 0,   IV = 0,   D = 0 )  parameters <- c(   beta = 0.12,   N = 1000 )  simulationDuration <- 10 timeStep <- 0.01  mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep) plot(mod)"},{"path":"/articles/denim_vs_deSolve.html","id":"comparison-between-desolve-and-denim","dir":"Articles","previous_headings":"","what":"Comparison between deSolve and denim","title":"denim vs deSolve","text":"Using deSolve, can replicate Erlang distribution exponential distribution testing","code":"library(denim) library(deSolve)  # --- Transition def for denim transitions <- list(   \"S -> I\" = d_exponential(0.2),   \"I -> R\" = d_gamma(3, 2) ) parameters <- c(rate = 0.2, scale = 3, shape=2)  initialValues <- c(S = 999, I = 1, I1 = 1, I2=0, R=0)  # --- Transition def for deSolve transition_func <- function(t, state, param){   with(as.list( c(state, param) ), {       gamma_rate = 1/scale       dS = -rate*S       # apply linear chain trick       dI1 = rate*S - gamma_rate*I1       dI2 = gamma_rate*I1 - gamma_rate*I2       dI =  dI1 + dI2       dR = gamma_rate*I2       list(c(dS, dI, dI1, dI2, dR))   }) }  # --- Timestep definition simulationDuration <- 20  timestep <- 0.001 # small timestep required for comparison"},{"path":"/articles/denim_vs_deSolve.html","id":"run-simulation-with-denim","dir":"Articles","previous_headings":"Comparison between deSolve and denim","what":"Run simulation with denim","title":"denim vs deSolve","text":"","code":"denim_start <- Sys.time() mod <- sim(transitions = transitions, initialValues = initialValues, parameters, simulationDuration = simulationDuration, timeStep = timestep) denim_end <- Sys.time()  # --- show output head(mod[mod$Time %in% 1:simulationDuration,]) ##      Time        S        I          R ## 1001    1 817.9120 179.0627   3.025308 ## 2001    2 669.6497 310.8811  19.469173 ## 3001    3 548.2628 398.4336  53.303539 ## 4001    4 448.8796 448.0932 103.027204 ## 5001    5 367.5116 467.6504 164.838060 ## 6001    6 300.8930 464.7307 234.376244"},{"path":"/articles/denim_vs_deSolve.html","id":"run-simulation-with-desolve","dir":"Articles","previous_headings":"Comparison between deSolve and denim","what":"Run simulation with deSolve","title":"denim vs deSolve","text":"","code":"times <- seq(0, simulationDuration, timestep)  desolve_start <- Sys.time() ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func) desolve_end <- Sys.time()  # --- show output ode_mod <- as.data.frame(ode_mod) head(ode_mod[ode_mod$time %in% 1:simulationDuration, c(\"time\", \"S\", \"I\", \"R\")]) ##      time        S        I          R ## 1001    1 817.9120 179.0585   3.029466 ## 2001    2 669.6497 310.8686  19.481654 ## 3001    3 548.2628 398.4125  53.324630 ## 4001    4 448.8796 448.0650 103.055392 ## 5001    5 367.5116 467.6172 164.871207 ## 6001    6 300.8930 464.6948 234.412204"},{"path":"/articles/denim_vs_deSolve.html","id":"execution-time-comparison","dir":"Articles","previous_headings":"Comparison between deSolve and denim","what":"Execution time comparison","title":"denim vs deSolve","text":"denim takes approximately 9.53 times long deSolve compute result given specifications . significant difference can attributed difference approaches: deSolve solves system ODEs denim iterates timestep updates population compartment approach denim allow flexibility types dwell time distributions, computation time scales timestep grows smaller (O(n) time complexity).","code":""},{"path":"/articles/denim_vs_deSolve.html","id":"plot-the-result","dir":"Articles","previous_headings":"","what":"Plot the result","title":"denim vs deSolve","text":"","code":"# increase timestep before plotting mod <- mod[mod$Time %in% seq(0, simulationDuration, 0.2),] ode_mod <- ode_mod[ode_mod$time %in% seq(0, simulationDuration, 0.2),] # ---- Plot S compartment plot(x = mod$Time, y = mod$S,xlab = \"Time\", ylab = \"Count\", main=\"S compartment\",      col = \"#4876ff\", type=\"l\", lwd=3) lines(ode_mod$time, ode_mod$S, lwd=3, lty=3) legend(x = 15, y = 900,legend=c(\"denim\", \"deSolve\"), col = c(\"#4876ff\", \"black\"), lty=c(1,3)) # ---- Plot I compartment plot(x = mod$Time, y = mod$I, xlab = \"Time\", ylab = \"Count\", main=\"I compartment\",       col = \"#4876ff\", type=\"l\", lwd=2) lines(ode_mod$time, ode_mod$I, lwd=3, lty=3) legend(x = 15, y = 350,legend=c(\"denim\", \"deSolve\"), col = c(\"#4876ff\", \"black\"), lty=c(1,3)) # ---- Plot R compartment plot(x = mod$Time, y = mod$R, xlab = \"Time\", ylab = \"Count\", main=\"R compartment\",      col = \"#4876ff\", type=\"l\", lwd=2) lines(ode_mod$time, ode_mod$R, lwd=3, lty=3) legend(x = 15, y = 300,legend=c(\"denim\", \"deSolve\"), col = c(\"#4876ff\", \"black\"), lty=c(1,3))"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thinh Ong. Author, copyright holder. Anh Phan. Author, maintainer. Marc Choisy. Author. Niels Lohman. Contributor. Bjoern Hoehrmann. Contributor. Florian Loitsch. Contributor. Ingo Berg. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ong T, Phan , Choisy M (2024). denim: Generate Simulate Deterministic Discrete-Time Compartmental Models. R package version 1.0.0,  https://github.com/thinhong/denim, https://drthinhong.com/denim/.","code":"@Manual{,   title = {denim: Generate and Simulate Deterministic Discrete-Time Compartmental Models},   author = {Thinh Ong and Anh Phan and Marc Choisy},   year = {2024},   note = {R package version 1.0.0,  https://github.com/thinhong/denim},   url = {https://drthinhong.com/denim/}, }"},{"path":"/index.html","id":"denim-","dir":"","previous_headings":"","what":"Generate and Simulate Deterministic Discrete-Time Compartmental Models","title":"Generate and Simulate Deterministic Discrete-Time Compartmental Models","text":"R package building simulating deterministic discrete-time compartmental models memory.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate and Simulate Deterministic Discrete-Time Compartmental Models","text":"can install development version denim GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"thinhong/denim\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Generate and Simulate Deterministic Discrete-Time Compartmental Models","text":"basic example illustrate specification simple SIR model, contains three compartments susceptible (S), infected () recovered (R). recovery probabilities infected individuals gamma distributed example: output data frame 4 columns: Time, S, R can plot output :","code":"library(denim)  transitions <- list(   \"S -> I\" = \"beta * S * I / N\",   \"I -> R\" = d_gamma(3, 2) )  parameters <- c(   beta = 0.12,   N = 1000 )  initialValues <- c(   S = 999,    I = 1,    R = 0 )  simulationDuration <- 10 timeStep <- 0.01  mod <- sim(transitions = transitions, initialValues = initialValues,             parameters = parameters, simulationDuration = simulationDuration,             timeStep = timeStep) head(mod) #>   Time        S        I            R #> 1 0.00 999.0000 1.000000 0.000000e+00 #> 2 0.01 998.8801 1.119874 5.543225e-06 #> 3 0.02 998.7459 1.254092 2.278823e-05 #> 4 0.03 998.5956 1.404364 5.306419e-05 #> 5 0.04 998.4273 1.572606 9.785981e-05 #> 6 0.05 998.2389 1.760961 1.588423e-04 plot(mod)"},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Fixed transition — constant","title":"Fixed transition — constant","text":"Define fixed number individuals left compartment transit right compartment every time step","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fixed transition — constant","text":"","code":"constant(x)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fixed transition — constant","text":"x number individuals move one compartment another","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fixed transition — constant","text":"Distribution object simulator","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fixed transition — constant","text":"","code":"transitions <- list(\"S->I\" = constant(10))"},{"path":"/reference/d_exponential.html","id":null,"dir":"Reference","previous_headings":"","what":"Discrete exponential distribution — d_exponential","title":"Discrete exponential distribution — d_exponential","text":"Discrete exponential distribution","code":""},{"path":"/reference/d_exponential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discrete exponential distribution — d_exponential","text":"","code":"d_exponential(rate)"},{"path":"/reference/d_exponential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discrete exponential distribution — d_exponential","text":"rate rate parameter exponential distribution","code":""},{"path":"/reference/d_exponential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discrete exponential distribution — d_exponential","text":"Distribution object simulator","code":""},{"path":"/reference/d_exponential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discrete exponential distribution — d_exponential","text":"","code":"transitions <- list(\"I -> D\" = d_exponential(0.3))"},{"path":"/reference/d_gamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Discrete gamma distribution — d_gamma","title":"Discrete gamma distribution — d_gamma","text":"Discrete gamma distribution","code":""},{"path":"/reference/d_gamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discrete gamma distribution — d_gamma","text":"","code":"d_gamma(scale, shape)"},{"path":"/reference/d_gamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discrete gamma distribution — d_gamma","text":"scale scale parameter gamma distribution shape shape parameter gamma distribution","code":""},{"path":"/reference/d_gamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discrete gamma distribution — d_gamma","text":"Distribution object simulator","code":""},{"path":"/reference/d_gamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discrete gamma distribution — d_gamma","text":"","code":"transitions <- list(\"S -> I\" = d_gamma(1, 5))"},{"path":"/reference/d_lognormal.html","id":null,"dir":"Reference","previous_headings":"","what":"Discrete log-normal distribution — d_lognormal","title":"Discrete log-normal distribution — d_lognormal","text":"Discrete log-normal distribution","code":""},{"path":"/reference/d_lognormal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discrete log-normal distribution — d_lognormal","text":"","code":"d_lognormal(mu, sigma)"},{"path":"/reference/d_lognormal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discrete log-normal distribution — d_lognormal","text":"mu location parameter ln mean sigma scale parameter ln standard deviation","code":""},{"path":"/reference/d_lognormal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discrete log-normal distribution — d_lognormal","text":"Distribution object simulator","code":""},{"path":"/reference/d_lognormal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discrete log-normal distribution — d_lognormal","text":"","code":"transitions <- list(\"I -> D\" = d_lognormal(3, 0.6))"},{"path":"/reference/d_weibull.html","id":null,"dir":"Reference","previous_headings":"","what":"Discrete Weibull distribution — d_weibull","title":"Discrete Weibull distribution — d_weibull","text":"Discrete Weibull distribution","code":""},{"path":"/reference/d_weibull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discrete Weibull distribution — d_weibull","text":"","code":"d_weibull(scale, shape)"},{"path":"/reference/d_weibull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discrete Weibull distribution — d_weibull","text":"scale scale parameter Weibull distribution shape shape parameter Weibull distribution","code":""},{"path":"/reference/d_weibull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discrete Weibull distribution — d_weibull","text":"Distribution object simulator","code":""},{"path":"/reference/d_weibull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discrete Weibull distribution — d_weibull","text":"","code":"transitions <- list(\"I -> D\" = d_weibull(0.6, 2))"},{"path":"/reference/denim-package.html","id":null,"dir":"Reference","previous_headings":"","what":"denim — denim-package","title":"denim — denim-package","text":"Simulate deterministic discrete time model","code":""},{"path":"/reference/denim-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"denim — denim-package","text":"Imports","code":""},{"path":[]},{"path":"/reference/denim-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"denim — denim-package","text":"Maintainer: Anh Phan anhptq@oucru.org Authors: Thinh Ong thinhop@oucru.org (ORCID) [copyright holder] Marc Choisy mchoisy@oucru.org (ORCID) contributors: Niels Lohman [contributor] Bjoern Hoehrmann bjoern@hoehrmann.de [contributor] Florian Loitsch [contributor] Ingo Berg [contributor]","code":""},{"path":"/reference/mathexpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Mathematical expression — mathexpr","title":"Mathematical expression — mathexpr","text":"Mathematical expression","code":""},{"path":"/reference/mathexpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mathematical expression — mathexpr","text":"","code":"mathexpr(expr)"},{"path":"/reference/mathexpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mathematical expression — mathexpr","text":"expr User defined mathematial expression. expression processed muparser library offers wide variety operators. Visit muparser website (https://beltoforion.de/en/muparser/features.php) see full list available operators.","code":""},{"path":"/reference/mathexpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mathematical expression — mathexpr","text":"Distribution object simulator","code":""},{"path":"/reference/mathexpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mathematical expression — mathexpr","text":"","code":"transitions <- list(\"S->I\"=mathexpr(\"beta*S/N\")) # definition for parameters in the expression required params <- c(N = 1000, beta = 0.3)"},{"path":"/reference/multinomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Multinomial — multinomial","title":"Multinomial — multinomial","text":"Define set probabilities transition one compartment multiple compartments   equal ","code":"\"I -> R, D\" = multinomial(0.9, 0.1), \"I -> R\" = d_gamma(3, 2), \"I -> D\" = d_lognormal(2, 0.5) \"0.9 * I -> R\" = d_gamma(3, 2), \"0.1 * I -> D\" = d_lognormal(2, 0.5)"},{"path":"/reference/multinomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multinomial — multinomial","text":"","code":"multinomial(...)"},{"path":"/reference/multinomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multinomial — multinomial","text":"... vector probabilities, must add 1","code":""},{"path":"/reference/multinomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multinomial — multinomial","text":"Distribution object simulator","code":""},{"path":"/reference/nonparametric.html","id":null,"dir":"Reference","previous_headings":"","what":"Nonparametric distribution — nonparametric","title":"Nonparametric distribution — nonparametric","text":"Convert vector frequencies, percentages... distribution","code":""},{"path":"/reference/nonparametric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nonparametric distribution — nonparametric","text":"","code":"nonparametric(...)"},{"path":"/reference/nonparametric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nonparametric distribution — nonparametric","text":"... vector values","code":""},{"path":"/reference/nonparametric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nonparametric distribution — nonparametric","text":"Distribution object simulator","code":""},{"path":"/reference/nonparametric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nonparametric distribution — nonparametric","text":"","code":"transitions <- list(\"S->I\"=nonparametric(0.1, 0.2, 0.5, 0.2))"},{"path":"/reference/sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulator for deterministic discrete time model with memory — sim","title":"Simulator for deterministic discrete time model with memory — sim","text":"Simulation function call C++ simulator","code":""},{"path":"/reference/sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulator for deterministic discrete time model with memory — sim","text":"","code":"sim(   transitions,   initialValues,   parameters = NULL,   simulationDuration,   timeStep = 1,   errorTolerance = 0.001 )"},{"path":"/reference/sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulator for deterministic discrete time model with memory — sim","text":"transitions list transitions follows format \"transition\" = distribution() initialValues vector contains initial values compartments defined transitions, follows format compartment_name = initial_value parameters vector contains values parameters compartments, usually parameters used mathexp() functions simulationDuration duration time simulate timeStep set output time interval. example, simulationDuration = 10 means 10 days timeStep = 0.1, output display results 0.1 daily interval errorTolerance set threshold cumulative distribution function can rounded 1. example, want cumulative probability 0.999 rounded 1, set errorTolerance = 0.001 (1 - 0.999 = 0.001). Default 0.001","code":""},{"path":"/reference/sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulator for deterministic discrete time model with memory — sim","text":"data.frame class denim can plotted plot() method","code":""},{"path":"/reference/sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulator for deterministic discrete time model with memory — sim","text":"","code":"transitions <- list(    \"S -> I\" = \"beta * S * I / N\",    \"I -> R\" = d_gamma(3, 2) )  initialValues <- c(    S = 999,     I = 1,     R = 0 )  parameters <- c(    beta = 0.012,    N = 1000 )  simulationDuration <- 30 timeStep <- 0.01  mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep)"},{"path":"/reference/transprob.html","id":null,"dir":"Reference","previous_headings":"","what":"Transition probability — transprob","title":"Transition probability — transprob","text":"fixed percentage left compartment transit right compartment every time step","code":""},{"path":"/reference/transprob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transition probability — transprob","text":"","code":"transprob(x)"},{"path":"/reference/transprob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transition probability — transprob","text":"x float number 0 1","code":""},{"path":"/reference/transprob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transition probability — transprob","text":"Distribution object simulator","code":""},{"path":"/reference/transprob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transition probability — transprob","text":"","code":"transitions <- list(\"S->I\"=transprob(0.8))"},{"path":"/news/index.html","id":"denim-100","dir":"Changelog","previous_headings":"","what":"denim 1.0.0","title":"denim 1.0.0","text":"CRAN release: 2024-06-05 Initial CRAN submission.","code":""}]
