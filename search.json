[{"path":[]},{"path":"/articles/deSolve_to_denim.html","id":"original-code-in-desolve","dir":"Articles","previous_headings":"Migrate deSolve code to denim","what":"Original code in deSolve","title":"deSolve to denim","text":"model used demonstrating process migrating code deSolve denim followed","code":"# --- Model definition in deSolve transition_func <- function(t, state, param){   with(as.list( c(state, param) ), {       dS = -beta*S*I/N       dI1 = beta*S*I/N - rate*I1       dI2 = rate*I1 - rate*I2       dI =  dI1 + dI2       dR = rate*I2       list(c(dS, dI, dI1, dI2, dR))   }) }  # ---- Model configuration  parameters <- c(beta = 0.3, rate = 1/3, N = 1000)  initialValues <- c(S = 999, I = 1, I1 = 1, I2=0, R=0)  # ---- Run simulation times <- seq(0, 100) # simulation duration ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)  # --- show output ode_mod <- as.data.frame(ode_mod) head(ode_mod[-1, c(\"time\", \"S\", \"I\", \"R\")]) ##   time        S        I          R ## 2    1 998.6561 1.294182 0.04969647 ## 3    2 998.2239 1.594547 0.18152864 ## 4    3 997.6985 1.921416 0.38010527 ## 5    4 997.0695 2.290735 0.63971843 ## 6    5 996.3225 2.716551 0.96093694 ## 7    6 995.4387 3.212577 1.34869352"},{"path":"/articles/deSolve_to_denim.html","id":"model-definition","dir":"Articles","previous_headings":"Migrate deSolve code to denim","what":"Model definition","title":"deSolve to denim","text":"Unlike deSolve transitions compartments defined system ODEs, transitions denim must defined () distribution dwell-time (either parametric non-parametric) (ii) mathematical expression. User must first identify transitions best describe ones deSolve model. transitions identified, user can define model denim. using denim DSL, model structure given set key-value pairs key shows transition direction compartments format compartment -> out_compartment value built-distribution function describe transition Note converting ODE math expression, must multiply original expression time step duration (variable timeStep model definition code). essentially using Euler’s method estimate solution ODE.","code":"# --- Model definition in deSolve transition_func <- function(t, state, param){   with(as.list( c(state, param) ), {              # For S -> I transition, since it involves parameters (beta, N),        # the best transition to describe this is using a mathematical formula       dS = -beta*S*I/N              # For I -> R transition, linear chain trick is applied --> implies Erlang distributed dwell time       # Hence, we can use d_gamma from denim       dI1 = beta*S*I/N - rate*I1       dI2 = rate*I1 - rate*I2       dI =  dI1 + dI2       dR = rate*I2       list(c(dS, dI, dI1, dI2, dR))   }) } # --- Model definition in denim transitions <- denim_dsl({   S -> I = beta * S * I/N * timeStep   # shape is 2 from number of I sub compartments   I -> R = d_gamma(rate = 1/3, shape = 2)  })"},{"path":"/articles/deSolve_to_denim.html","id":"model-configurations","dir":"Articles","previous_headings":"Migrate deSolve code to denim","what":"Model configurations","title":"deSolve to denim","text":"Similar deSolve, denim also ask users provide initial values additional parameters form named vectors. example deSolve code, users can use initalValues deSolve code (denim ignore unused I1, I2 compartments sub-compartments automatically computed internally), recommended remove redundant compartments (example, I1 I2). parameters, since rate already defined distribution functions, users need keep beta N initial parameters vector. need specify value timeStep variable special variable denim defined later . Initialization sub-compartments: multiple sub-compartments (e.g., compartment consist I1 I2 sub-compartments), initial population always assigned first sub-compartment. example, since = 1, denim assign I1 = 1 I2 = 0. also option distribute initial value across sub-compartments based specified distribution. , simply set dist_init parameter distribution function TRUE. However, comparison purposes, keep option FALSE remaining demonstration.","code":"# remove I1, I2 compartments denim_initialValues <- c(S = 999, I = 1, R=0) denim_parameters <- c(beta = 0.3, N = 1000) transitions <- denim_dsl({   S -> I = beta * S * I/N * timeStep   I -> R = d_gamma(rate = 1/3, shape = 2, dist_init = TRUE)  })"},{"path":"/articles/deSolve_to_denim.html","id":"simulation","dir":"Articles","previous_headings":"Migrate deSolve code to denim","what":"Simulation","title":"deSolve to denim","text":"Lastly, users need define simulation duration time step denim run. Unlike deSolve takes time sequence, denim require simulation duration time step. Since denim discrete time model, time step must set small value result closely follow deSolve (example, 0.01). Note value parameter timeStep also value variable timeStep mathematical equation.","code":"mod <- sim(transitions = transitions,              initialValues = denim_initialValues,               parameters = denim_parameters,              simulationDuration = 100,              timeStep = 0.01)  head(mod[mod$Time %% 1 == 0, ]) ##     Time        S        I          R ## 1      0 999.0000 1.000000 0.00000000 ## 101    1 998.6566 1.293759 0.04961535 ## 201    2 998.2251 1.593725 0.18121212 ## 301    3 997.7004 1.920189 0.37940195 ## 401    4 997.0725 2.289061 0.63848007 ## 501    5 996.3266 2.714365 0.95900520"},{"path":"/articles/deSolve_to_denim.html","id":"compare-output","dir":"Articles","previous_headings":"","what":"Compare output","title":"deSolve to denim","text":"following plots show output denim deSolve","code":""},{"path":"/articles/denim.html","id":"simple-sir-model-with-gamma-distributed-lengths-of-stay","dir":"Articles","previous_headings":"","what":"1. Simple SIR model with gamma distributed lengths of stay","title":"denim: deterministic discrete-time model with memory","text":"SIR model uses 3 compartments: S (susceptible), (infected), R (recovered) describe clinical status individuals. use simple form SIR model demonstrate define distribution lengths stay distribution. model equations : \\[S_{t+1} - S_{t} = -\\lambda S_{t} = -\\frac{\\beta I_{t}}{N}S_{t}\\] \\[I_{t+1} - I_{t} = \\frac{\\beta I_{t}}{N}S_{t} - \\gamma I_{t}\\] \\[R_{t+1} - R_{t} = \\gamma I_{t}\\] \\(N\\): total population size, \\(N = S + + R\\) \\(\\beta\\): product contact rates transmission probability; usually define \\(\\lambda =\\frac{\\beta I_{t}}{N}\\) force infection \\(\\gamma\\): recovery rate Usually solve model easier make assumption recovery rate \\(\\gamma\\) constant, leads exponentially distributed length stay .e individuals recover 1 day infected.  realistic length stay distribution can look like , patients recovered 4 days. defined using gamma distribution shape = 3 rate = 1/2.  model now look like : Model specification Model transition two transitions S -> -> R case. transitions specified list follow format \"transition\" = equation\", equation defined one functions waiting time distribution. timeStep duration time step used simulation. Another option define transitions using denim’s DSL. Refer Model definition denim article information. Initial state Use vector define compartments assigned names initial values format compartment_name = initial_value: Model parameters use math expression, symbols except compartment names parameters, defined constant values. two constant parameters example: beta N: Note need specify variable timeStep since denim automatically use timeStep simulation settings next step. Model application Time step specification run model 30 days give output 0.01 daily intervals. default interval (time step) 1 declared explicitly.","code":"transitions <- list(   \"S -> I\" = \"beta * S * I / N * timeStep\",   \"I -> R\" = d_gamma(rate = 1/2, 3) ) transitions <- denim_dsl({   S -> I = beta * (I/N) * S * timeStep   I -> R = d_gamma(rate = 1/4, shape = 3) }) initialValues <- c(   S = 999,    I = 1,    R = 0 ) parameters <- c(   beta = 1.2,   N = 1000 ) simulationDuration <- 30 timeStep <- 0.01 mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep) head(mod) #>   Time        S        I            R #> 1 0.00 999.0000 1.000000 0.000000e+00 #> 2 0.01 998.9880 1.011988 2.599289e-09 #> 3 0.02 998.9759 1.024120 2.078652e-08 #> 4 0.03 998.9636 1.036396 7.019852e-08 #> 5 0.04 998.9512 1.048820 1.665435e-07 #> 6 0.05 998.9386 1.061393 3.256027e-07 plot(mod)"},{"path":"/articles/denim.html","id":"how-the-algorithm-work","dir":"Articles","previous_headings":"","what":"2. How the algorithm work?","title":"denim: deterministic discrete-time model with memory","text":"SIR model, infected individuals presented single compartment recovery rate \\(\\gamma\\). want recovery rate individuals infected 1 day differ recovery rate 2-day infected patients. rather using one compartment infected (), define multiple infected sub-compartments. number sub-compartments depends maximum day expect infected individuals recovered. example, expect disease maximum 4 days infection, end 4 sub-compartments. sub-compartment recovery rate \\(\\gamma_{1}\\), \\(\\gamma_{2}\\), \\(\\gamma_{3}\\), \\(\\gamma_{4}\\). day 4 certain patient recover (assume disease maximum 4 days infection), \\(\\gamma_{4} = 1\\). Let \\(R_1 + R_2 + R_3 + R_4 = \\Sigma R\\). \\(\\frac{R_1}{\\Sigma R} = p_1\\), \\(\\frac{R_2}{\\Sigma R} = p_2\\), \\(\\frac{R_3}{\\Sigma R} = p_3\\), \\(\\frac{R_4}{\\Sigma R} = p_4\\). mission estimate \\(\\gamma_{1}\\), \\(\\gamma_{2}\\), \\(\\gamma_{3}\\) obtain \\(p_1\\), \\(p_2\\), \\(p_3\\), \\(p_4\\) fit pre-defined distribution equilibrium state. can obtained setting: \\[\\gamma_{} = \\frac{p_i}{1 - \\sum_{j=1}^{-1}p_j}\\] given length stay distribution, identify maximum length stay using cumulative distribution function. cumulative distribution function asymptotic 1 never equal 1, need set value acceptable rounded 1. want cumulative probability 0.999 rounded 1, set error tolerance threshold 1 - 0.999 = 0.001 (specified argument errorTolerance = 0.001). time cumulative probability = 0.999 set maximum length stay compartment. Default errorTolerance denim set 0.001. Initialize population sub-compartments default, initial population always assigned first sub-compartment (example, initial value compartment = 1, denim initialize I1 = 1 I2 = I3 = I4 = 0). User can also choose distribute initial population across sub-compartments based specified distribution, .e. initial population = n, denim initialize I1 = n*p1, I2 = n*p2, I3 = n*p3, I4 = n*p4. set initial population way, simply specify parameter dist_init = TRUE (applicable distribution transitions).","code":"transitions <- denim_dsl({   S -> I = beta * S * I / N * timeStep   I -> R = d_gamma(rate = 1/2, 3, dist_init=TRUE) })"},{"path":"/articles/denim.html","id":"waiting-time-distribution","dir":"Articles","previous_headings":"","what":"3. Waiting time distribution","title":"denim: deterministic discrete-time model with memory","text":"denim offers 2 main ways define transition: either waiting time distribution, mathematical expression. Current available distributions package including: d_exponential(rate): Discrete exponential distribution parameter rate d_gamma(rate, shape): Discrete gamma distribution parameters rate shape d_weibull(scale, shape): Discrete Weibull distribution parameters scale shape d_lognormal(mu, sigma): Discrete log-normal distribution parameters mu sigma nonparametric(waitingTimes): vector values, numbers, percentages, density length stay based real data, denim convert distribution Mathematical expression: Transition can also described using math expression beta * S * / N. need define parameters compartment names parameters argument","code":""},{"path":"/articles/denim.html","id":"multiple-transitions-from-a-compartment","dir":"Articles","previous_headings":"","what":"4. Multiple transitions from a compartment","title":"denim: deterministic discrete-time model with memory","text":"denim, transitions one compartment multiple compartments modeled either () multinomial transition (ii) competing risks. Consider example: two scenarios example: Susceptible individuals can infected vaccinated. assumption infected first (S -> ), rest infected get vaccinated (S -> V). Infected individuals can recover die. mortality probability known, can implement model, example defining 0.9 * -> R (90% individuals recover) 0.1 * -> D (10% die). , ensure mortality probability 10%, also define length stay individuals infected state recover die follows gamma log-normal distribution, respectively. can define model example follows:  detailed explanation transitions multiple states, refer article","code":"transitions <- denim_dsl({   S -> I = beta * S * I / N    S -> V = 5   0.9 * I -> R = d_gamma(1/3, 2)   0.1 * I -> D = d_lognormal(2, 0.5) })  initialValues <- c(   S = 999,    I = 1,    R = 0,   V = 0,   D = 0 )  parameters <- c(   beta = 0.12,   N = 1000 )  simulationDuration <- 10 timeStep <- 0.01  mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep)  head(mod) #>   Time        S        I  V            R            D #> 1 0.00 999.0000 1.000000  0 0.000000e+00 0.000000e+00 #> 2 0.01 993.8801 1.119875  5 4.988903e-06 0.000000e+00 #> 3 0.02 988.7466 1.253422 10 2.050940e-05 1.466074e-33 #> 4 0.03 983.5978 1.402113 15 4.775442e-05 1.651901e-29 #> 5 0.04 978.4323 1.567566 20 8.805255e-05 8.337600e-27 #> 6 0.05 973.2483 1.751562 25 1.428825e-04 8.315472e-25 plot(mod, ylim = c(0, 1000))"},{"path":"/articles/denim.html","id":"another-example","dir":"Articles","previous_headings":"","what":"5. Another example","title":"denim: deterministic discrete-time model with memory","text":"","code":"transitions <- denim_dsl({   S -> I = beta * S * (I + IV) / N    S -> V = 2   0.1 * I -> D = d_lognormal(mu = d_mu, sigma = d_sigma)   0.9 * I -> R = d_gamma(rate = r_rate, shape = r_shape)   V -> IV = 0.1 * beta * V * (I + IV) / N   IV -> R = d_exponential(iv_r_rate) })  initialValues <- c(   S = 999,    I = 1,    R = 0,   V = 0,   IV = 0,   D = 0 )  parameters <- c(   beta = 0.12,   N = 1000,   d_mu = 2,   d_sigma = 1/2,   r_rate = 1/3,   r_shape = 2,   iv_r_rate = 2 )  simulationDuration <- 10 timeStep <- 0.01  mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep) plot(mod) mod #>       Time          S          I           V           IV            D #> 1     0.00 999.000000   1.000000   0.0000000 0.000000e+00 0.000000e+00 #> 2     0.01 996.880120   1.119875   2.0000000 0.000000e+00 0.000000e+00 #> 3     0.02 994.746154   1.253825   3.9999731 2.687700e-05 1.466074e-33 #> 4     0.03 992.596483   1.403470   5.9999129 8.652930e-05 1.651901e-29 #> 5     0.04 990.429303   1.570609   7.9998119 1.858705e-04 8.337600e-27 #> 6     0.05 988.242611   1.757246   9.9996611 3.329828e-04 8.315472e-25 #> 7     0.06 986.034182   1.965604  11.9994502 5.372916e-04 3.090351e-23 #> 8     0.07 983.801540   2.198157  13.9991671 8.097639e-04 5.936766e-22 #> 9     0.08 981.541938   2.457649  15.9987977 1.163134e-03 7.128608e-21 #> 10    0.09 979.252327   2.747129  17.9983256 1.612159e-03 6.029773e-20 #> 11    0.10 976.929321   3.069977  19.9977319 2.173909e-03 3.891737e-19 #> 12    0.11 974.569168   3.429946  21.9969947 2.868095e-03 2.026823e-18 #> 13    0.12 972.167707   3.831191  23.9960886 3.717442e-03 8.870316e-18 #> 14    0.13 969.720326   4.278322  25.9949843 4.748106e-03 3.362659e-17 #> 15    0.14 967.221920   4.776438  27.9936482 5.990147e-03 1.130145e-16 #> 16    0.15 964.666840   5.331185  29.9920417 7.478065e-03 3.429094e-16 #> 17    0.16 962.048836   5.948808  31.9901203 9.251399e-03 9.530053e-16 #> 18    0.17 959.361003   6.636207  33.9878331 1.135540e-02 2.454445e-15 #> 19    0.18 956.595713   7.401002  35.9851219 1.384178e-02 5.914335e-15 #> 20    0.19 953.744552   8.251602  37.9819200 1.676958e-02 1.343984e-14 #> 21    0.20 950.798243   9.197277  39.9781514 2.020611e-02 2.899338e-14 #> 22    0.21 947.746567  10.248235  41.9737294 2.422797e-02 5.971098e-14 #> 23    0.22 944.578284  11.415707  43.9685553 2.892231e-02 1.179600e-13 #> 24    0.23 941.281042  12.712037  45.9625169 3.438806e-02 2.244511e-13 #> 25    0.24 937.841286  14.150766  47.9554866 4.073742e-02 4.128151e-13 #> 26    0.25 934.244160  15.746737  49.9473199 4.809749e-02 7.361666e-13 #> 27    0.26 930.473412  17.516190  51.9378530 5.661201e-02 1.276310e-12 #> 28    0.27 926.511289  19.476861  53.9269006 6.644334e-02 2.156390e-12 #> 29    0.28 922.338438  21.648085  55.9142537 7.777460e-02 3.557965e-12 #> 30    0.29 917.933807  24.050895  57.8996763 9.081198e-02 5.743670e-12 #> 31    0.30 913.274548  26.708117  59.8829027 1.057873e-01 9.086844e-12 #> 32    0.31 908.335934  29.644455  61.8636344 1.229609e-01 1.410976e-11 #> 33    0.32 903.091276  32.886571  63.8415362 1.426244e-01 2.153229e-11 #> 34    0.33 897.511871  36.463140  65.8162325 1.651039e-01 3.233324e-11 #> 35    0.34 891.566957  40.404890  67.7873037 1.907634e-01 4.782678e-11 #> 36    0.35 885.223707  44.744614  69.7542813 2.200085e-01 6.975675e-11 #> 37    0.36 878.447257  49.517138  71.7166436 2.532897e-01 1.004122e-10 #> 38    0.37 871.200774  54.759252  73.6738112 2.911066e-01 1.427674e-10 #> 39    0.38 863.445584  60.509581  75.6251420 3.340116e-01 2.006508e-10 #> 40    0.39 855.141368  66.808394  77.5699263 3.826134e-01 2.789474e-10 #> 41    0.40 846.246431  73.697331  79.5073823 4.375811e-01 3.838386e-10 #> 42    0.41 836.718063  81.219038  81.4366510 4.996477e-01 5.230871e-10 #> 43    0.42 826.513003  89.416709  83.3567922 5.696128e-01 7.063707e-10 #> 44    0.43 815.588019  98.333503  85.2667806 6.483454e-01 9.456741e-10 #> 45    0.44 803.900610 108.011840  87.1655022 7.367856e-01 1.255745e-09 #> 46    0.45 791.409839 118.492572  89.0517527 8.359458e-01 1.654622e-09 #> 47    0.46 778.077308 129.814002  90.9242357 9.469100e-01 2.164250e-09 #> 48    0.47 763.868256 142.010789  92.7815637 1.070832e+00 2.811178e-09 #> 49    0.48 748.752795 155.112712  94.6222597 1.208932e+00 3.627376e-09 #> 50    0.49 732.707243 169.143336  96.4447616 1.362492e+00 4.651156e-09 #> 51    0.50 715.715540 184.118594  98.2474288 1.532845e+00 5.928228e-09 #> 52    0.51 697.770706 200.045333 100.0285515 1.721370e+00 7.512908e-09 #> 53    0.52 678.876278 216.919870 101.7863623 1.929474e+00 9.469482e-09 #> 54    0.53 659.047683 234.726631 103.5190518 2.158578e+00 1.187376e-08 #> 55    0.54 638.313445 253.436928 105.2247862 2.410101e+00 1.481481e-08 #> 56    0.55 616.716173 273.007985 106.9017288 2.685435e+00 1.839697e-08 #> 57    0.56 594.313222 293.382274 108.5480636 2.985925e+00 2.274206e-08 #> 58    0.57 571.176958 314.487244 110.1620213 3.312843e+00 2.799188e-08 #> 59    0.58 547.394547 336.235538 111.7419073 3.667358e+00 3.431106e-08 #> 60    0.59 523.067228 358.525726 113.2861305 4.050516e+00 4.189020e-08 #> 61    0.60 498.309018 381.243590 114.7932322 4.463209e+00 5.094942e-08 #> 62    0.61 473.244877 404.263967 116.2619138 4.906150e+00 6.174238e-08 #> 63    0.62 448.008358 427.453099 117.6910630 5.379852e+00 7.456065e-08 #> 64    0.63 422.738824 450.671417 119.0797762 5.884611e+00 8.973872e-08 #> 65    0.64 397.578349 473.776640 120.4273771 6.420487e+00 1.076595e-07 #> 66    0.65 372.668431 496.627068 121.7334305 6.987299e+00 1.287606e-07 #> 67    0.66 348.146690 519.084879 122.9977501 7.584622e+00 1.535411e-07 #> 68    0.67 324.143701 541.019303 124.2204001 8.211786e+00 1.825690e-07 #> 69    0.68 300.780125 562.309487 125.4016916 8.867891e+00 2.164904e-07 #> 70    0.69 278.164269 582.846942 126.5421723 9.551814e+00 2.560382e-07 #> 71    0.70 256.390169 602.537456 127.6426112 1.026224e+01 3.020430e-07 #> 72    0.71 235.536271 621.302418 128.7039790 1.099766e+01 3.554446e-07 #> 73    0.72 215.664718 639.079529 129.7274245 1.175645e+01 4.173050e-07 #> 74    0.73 196.821236 655.822918 130.7142492 1.253683e+01 4.888226e-07 #> 75    0.74 179.035549 671.502725 131.6658795 1.333695e+01 5.713483e-07 #> 76    0.75 162.322271 686.104214 132.5838393 1.415491e+01 6.664022e-07 #> 77    0.76 146.682153 699.626522 133.4697228 1.498874e+01 7.756939e-07 #> 78    0.77 132.103596 712.081149 134.3251688 1.583649e+01 9.011431e-07 #> 79    0.78 118.564332 723.490275 135.1518369 1.669624e+01 1.044903e-06 #> 80    0.79 106.033165 733.885015 135.9513861 1.756608e+01 1.209387e-06 #> 81    0.80  94.471717 743.303685 136.7254562 1.844418e+01 1.397297e-06 #> 82    0.81  83.836081 751.790133 137.4756523 1.932877e+01 1.611652e-06 #> 83    0.82  74.078371 759.392199 138.2035315 2.021815e+01 1.855826e-06 #> 84    0.83  65.148099 766.160333 138.9105926 2.111075e+01 2.133586e-06 #> 85    0.84  56.993393 772.146380 139.5982691 2.200505e+01 2.449129e-06 #> 86    0.85  49.562027 777.402546 140.2679231 2.289967e+01 2.807130e-06 #> 87    0.86  42.802275 781.980544 140.9208424 2.379330e+01 3.212791e-06 #> 88    0.87  36.663601 785.930906 141.5582384 2.468477e+01 3.671896e-06 #> 89    0.88  31.097190 789.302446 142.1812465 2.557297e+01 4.190866e-06 #> 90    0.89  26.056350 792.141866 142.7909265 2.645691e+01 4.776826e-06 #> 91    0.90  21.496786 794.493471 143.3882648 2.733569e+01 5.437674e-06 #> 92    0.91  17.376784 796.398996 143.9741769 2.820849e+01 6.182155e-06 #> 93    0.92  13.657301 797.897504 144.5495106 2.907459e+01 7.019942e-06 #> 94    0.93  10.301996 799.025363 145.1150497 2.993334e+01 7.961728e-06 #> 95    0.94   7.277204 799.816268 145.6715171 3.078415e+01 9.019315e-06 #> 96    0.95   4.551871 800.301308 146.2195792 3.162652e+01 1.020572e-05 #> 97    0.96   2.097451 800.509064 146.7598496 3.246001e+01 1.153530e-05 #> 98    0.97   0.000000 800.465722 147.1806904 3.328421e+01 1.302384e-05 #> 99    0.98   0.000000 800.206436 145.7081477 3.409768e+01 1.468869e-05 #> 100   0.99   0.000000 799.940904 144.2493688 3.488128e+01 1.654895e-05 #> 101   1.00   0.000000 799.669171 142.8042979 3.563566e+01 1.862553e-05 #> 102   1.01   0.000000 799.391280 141.3728765 3.636145e+01 2.094138e-05 #> 103   1.02   0.000000 799.107275 139.9550433 3.705927e+01 2.352163e-05 #> 104   1.03   0.000000 798.817200 138.5507346 3.772976e+01 2.639376e-05 #> 105   1.04   0.000000 798.521098 137.1598842 3.837351e+01 2.958779e-05 #> 106   1.05   0.000000 798.219014 135.7824238 3.899113e+01 3.313650e-05 #> 107   1.06   0.000000 797.910989 134.4182827 3.958319e+01 3.707562e-05 #> 108   1.07   0.000000 797.597067 133.0673884 4.015028e+01 4.144407e-05 #> 109   1.08   0.000000 797.277291 131.7296662 4.069298e+01 4.628419e-05 #> 110   1.09   0.000000 796.951702 130.4050396 4.121183e+01 5.164197e-05 #> 111   1.10   0.000000 796.620343 129.0934307 4.170739e+01 5.756735e-05 #> 112   1.11   0.000000 796.283256 127.7947594 4.218020e+01 6.411446e-05 #> 113   1.12   0.000000 795.940482 126.5089446 4.263079e+01 7.134194e-05 #> 114   1.13   0.000000 795.592064 125.2359034 4.305969e+01 7.931320e-05 #> 115   1.14   0.000000 795.238042 123.9755517 4.346740e+01 8.809679e-05 #> 116   1.15   0.000000 794.878457 122.7278040 4.385443e+01 9.776666e-05 #> 117   1.16   0.000000 794.513351 121.4925739 4.422129e+01 1.084026e-04 #> 118   1.17   0.000000 794.142764 120.2697735 4.456845e+01 1.200904e-04 #> 119   1.18   0.000000 793.766736 119.0593142 4.489639e+01 1.329225e-04 #> 120   1.19   0.000000 793.385308 117.8611064 4.520559e+01 1.469981e-04 #> 121   1.20   0.000000 792.998519 116.6750593 4.549651e+01 1.624237e-04 #> 122   1.21   0.000000 792.606410 115.5010819 4.576960e+01 1.793137e-04 #> 123   1.22   0.000000 792.209019 114.3390818 4.602530e+01 1.977902e-04 #> 124   1.23   0.000000 791.806387 113.1889665 4.626405e+01 2.179841e-04 #> 125   1.24   0.000000 791.398553 112.0506426 4.648628e+01 2.400351e-04 #> 126   1.25   0.000000 790.985554 110.9240162 4.669242e+01 2.640925e-04 #> 127   1.26   0.000000 790.567431 109.8089929 4.688287e+01 2.903155e-04 #> 128   1.27   0.000000 790.144221 108.7054780 4.705804e+01 3.188733e-04 #> 129   1.28   0.000000 789.715963 107.6133764 4.721833e+01 3.499464e-04 #> 130   1.29   0.000000 789.282695 106.5325925 4.736413e+01 3.837263e-04 #> 131   1.30   0.000000 788.844455 105.4630306 4.749582e+01 4.204164e-04 #> 132   1.31   0.000000 788.401280 104.4045948 4.761378e+01 4.602326e-04 #> 133   1.32   0.000000 787.953208 103.3571891 4.771837e+01 5.034036e-04 #> 134   1.33   0.000000 787.500277 102.3207171 4.780995e+01 5.501712e-04 #> 135   1.34   0.000000 787.042522 101.2950826 4.788889e+01 6.007914e-04 #> 136   1.35   0.000000 786.579981 100.2801892 4.795552e+01 6.555346e-04 #> 137   1.36   0.000000 786.112691  99.2759407 4.801018e+01 7.146860e-04 #> 138   1.37   0.000000 785.640688  98.2822407 4.805322e+01 7.785464e-04 #> 139   1.38   0.000000 785.164008  97.2989931 4.808495e+01 8.474327e-04 #> 140   1.39   0.000000 784.682687  96.3261016 4.810569e+01 9.216783e-04 #> 141   1.40   0.000000 784.196761  95.3634706 4.811577e+01 1.001634e-03 #> 142   1.41   0.000000 783.706266  94.4110040 4.811548e+01 1.087667e-03 #> 143   1.42   0.000000 783.211236  93.4686065 4.810512e+01 1.180165e-03 #> 144   1.43   0.000000 782.711708  92.5361827 4.808500e+01 1.279533e-03 #> 145   1.44   0.000000 782.207715  91.6136377 4.805540e+01 1.386195e-03 #> 146   1.45   0.000000 781.699293  90.7008766 4.801660e+01 1.500595e-03 #> 147   1.46   0.000000 781.186477  89.7978051 4.796888e+01 1.623198e-03 #> 148   1.47   0.000000 780.669300  88.9043291 4.791251e+01 1.754489e-03 #> 149   1.48   0.000000 780.147797  88.0203550 4.784775e+01 1.894976e-03 #> 150   1.49   0.000000 779.622001  87.1457894 4.777487e+01 2.045187e-03 #> 151   1.50   0.000000 779.091947  86.2805396 4.769411e+01 2.205672e-03 #> 152   1.51   0.000000 778.557668  85.4245130 4.760573e+01 2.377007e-03 #> 153   1.52   0.000000 778.019197  84.5776177 4.750997e+01 2.559788e-03 #> 154   1.53   0.000000 777.476567  83.7397622 4.740707e+01 2.754637e-03 #> 155   1.54   0.000000 776.929812  82.9108555 4.729725e+01 2.962198e-03 #> 156   1.55   0.000000 776.378964  82.0908071 4.718075e+01 3.183143e-03 #> 157   1.56   0.000000 775.824055  81.2795269 4.705779e+01 3.418166e-03 #> 158   1.57   0.000000 775.265118  80.4769255 4.692858e+01 3.667988e-03 #> 159   1.58   0.000000 774.702185  79.6829141 4.679335e+01 3.933356e-03 #> 160   1.59   0.000000 774.135288  78.8974042 4.665229e+01 4.215044e-03 #> 161   1.60   0.000000 773.564458  78.1203081 4.650561e+01 4.513851e-03 #> 162   1.61   0.000000 772.989727  77.3515386 4.635350e+01 4.830605e-03 #> 163   1.62   0.000000 772.411127  76.5910091 4.619617e+01 5.166159e-03 #> 164   1.63   0.000000 771.828688  75.8386336 4.603380e+01 5.521397e-03 #> 165   1.64   0.000000 771.242441  75.0943267 4.586658e+01 5.897229e-03 #> 166   1.65   0.000000 770.652418  74.3580037 4.569468e+01 6.294594e-03 #> 167   1.66   0.000000 770.058648  73.6295804 4.551829e+01 6.714460e-03 #> 168   1.67   0.000000 769.461161  72.9089733 4.533757e+01 7.157821e-03 #> 169   1.68   0.000000 768.859989  72.1960996 4.515270e+01 7.625706e-03 #> 170   1.69   0.000000 768.255161  71.4908771 4.496384e+01 8.119167e-03 #> 171   1.70   0.000000 767.646707  70.7932243 4.477115e+01 8.639291e-03 #> 172   1.71   0.000000 767.034656  70.1030601 4.457479e+01 9.187190e-03 #> 173   1.72   0.000000 766.419037  69.4203044 4.437490e+01 9.764010e-03 #> 174   1.73   0.000000 765.799880  68.7448777 4.417165e+01 1.037092e-02 #> 175   1.74   0.000000 765.177214  68.0767010 4.396517e+01 1.100914e-02 #> 176   1.75   0.000000 764.551067  67.4156960 4.375560e+01 1.167988e-02 #> 177   1.76   0.000000 763.921468  66.7617854 4.354310e+01 1.238443e-02 #> 178   1.77   0.000000 763.288445  66.1148921 4.332778e+01 1.312407e-02 #> 179   1.78   0.000000 762.652027  65.4749399 4.310978e+01 1.390013e-02 #> 180   1.79   0.000000 762.012242  64.8418534 4.288924e+01 1.471396e-02 #> 181   1.80   0.000000 761.369117  64.2155578 4.266627e+01 1.556696e-02 #> 182   1.81   0.000000 760.722680  63.5959788 4.244100e+01 1.646053e-02 #> 183   1.82   0.000000 760.072959  62.9830431 4.221355e+01 1.739613e-02 #> 184   1.83   0.000000 759.419980  62.3766777 4.198403e+01 1.837524e-02 #> 185   1.84   0.000000 758.763771  61.7768107 4.175256e+01 1.939936e-02 #> 186   1.85   0.000000 758.104358  61.1833705 4.151924e+01 2.047003e-02 #> 187   1.86   0.000000 757.441769  60.5962865 4.128419e+01 2.158881e-02 #> 188   1.87   0.000000 756.776030  60.0154886 4.104750e+01 2.275731e-02 #> 189   1.88   0.000000 756.107167  59.4409074 4.080929e+01 2.397716e-02 #> 190   1.89   0.000000 755.435206  58.8724741 4.056965e+01 2.525000e-02 #> 191   1.90   0.000000 754.760174  58.3101208 4.032867e+01 2.657753e-02 #> 192   1.91   0.000000 754.082096  57.7537801 4.008645e+01 2.796145e-02 #> 193   1.92   0.000000 753.400997  57.2033853 3.984308e+01 2.940352e-02 #> 194   1.93   0.000000 752.716904  56.6588703 3.959865e+01 3.090551e-02 #> 195   1.94   0.000000 752.029841  56.1201699 3.935324e+01 3.246922e-02 #> 196   1.95   0.000000 751.339833  55.5872193 3.910694e+01 3.409646e-02 #> 197   1.96   0.000000 750.646906  55.0599544 3.885984e+01 3.578911e-02 #> 198   1.97   0.000000 749.951084  54.5383119 3.861201e+01 3.754905e-02 #> 199   1.98   0.000000 749.252392  54.0222291 3.836352e+01 3.937817e-02 #> 200   1.99   0.000000 748.550854  53.5116439 3.811446e+01 4.127843e-02 #> 201   2.00   0.000000 747.846495  53.0064949 3.786489e+01 4.325178e-02 #> 202   2.01   0.000000 747.139337  52.5067212 3.761489e+01 4.530021e-02 #> 203   2.02   0.000000 746.429406  52.0122627 3.736452e+01 4.742574e-02 #> 204   2.03   0.000000 745.716725  51.5230600 3.711386e+01 4.963041e-02 #> 205   2.04   0.000000 745.001317  51.0390541 3.686296e+01 5.191627e-02 #> 206   2.05   0.000000 744.283207  50.5601867 3.661189e+01 5.428542e-02 #> 207   2.06   0.000000 743.562416  50.0864003 3.636071e+01 5.673997e-02 #> 208   2.07   0.000000 742.838969  49.6176378 3.610949e+01 5.928205e-02 #> 209   2.08   0.000000 742.112888  49.1538428 3.585826e+01 6.191382e-02 #> 210   2.09   0.000000 741.384195  48.6949595 3.560711e+01 6.463745e-02 #> 211   2.10   0.000000 740.652914  48.2409328 3.535607e+01 6.745516e-02 #> 212   2.11   0.000000 739.919067  47.7917081 3.510519e+01 7.036915e-02 #> 213   2.12   0.000000 739.182676  47.3472313 3.485454e+01 7.338168e-02 #> 214   2.13   0.000000 738.443763  46.9074490 3.460416e+01 7.649500e-02 #> 215   2.14   0.000000 737.702351  46.4723086 3.435409e+01 7.971140e-02 #> 216   2.15   0.000000 736.958460  46.0417576 3.410438e+01 8.303317e-02 #> 217   2.16   0.000000 736.212113  45.6157446 3.385508e+01 8.646265e-02 #> 218   2.17   0.000000 735.463331  45.1942183 3.360624e+01 9.000215e-02 #> 219   2.18   0.000000 734.712135  44.7771283 3.335788e+01 9.365404e-02 #> 220   2.19   0.000000 733.958547  44.3644247 3.311005e+01 9.742069e-02 #> 221   2.20   0.000000 733.202588  43.9560580 3.286279e+01 1.013045e-01 #> 222   2.21   0.000000 732.444279  43.5519794 3.261615e+01 1.053078e-01 #> 223   2.22   0.000000 731.683639  43.1521407 3.237014e+01 1.094331e-01 #> 224   2.23   0.000000 730.920691  42.7564940 3.212482e+01 1.136828e-01 #> 225   2.24   0.000000 730.155454  42.3649922 3.188020e+01 1.180593e-01 #> 226   2.25   0.000000 729.387949  41.9775886 3.163634e+01 1.225651e-01 #> 227   2.26   0.000000 728.618196  41.5942370 3.139325e+01 1.272027e-01 #> 228   2.27   0.000000 727.846215  41.2148918 3.115096e+01 1.319745e-01 #> 229   2.28   0.000000 727.072026  40.8395080 3.090952e+01 1.368831e-01 #> 230   2.29   0.000000 726.295648  40.4680409 3.066894e+01 1.419309e-01 #> 231   2.30   0.000000 725.517102  40.1004464 3.042924e+01 1.471205e-01 #> 232   2.31   0.000000 724.736407  39.7366810 3.019047e+01 1.524543e-01 #> 233   2.32   0.000000 723.953582  39.3767015 2.995264e+01 1.579349e-01 #> 234   2.33   0.000000 723.168647  39.0204654 2.971577e+01 1.635649e-01 #> 235   2.34   0.000000 722.381620  38.6679306 2.947990e+01 1.693467e-01 #> 236   2.35   0.000000 721.592521  38.3190555 2.924503e+01 1.752830e-01 #> 237   2.36   0.000000 720.801369  37.9737988 2.901120e+01 1.813762e-01 #> 238   2.37   0.000000 720.008181  37.6321201 2.877842e+01 1.876290e-01 #> 239   2.38   0.000000 719.212977  37.2939789 2.854671e+01 1.940440e-01 #> 240   2.39   0.000000 718.415776  36.9593357 2.831609e+01 2.006236e-01 #> 241   2.40   0.000000 717.616595  36.6281512 2.808657e+01 2.073705e-01 #> 242   2.41   0.000000 716.815454  36.3003864 2.785819e+01 2.142872e-01 #> 243   2.42   0.000000 716.012369  35.9760031 2.763094e+01 2.213763e-01 #> 244   2.43   0.000000 715.207359  35.6549634 2.740485e+01 2.286404e-01 #> 245   2.44   0.000000 714.400442  35.3372296 2.717993e+01 2.360821e-01 #> 246   2.45   0.000000 713.591636  35.0227649 2.695620e+01 2.437040e-01 #> 247   2.46   0.000000 712.780958  34.7115325 2.673366e+01 2.515086e-01 #> 248   2.47   0.000000 711.968426  34.4034963 2.651234e+01 2.594985e-01 #> 249   2.48   0.000000 711.154057  34.0986204 2.629223e+01 2.676763e-01 #> 250   2.49   0.000000 710.337869  33.7968696 2.607336e+01 2.760445e-01 #> 251   2.50   0.000000 709.519879  33.4982089 2.585574e+01 2.846058e-01 #> 252   2.51   0.000000 708.700103  33.2026037 2.563936e+01 2.933627e-01 #> 253   2.52   0.000000 707.878560  32.9100199 2.542426e+01 3.023178e-01 #> 254   2.53   0.000000 707.055265  32.6204238 2.521042e+01 3.114735e-01 #> 255   2.54   0.000000 706.230235  32.3337820 2.499786e+01 3.208326e-01 #> 256   2.55   0.000000 705.403488  32.0500615 2.478659e+01 3.303975e-01 #> 257   2.56   0.000000 704.575039  31.7692299 2.457661e+01 3.401708e-01 #> 258   2.57   0.000000 703.744906  31.4912548 2.436794e+01 3.501549e-01 #> 259   2.58   0.000000 702.913104  31.2161046 2.416057e+01 3.603525e-01 #> 260   2.59   0.000000 702.079649  30.9437477 2.395452e+01 3.707660e-01 #> 261   2.60   0.000000 701.244559  30.6741531 2.374978e+01 3.813980e-01 #> 262   2.61   0.000000 700.407849  30.4072900 2.354637e+01 3.922509e-01 #> 263   2.62   0.000000 699.569534  30.1431282 2.334428e+01 4.033273e-01 #> 264   2.63   0.000000 698.729631  29.8816376 2.314352e+01 4.146295e-01 #> 265   2.64   0.000000 697.888156  29.6227886 2.294410e+01 4.261602e-01 #> 266   2.65   0.000000 697.045124  29.3665518 2.274601e+01 4.379217e-01 #> 267   2.66   0.000000 696.200551  29.1128984 2.254926e+01 4.499165e-01 #> 268   2.67   0.000000 695.354452  28.8617998 2.235386e+01 4.621470e-01 #> 269   2.68   0.000000 694.506842  28.6132275 2.215979e+01 4.746157e-01 #> 270   2.69   0.000000 693.657738  28.3671538 2.196707e+01 4.873248e-01 #> 271   2.70   0.000000 692.807154  28.1235509 2.177570e+01 5.002769e-01 #> 272   2.71   0.000000 691.955104  27.8823916 2.158567e+01 5.134744e-01 #> 273   2.72   0.000000 691.101606  27.6436489 2.139699e+01 5.269194e-01 #> 274   2.73   0.000000 690.246672  27.4072962 2.120965e+01 5.406146e-01 #> 275   2.74   0.000000 689.390319  27.1733071 2.102366e+01 5.545620e-01 #> 276   2.75   0.000000 688.532560  26.9416555 2.083902e+01 5.687641e-01 #> 277   2.76   0.000000 687.673411  26.7123158 2.065572e+01 5.832232e-01 #> 278   2.77   0.000000 686.812886  26.4852624 2.047376e+01 5.979415e-01 #> 279   2.78   0.000000 685.950999  26.2604704 2.029314e+01 6.129212e-01 #> 280   2.79   0.000000 685.087766  26.0379147 2.011387e+01 6.281648e-01 #> 281   2.80   0.000000 684.223201  25.8175710 1.993593e+01 6.436743e-01 #> 282   2.81   0.000000 683.357317  25.5994148 1.975933e+01 6.594519e-01 #> 283   2.82   0.000000 682.490129  25.3834223 1.958406e+01 6.755000e-01 #> 284   2.83   0.000000 681.621651  25.1695698 1.941012e+01 6.918205e-01 #> 285   2.84   0.000000 680.751897  24.9578338 1.923751e+01 7.084158e-01 #> 286   2.85   0.000000 679.880881  24.7481911 1.906623e+01 7.252878e-01 #> 287   2.86   0.000000 679.008618  24.5406190 1.889626e+01 7.424388e-01 #> 288   2.87   0.000000 678.135120  24.3350948 1.872762e+01 7.598707e-01 #> 289   2.88   0.000000 677.260402  24.1315961 1.856028e+01 7.775857e-01 #> 290   2.89   0.000000 676.384477  23.9301010 1.839426e+01 7.955859e-01 #> 291   2.90   0.000000 675.507359  23.7305875 1.822954e+01 8.138731e-01 #> 292   2.91   0.000000 674.629061  23.5330341 1.806613e+01 8.324495e-01 #> 293   2.92   0.000000 673.749597  23.3374194 1.790401e+01 8.513170e-01 #> 294   2.93   0.000000 672.868980  23.1437225 1.774318e+01 8.704775e-01 #> 295   2.94   0.000000 671.987224  22.9519225 1.758364e+01 8.899330e-01 #> 296   2.95   0.000000 671.104342  22.7619987 1.742539e+01 9.096854e-01 #> 297   2.96   0.000000 670.220347  22.5739310 1.726841e+01 9.297366e-01 #> 298   2.97   0.000000 669.335252  22.3876991 1.711270e+01 9.500884e-01 #> 299   2.98   0.000000 668.449070  22.2032832 1.695827e+01 9.707427e-01 #> 300   2.99   0.000000 667.561814  22.0206637 1.680509e+01 9.917013e-01 #> 301   3.00   0.000000 666.673497  21.8398211 1.665317e+01 1.012966e+00 #> 302   3.01   0.000000 665.784132  21.6607364 1.650250e+01 1.034538e+00 #> 303   3.02   0.000000 664.893732  21.4833904 1.635307e+01 1.056420e+00 #> 304   3.03   0.000000 664.002310  21.3077645 1.620489e+01 1.078614e+00 #> 305   3.04   0.000000 663.109877  21.1338402 1.605793e+01 1.101120e+00 #> 306   3.05   0.000000 662.216448  20.9615991 1.591221e+01 1.123941e+00 #> 307   3.06   0.000000 661.322033  20.7910231 1.576770e+01 1.147078e+00 #> 308   3.07   0.000000 660.426646  20.6220945 1.562441e+01 1.170533e+00 #> 309   3.08   0.000000 659.530300  20.4547954 1.548232e+01 1.194307e+00 #> 310   3.09   0.000000 658.633006  20.2891085 1.534144e+01 1.218403e+00 #> 311   3.10   0.000000 657.734777  20.1250164 1.520175e+01 1.242821e+00 #> 312   3.11   0.000000 656.835625  19.9625021 1.506325e+01 1.267563e+00 #> 313   3.12   0.000000 655.935562  19.8015487 1.492593e+01 1.292630e+00 #> 314   3.13   0.000000 655.034601  19.6421395 1.478979e+01 1.318025e+00 #> 315   3.14   0.000000 654.132753  19.4842581 1.465481e+01 1.343747e+00 #> 316   3.15   0.000000 653.230031  19.3278882 1.452099e+01 1.369800e+00 #> 317   3.16   0.000000 652.326446  19.1730136 1.438833e+01 1.396184e+00 #> 318   3.17   0.000000 651.422010  19.0196184 1.425682e+01 1.422900e+00 #> 319   3.18   0.000000 650.516736  18.8676869 1.412645e+01 1.449950e+00 #> 320   3.19   0.000000 649.610635  18.7172035 1.399721e+01 1.477334e+00 #> 321   3.20   0.000000 648.703718  18.5681530 1.386910e+01 1.505056e+00 #> 322   3.21   0.000000 647.795998  18.4205199 1.374210e+01 1.533115e+00 #> 323   3.22   0.000000 646.887487  18.2742894 1.361622e+01 1.561512e+00 #> 324   3.23   0.000000 645.978194  18.1294466 1.349145e+01 1.590249e+00 #> 325   3.24   0.000000 645.068133  17.9859767 1.336777e+01 1.619328e+00 #> 326   3.25   0.000000 644.157315  17.8438654 1.324518e+01 1.648749e+00 #> 327   3.26   0.000000 643.245751  17.7030982 1.312367e+01 1.678513e+00 #> 328   3.27   0.000000 642.333452  17.5636609 1.300325e+01 1.708621e+00 #> 329   3.28   0.000000 641.420431  17.4255396 1.288389e+01 1.739074e+00 #> 330   3.29   0.000000 640.506697  17.2887203 1.276559e+01 1.769874e+00 #> 331   3.30   0.000000 639.592263  17.1531894 1.264834e+01 1.801022e+00 #> 332   3.31   0.000000 638.677139  17.0189333 1.253214e+01 1.832517e+00 #> 333   3.32   0.000000 637.761337  16.8859387 1.241699e+01 1.864362e+00 #> 334   3.33   0.000000 636.844867  16.7541922 1.230286e+01 1.896557e+00 #> 335   3.34   0.000000 635.927742  16.6236809 1.218976e+01 1.929103e+00 #> 336   3.35   0.000000 635.009971  16.4943917 1.207767e+01 1.962000e+00 #> 337   3.36   0.000000 634.091566  16.3663119 1.196660e+01 1.995250e+00 #> 338   3.37   0.000000 633.172538  16.2394288 1.185653e+01 2.028854e+00 #> 339   3.38   0.000000 632.252897  16.1137300 1.174745e+01 2.062812e+00 #> 340   3.39   0.000000 631.332654  15.9892030 1.163936e+01 2.097124e+00 #> 341   3.40   0.000000 630.411820  15.8658357 1.153226e+01 2.131792e+00 #> 342   3.41   0.000000 629.490406  15.7436159 1.142612e+01 2.166816e+00 #> 343   3.42   0.000000 628.568423  15.6225318 1.132095e+01 2.202198e+00 #> 344   3.43   0.000000 627.645880  15.5025715 1.121674e+01 2.237936e+00 #> 345   3.44   0.000000 626.722789  15.3837233 1.111349e+01 2.274033e+00 #> 346   3.45   0.000000 625.799160  15.2659758 1.101117e+01 2.310488e+00 #> 347   3.46   0.000000 624.875004  15.1493174 1.090979e+01 2.347302e+00 #> 348   3.47   0.000000 623.950331  15.0337369 1.080935e+01 2.384476e+00 #> 349   3.48   0.000000 623.025151  14.9192232 1.070982e+01 2.422011e+00 #> 350   3.49   0.000000 622.099475  14.8057652 1.061121e+01 2.459905e+00 #> 351   3.50   0.000000 621.173313  14.6933520 1.051351e+01 2.498161e+00 #> 352   3.51   0.000000 620.246676  14.5819728 1.041670e+01 2.536778e+00 #> 353   3.52   0.000000 619.319573  14.4716170 1.032080e+01 2.575757e+00 #> 354   3.53   0.000000 618.392015  14.3622741 1.022577e+01 2.615097e+00 #> 355   3.54   0.000000 617.464012  14.2539335 1.013163e+01 2.654801e+00 #> 356   3.55   0.000000 616.535574  14.1465850 1.003836e+01 2.694866e+00 #> 357   3.56   0.000000 615.606712  14.0402184 9.945950e+00 2.735295e+00 #> 358   3.57   0.000000 614.677434  13.9348237 9.854401e+00 2.776087e+00 #> 359   3.58   0.000000 613.747751  13.8303908 9.763703e+00 2.817242e+00 #> 360   3.59   0.000000 612.817674  13.7269099 9.673849e+00 2.858761e+00 #> 361   3.60   0.000000 611.887211  13.6243713 9.584831e+00 2.900644e+00 #> 362   3.61   0.000000 610.956373  13.5227653 9.496643e+00 2.942890e+00 #> 363   3.62   0.000000 610.025170  13.4220824 9.409278e+00 2.985500e+00 #> 364   3.63   0.000000 609.093611  13.3223132 9.322729e+00 3.028474e+00 #> 365   3.64   0.000000 608.161707  13.2234484 9.236988e+00 3.071812e+00 #> 366   3.65   0.000000 607.229466  13.1254787 9.152050e+00 3.115515e+00 #> 367   3.66   0.000000 606.296899  13.0283951 9.067907e+00 3.159581e+00 #> 368   3.67   0.000000 605.364014  12.9321885 8.984553e+00 3.204011e+00 #> 369   3.68   0.000000 604.430823  12.8368500 8.901980e+00 3.248806e+00 #> 370   3.69   0.000000 603.497334  12.7423709 8.820182e+00 3.293964e+00 #> 371   3.70   0.000000 602.563556  12.6487424 8.739153e+00 3.339486e+00 #> 372   3.71   0.000000 601.629500  12.5559558 8.658884e+00 3.385372e+00 #> 373   3.72   0.000000 600.695174  12.4640028 8.579371e+00 3.431621e+00 #> 374   3.73   0.000000 599.760588  12.3728748 8.500605e+00 3.478233e+00 #> 375   3.74   0.000000 598.825751  12.2825635 8.422580e+00 3.525209e+00 #> 376   3.75   0.000000 597.890674  12.1930607 8.345291e+00 3.572548e+00 #> 377   3.76   0.000000 596.955364  12.1043583 8.268729e+00 3.620249e+00 #> 378   3.77   0.000000 596.019831  12.0164481 8.192888e+00 3.668313e+00 #> 379   3.78   0.000000 595.084084  11.9293222 8.117762e+00 3.716739e+00 #> 380   3.79   0.000000 594.148133  11.8429727 8.043344e+00 3.765526e+00 #> 381   3.80   0.000000 593.211987  11.7573919 7.969627e+00 3.814675e+00 #> 382   3.81   0.000000 592.275654  11.6725719 7.896606e+00 3.864185e+00 #> 383   3.82   0.000000 591.339144  11.5885053 7.824272e+00 3.914056e+00 #> 384   3.83   0.000000 590.402466  11.5051844 7.752619e+00 3.964287e+00 #> 385   3.84   0.000000 589.465629  11.4226018 7.681642e+00 4.014878e+00 #> 386   3.85   0.000000 588.528641  11.3407501 7.611332e+00 4.065829e+00 #> 387   3.86   0.000000 587.591512  11.2596220 7.541684e+00 4.117138e+00 #> 388   3.87   0.000000 586.654250  11.1792103 7.472691e+00 4.168806e+00 #> 389   3.88   0.000000 585.716864  11.0995078 7.404345e+00 4.220832e+00 #> 390   3.89   0.000000 584.779364  11.0205076 7.336640e+00 4.273215e+00 #> 391   3.90   0.000000 583.841757  10.9422026 7.269570e+00 4.325955e+00 #> 392   3.91   0.000000 582.904053  10.8645859 7.203127e+00 4.379051e+00 #> 393   3.92   0.000000 581.966260  10.7876506 7.137305e+00 4.432503e+00 #> 394   3.93   0.000000 581.028386  10.7113901 7.072097e+00 4.486309e+00 #> 395   3.94   0.000000 580.090442  10.6357976 7.007495e+00 4.540471e+00 #> 396   3.95   0.000000 579.152434  10.5608665 6.943493e+00 4.594986e+00 #> 397   3.96   0.000000 578.214371  10.4865904 6.880084e+00 4.649853e+00 #> 398   3.97   0.000000 577.276263  10.4129626 6.817261e+00 4.705074e+00 #> 399   3.98   0.000000 576.338117  10.3399769 6.755016e+00 4.760645e+00 #> 400   3.99   0.000000 575.399943  10.2676269 6.693344e+00 4.816568e+00 #> 401   4.00   0.000000 574.461747  10.1959063 6.632237e+00 4.872841e+00 #> 402   4.01   0.000000 573.523539  10.1248089 6.571688e+00 4.929463e+00 #> 403   4.02   0.000000 572.585327  10.0543287 6.511691e+00 4.986434e+00 #> 404   4.03   0.000000 571.647120   9.9844595 6.452238e+00 5.043752e+00 #> 405   4.04   0.000000 570.708925   9.9151954 6.393325e+00 5.101417e+00 #> 406   4.05   0.000000 569.770751   9.8465304 6.334943e+00 5.159428e+00 #> 407   4.06   0.000000 568.832606   9.7784587 6.277088e+00 5.217784e+00 #> 408   4.07   0.000000 567.894497   9.7109744 6.219752e+00 5.276485e+00 #> 409   4.08   0.000000 566.956435   9.6440719 6.162932e+00 5.335529e+00 #> 410   4.09   0.000000 566.018425   9.5777455 6.106620e+00 5.394915e+00 #> 411   4.10   0.000000 565.080477   9.5119895 6.050812e+00 5.454643e+00 #> 412   4.11   0.000000 564.142598   9.4467983 5.995504e+00 5.514711e+00 #> 413   4.12   0.000000 563.204796   9.3821666 5.940690e+00 5.575118e+00 #> 414   4.13   0.000000 562.267080   9.3180888 5.886366e+00 5.635865e+00 #> 415   4.14   0.000000 561.329457   9.2545595 5.832529e+00 5.696948e+00 #> 416   4.15   0.000000 560.391934   9.1915735 5.779174e+00 5.758369e+00 #> 417   4.16   0.000000 559.454521   9.1291255 5.726298e+00 5.820124e+00 #> 418   4.17   0.000000 558.517225   9.0672102 5.673898e+00 5.882214e+00 #> 419   4.18   0.000000 557.580052   9.0058225 5.621970e+00 5.944638e+00 #> 420   4.19   0.000000 556.643013   8.9449573 5.570512e+00 6.007393e+00 #> 421   4.20   0.000000 555.706112   8.8846096 5.519521e+00 6.070480e+00 #> 422   4.21   0.000000 554.769360   8.8247744 5.468993e+00 6.133897e+00 #> 423   4.22   0.000000 553.832763   8.7654467 5.418927e+00 6.197642e+00 #> 424   4.23   0.000000 552.896328   8.7066216 5.369320e+00 6.261716e+00 #> 425   4.24   0.000000 551.960064   8.6482943 5.320168e+00 6.326116e+00 #> 426   4.25   0.000000 551.023977   8.5904600 5.271470e+00 6.390841e+00 #> 427   4.26   0.000000 550.088076   8.5331140 5.223223e+00 6.455890e+00 #> 428   4.27   0.000000 549.152368   8.4762516 5.175424e+00 6.521263e+00 #> 429   4.28   0.000000 548.216860   8.4198681 5.128071e+00 6.586957e+00 #> 430   4.29   0.000000 547.281560   8.3639590 5.081160e+00 6.652972e+00 #> 431   4.30   0.000000 546.346475   8.3085197 5.034689e+00 6.719306e+00 #> 432   4.31   0.000000 545.411612   8.2535458 4.988656e+00 6.785958e+00 #> 433   4.32   0.000000 544.476978   8.1990328 4.943056e+00 6.852927e+00 #> 434   4.33   0.000000 543.542582   8.1449762 4.897887e+00 6.920212e+00 #> 435   4.34   0.000000 542.608430   8.0913718 4.853147e+00 6.987810e+00 #> 436   4.35   0.000000 541.674529   8.0382152 4.808831e+00 7.055722e+00 #> 437   4.36   0.000000 540.740886   7.9855022 4.764937e+00 7.123945e+00 #> 438   4.37   0.000000 539.807509   7.9332285 4.721462e+00 7.192478e+00 #> 439   4.38   0.000000 538.874405   7.8813901 4.678402e+00 7.261320e+00 #> 440   4.39   0.000000 537.941581   7.8299827 4.635754e+00 7.330470e+00 #> 441   4.40   0.000000 537.009043   7.7790022 4.593514e+00 7.399926e+00 #> 442   4.41   0.000000 536.076799   7.7284447 4.551680e+00 7.469687e+00 #> 443   4.42   0.000000 535.144856   7.6783061 4.510247e+00 7.539751e+00 #> 444   4.43   0.000000 534.213220   7.6285824 4.469213e+00 7.610117e+00 #> 445   4.44   0.000000 533.281899   7.5792698 4.428575e+00 7.680784e+00 #> 446   4.45   0.000000 532.350900   7.5303644 4.388347e+00 7.751750e+00 #> 447   4.46   0.000000 531.420228   7.4818623 4.348527e+00 7.823014e+00 #> 448   4.47   0.000000 530.489892   7.4337597 4.309109e+00 7.894574e+00 #> 449   4.48   0.000000 529.559897   7.3860529 4.270089e+00 7.966429e+00 #> 450   4.49   0.000000 528.630251   7.3387381 4.231463e+00 8.038578e+00 #> 451   4.50   0.000000 527.700960   7.2918117 4.193227e+00 8.111018e+00 #> 452   4.51   0.000000 526.772032   7.2452701 4.155376e+00 8.183749e+00 #> 453   4.52   0.000000 525.843471   7.1991095 4.117908e+00 8.256769e+00 #> 454   4.53   0.000000 524.915286   7.1533265 4.080816e+00 8.330077e+00 #> 455   4.54   0.000000 523.987482   7.1079175 4.044098e+00 8.403670e+00 #> 456   4.55   0.000000 523.060067   7.0628791 4.007749e+00 8.477548e+00 #> 457   4.56   0.000000 522.133046   7.0182077 3.971766e+00 8.551709e+00 #> 458   4.57   0.000000 521.206426   6.9738999 3.936145e+00 8.626152e+00 #> 459   4.58   0.000000 520.280214   6.9299524 3.900882e+00 8.700874e+00 #> 460   4.59   0.000000 519.354416   6.8863618 3.865972e+00 8.775875e+00 #> 461   4.60   0.000000 518.429039   6.8431248 3.831413e+00 8.851153e+00 #> 462   4.61   0.000000 517.504088   6.8002381 3.797200e+00 8.926706e+00 #> 463   4.62   0.000000 516.579570   6.7576984 3.763330e+00 9.002533e+00 #> 464   4.63   0.000000 515.655491   6.7155026 3.729799e+00 9.078632e+00 #> 465   4.64   0.000000 514.731858   6.6736474 3.696603e+00 9.155001e+00 #> 466   4.65   0.000000 513.808676   6.6321297 3.663740e+00 9.231640e+00 #> 467   4.66   0.000000 512.885953   6.5909463 3.631204e+00 9.308546e+00 #> 468   4.67   0.000000 511.963693   6.5500943 3.598994e+00 9.385718e+00 #> 469   4.68   0.000000 511.041904   6.5095705 3.567105e+00 9.463154e+00 #> 470   4.69   0.000000 510.120591   6.4693719 3.535534e+00 9.540852e+00 #> 471   4.70   0.000000 509.199760   6.4294955 3.504278e+00 9.618812e+00 #> 472   4.71   0.000000 508.279417   6.3899384 3.473333e+00 9.697031e+00 #> 473   4.72   0.000000 507.359569   6.3506975 3.442696e+00 9.775508e+00 #> 474   4.73   0.000000 506.440221   6.3117701 3.412363e+00 9.854241e+00 #> 475   4.74   0.000000 505.521379   6.2731533 3.382332e+00 9.933229e+00 #> 476   4.75   0.000000 504.603049   6.2348441 3.352599e+00 1.001247e+01 #> 477   4.76   0.000000 503.685237   6.1968398 3.323160e+00 1.009196e+01 #> 478   4.77   0.000000 502.767948   6.1591376 3.294014e+00 1.017170e+01 #> 479   4.78   0.000000 501.851189   6.1217347 3.265156e+00 1.025169e+01 #> 480   4.79   0.000000 500.934966   6.0846285 3.236584e+00 1.033193e+01 #> 481   4.80   0.000000 500.019283   6.0478161 3.208295e+00 1.041241e+01 #> 482   4.81   0.000000 499.104147   6.0112950 3.180285e+00 1.049313e+01 #> 483   4.82   0.000000 498.189563   5.9750624 3.152552e+00 1.057409e+01 #> 484   4.83   0.000000 497.275537   5.9391158 3.125092e+00 1.065530e+01 #> 485   4.84   0.000000 496.362075   5.9034526 3.097903e+00 1.073674e+01 #> 486   4.85   0.000000 495.449182   5.8680701 3.070982e+00 1.081842e+01 #> 487   4.86   0.000000 494.536863   5.8329659 3.044326e+00 1.090033e+01 #> 488   4.87   0.000000 493.625125   5.7981374 3.017931e+00 1.098248e+01 #> 489   4.88   0.000000 492.713972   5.7635821 2.991797e+00 1.106485e+01 #> 490   4.89   0.000000 491.803411   5.7292977 2.965919e+00 1.114746e+01 #> 491   4.90   0.000000 490.893445   5.6952815 2.940294e+00 1.123029e+01 #> 492   4.91   0.000000 489.984082   5.6615312 2.914921e+00 1.131335e+01 #> 493   4.92   0.000000 489.075326   5.6280445 2.889797e+00 1.139664e+01 #> 494   4.93   0.000000 488.167183   5.5948188 2.864918e+00 1.148014e+01 #> 495   4.94   0.000000 487.259657   5.5618520 2.840282e+00 1.156387e+01 #> 496   4.95   0.000000 486.352754   5.5291417 2.815887e+00 1.164782e+01 #> 497   4.96   0.000000 485.446480   5.4966855 2.791731e+00 1.173199e+01 #> 498   4.97   0.000000 484.540839   5.4644812 2.767809e+00 1.181637e+01 #> 499   4.98   0.000000 483.635837   5.4325265 2.744121e+00 1.190096e+01 #> 500   4.99   0.000000 482.731478   5.4008192 2.720663e+00 1.198577e+01 #> 501   5.00   0.000000 481.827769   5.3693572 2.697434e+00 1.207079e+01 #> 502   5.01   0.000000 480.924713   5.3381381 2.674430e+00 1.215602e+01 #> 503   5.02   0.000000 480.022317   5.3071599 2.651650e+00 1.224145e+01 #> 504   5.03   0.000000 479.120584   5.2764203 2.629090e+00 1.232709e+01 #> 505   5.04   0.000000 478.219520   5.2459174 2.606749e+00 1.241294e+01 #> 506   5.05   0.000000 477.319131   5.2156489 2.584625e+00 1.249898e+01 #> 507   5.06   0.000000 476.419420   5.1856128 2.562714e+00 1.258523e+01 #> 508   5.07   0.000000 475.520393   5.1558070 2.541016e+00 1.267167e+01 #> 509   5.08   0.000000 474.622054   5.1262295 2.519526e+00 1.275832e+01 #> 510   5.09   0.000000 473.724409   5.0968782 2.498244e+00 1.284515e+01 #> 511   5.10   0.000000 472.827462   5.0677512 2.477168e+00 1.293219e+01 #> 512   5.11   0.000000 471.931218   5.0388465 2.456294e+00 1.301941e+01 #> 513   5.12   0.000000 471.035682   5.0101621 2.435621e+00 1.310682e+01 #> 514   5.13   0.000000 470.140858   4.9816961 2.415146e+00 1.319442e+01 #> 515   5.14   0.000000 469.246752   4.9534465 2.394869e+00 1.328221e+01 #> 516   5.15   0.000000 468.353367   4.9254115 2.374785e+00 1.337019e+01 #> 517   5.16   0.000000 467.460708   4.8975892 2.354895e+00 1.345834e+01 #> 518   5.17   0.000000 466.568780   4.8699776 2.335194e+00 1.354668e+01 #> 519   5.18   0.000000 465.677588   4.8425750 2.315683e+00 1.363520e+01 #> 520   5.19   0.000000 464.787136   4.8153795 2.296357e+00 1.372389e+01 #> 521   5.20   0.000000 463.897428   4.7883893 2.277217e+00 1.381277e+01 #> 522   5.21   0.000000 463.008470   4.7616026 2.258258e+00 1.390181e+01 #> 523   5.22   0.000000 462.120264   4.7350176 2.239481e+00 1.399103e+01 #> 524   5.23   0.000000 461.232817   4.7086325 2.220882e+00 1.408042e+01 #> 525   5.24   0.000000 460.346132   4.6824458 2.202460e+00 1.416999e+01 #> 526   5.25   0.000000 459.460213   4.6564554 2.184214e+00 1.425971e+01 #> 527   5.26   0.000000 458.575065   4.6306599 2.166140e+00 1.434961e+01 #> 528   5.27   0.000000 457.690692   4.6050575 2.148238e+00 1.443967e+01 #> 529   5.28   0.000000 456.807099   4.5796465 2.130506e+00 1.452989e+01 #> 530   5.29   0.000000 455.924290   4.5544252 2.112941e+00 1.462027e+01 #> 531   5.30   0.000000 455.042268   4.5293921 2.095543e+00 1.471081e+01 #> 532   5.31   0.000000 454.161038   4.5045454 2.078309e+00 1.480151e+01 #> 533   5.32   0.000000 453.280605   4.4798836 2.061237e+00 1.489237e+01 #> 534   5.33   0.000000 452.400971   4.4554050 2.044327e+00 1.498338e+01 #> 535   5.34   0.000000 451.522142   4.4311082 2.027576e+00 1.507454e+01 #> 536   5.35   0.000000 450.644122   4.4069914 2.010982e+00 1.516585e+01 #> 537   5.36   0.000000 449.766914   4.3830533 1.994545e+00 1.525731e+01 #> 538   5.37   0.000000 448.890523   4.3592921 1.978262e+00 1.534892e+01 #> 539   5.38   0.000000 448.014951   4.3357065 1.962131e+00 1.544067e+01 #> 540   5.39   0.000000 447.140205   4.3122949 1.946152e+00 1.553257e+01 #> 541   5.40   0.000000 446.266286   4.2890558 1.930323e+00 1.562461e+01 #> 542   5.41   0.000000 445.393200   4.2659877 1.914642e+00 1.571679e+01 #> 543   5.42   0.000000 444.520950   4.2430892 1.899107e+00 1.580911e+01 #> 544   5.43   0.000000 443.649540   4.2203588 1.883717e+00 1.590157e+01 #> 545   5.44   0.000000 442.778973   4.1977951 1.868471e+00 1.599417e+01 #> 546   5.45   0.000000 441.909254   4.1753966 1.853367e+00 1.608689e+01 #> 547   5.46   0.000000 441.040386   4.1531620 1.838403e+00 1.617975e+01 #> 548   5.47   0.000000 440.172373   4.1310898 1.823579e+00 1.627274e+01 #> 549   5.48   0.000000 439.305218   4.1091787 1.808892e+00 1.636586e+01 #> 550   5.49   0.000000 438.438926   4.0874273 1.794342e+00 1.645911e+01 #> 551   5.50   0.000000 437.573500   4.0658342 1.779927e+00 1.655248e+01 #> 552   5.51   0.000000 436.708943   4.0443982 1.765645e+00 1.664598e+01 #> 553   5.52   0.000000 435.845259   4.0231178 1.751495e+00 1.673960e+01 #> 554   5.53   0.000000 434.982452   4.0019918 1.737476e+00 1.683334e+01 #> 555   5.54   0.000000 434.120525   3.9810188 1.723587e+00 1.692719e+01 #> 556   5.55   0.000000 433.259482   3.9601975 1.709825e+00 1.702117e+01 #> 557   5.56   0.000000 432.399326   3.9395267 1.696191e+00 1.711526e+01 #> 558   5.57   0.000000 431.540060   3.9190052 1.682682e+00 1.720947e+01 #> 559   5.58   0.000000 430.681689   3.8986316 1.669297e+00 1.730379e+01 #> 560   5.59   0.000000 429.824215   3.8784046 1.656035e+00 1.739822e+01 #> 561   5.60   0.000000 428.967641   3.8583232 1.642895e+00 1.749276e+01 #> 562   5.61   0.000000 428.111972   3.8383860 1.629875e+00 1.758740e+01 #> 563   5.62   0.000000 427.257210   3.8185918 1.616975e+00 1.768216e+01 #> 564   5.63   0.000000 426.403359   3.7989394 1.604193e+00 1.777701e+01 #> 565   5.64   0.000000 425.550421   3.7794277 1.591527e+00 1.787198e+01 #> 566   5.65   0.000000 424.698401   3.7600555 1.578978e+00 1.796704e+01 #> 567   5.66   0.000000 423.847301   3.7408216 1.566542e+00 1.806220e+01 #> 568   5.67   0.000000 422.997125   3.7217248 1.554220e+00 1.815746e+01 #> 569   5.68   0.000000 422.147876   3.7027641 1.542010e+00 1.825282e+01 #> 570   5.69   0.000000 421.299556   3.6839382 1.529912e+00 1.834827e+01 #> 571   5.70   0.000000 420.452169   3.6652460 1.517923e+00 1.844381e+01 #> 572   5.71   0.000000 419.605718   3.6466865 1.506043e+00 1.853945e+01 #> 573   5.72   0.000000 418.760206   3.6282586 1.494270e+00 1.863518e+01 #> 574   5.73   0.000000 417.915636   3.6099611 1.482604e+00 1.873100e+01 #> 575   5.74   0.000000 417.072012   3.5917930 1.471044e+00 1.882690e+01 #> 576   5.75   0.000000 416.229335   3.5737531 1.459589e+00 1.892289e+01 #> 577   5.76   0.000000 415.387609   3.5558405 1.448236e+00 1.901896e+01 #> 578   5.77   0.000000 414.546837   3.5380541 1.436986e+00 1.911512e+01 #> 579   5.78   0.000000 413.707022   3.5203928 1.425838e+00 1.921136e+01 #> 580   5.79   0.000000 412.868166   3.5028556 1.414790e+00 1.930767e+01 #> 581   5.80   0.000000 412.030273   3.4854416 1.403841e+00 1.940407e+01 #> 582   5.81   0.000000 411.193345   3.4681496 1.392990e+00 1.950054e+01 #> 583   5.82   0.000000 410.357385   3.4509786 1.382237e+00 1.959709e+01 #> 584   5.83   0.000000 409.522396   3.4339278 1.371580e+00 1.969371e+01 #> 585   5.84   0.000000 408.688381   3.4169960 1.361019e+00 1.979040e+01 #> 586   5.85   0.000000 407.855341   3.4001824 1.350552e+00 1.988716e+01 #> 587   5.86   0.000000 407.023281   3.3834859 1.340179e+00 1.998399e+01 #> 588   5.87   0.000000 406.192203   3.3669056 1.329898e+00 2.008089e+01 #> 589   5.88   0.000000 405.362108   3.3504405 1.319709e+00 2.017786e+01 #> 590   5.89   0.000000 404.533001   3.3340897 1.309610e+00 2.027489e+01 #> 591   5.90   0.000000 403.704883   3.3178524 1.299602e+00 2.037198e+01 #> 592   5.91   0.000000 402.877757   3.3017274 1.289682e+00 2.046913e+01 #> 593   5.92   0.000000 402.051626   3.2857140 1.279851e+00 2.056635e+01 #> 594   5.93   0.000000 401.226491   3.2698112 1.270107e+00 2.066362e+01 #> 595   5.94   0.000000 400.402357   3.2540182 1.260449e+00 2.076095e+01 #> 596   5.95   0.000000 399.579224   3.2383339 1.250876e+00 2.085834e+01 #> 597   5.96   0.000000 398.757096   3.2227577 1.241388e+00 2.095578e+01 #> 598   5.97   0.000000 397.935975   3.2072885 1.231984e+00 2.105328e+01 #> 599   5.98   0.000000 397.115863   3.1919255 1.222663e+00 2.115082e+01 #> 600   5.99   0.000000 396.296763   3.1766679 1.213425e+00 2.124842e+01 #> 601   6.00   0.000000 395.478676   3.1615149 1.204267e+00 2.134606e+01 #> 602   6.01   0.000000 394.661607   3.1464654 1.195190e+00 2.144376e+01 #> 603   6.02   0.000000 393.845555   3.1315188 1.186193e+00 2.154149e+01 #> 604   6.03   0.000000 393.030525   3.1166742 1.177275e+00 2.163928e+01 #> 605   6.04   0.000000 392.216518   3.1019308 1.168435e+00 2.173710e+01 #> 606   6.05   0.000000 391.403537   3.0872878 1.159672e+00 2.183497e+01 #> 607   6.06   0.000000 390.591583   3.0727443 1.150986e+00 2.193288e+01 #> 608   6.07   0.000000 389.780659   3.0582996 1.142376e+00 2.203082e+01 #> 609   6.08   0.000000 388.970767   3.0439529 1.133842e+00 2.212881e+01 #> 610   6.09   0.000000 388.161909   3.0297034 1.125381e+00 2.222683e+01 #> 611   6.10   0.000000 387.354087   3.0155503 1.116995e+00 2.232489e+01 #> 612   6.11   0.000000 386.547303   3.0014928 1.108681e+00 2.242297e+01 #> 613   6.12   0.000000 385.741560   2.9875303 1.100440e+00 2.252110e+01 #> 614   6.13   0.000000 384.936860   2.9736619 1.092270e+00 2.261925e+01 #> 615   6.14   0.000000 384.133204   2.9598868 1.084171e+00 2.271743e+01 #> 616   6.15   0.000000 383.330594   2.9462044 1.076142e+00 2.281564e+01 #> 617   6.16   0.000000 382.529033   2.9326139 1.068183e+00 2.291388e+01 #> 618   6.17   0.000000 381.728522   2.9191146 1.060293e+00 2.301214e+01 #> 619   6.18   0.000000 380.929064   2.9057058 1.052471e+00 2.311043e+01 #> 620   6.19   0.000000 380.130660   2.8923867 1.044716e+00 2.320874e+01 #> 621   6.20   0.000000 379.333312   2.8791566 1.037028e+00 2.330707e+01 #> 622   6.21   0.000000 378.537022   2.8660148 1.029406e+00 2.340542e+01 #> 623   6.22   0.000000 377.741792   2.8529607 1.021850e+00 2.350379e+01 #> 624   6.23   0.000000 376.947624   2.8399935 1.014359e+00 2.360218e+01 #> 625   6.24   0.000000 376.154519   2.8271126 1.006932e+00 2.370058e+01 #> 626   6.25   0.000000 375.362480   2.8143173 9.995693e-01 2.379900e+01 #> 627   6.26   0.000000 374.571507   2.8016069 9.922693e-01 2.389744e+01 #> 628   6.27   0.000000 373.781604   2.7889807 9.850317e-01 2.399589e+01 #> 629   6.28   0.000000 372.992771   2.7764381 9.778560e-01 2.409434e+01 #> 630   6.29   0.000000 372.205010   2.7639784 9.707416e-01 2.419281e+01 #> 631   6.30   0.000000 371.418323   2.7516010 9.636879e-01 2.429129e+01 #> 632   6.31   0.000000 370.632711   2.7393052 9.566943e-01 2.438978e+01 #> 633   6.32   0.000000 369.848177   2.7270905 9.497602e-01 2.448827e+01 #> 634   6.33   0.000000 369.064722   2.7149561 9.428850e-01 2.458677e+01 #> 635   6.34   0.000000 368.282347   2.7029014 9.360683e-01 2.468527e+01 #> 636   6.35   0.000000 367.501054   2.6909259 9.293094e-01 2.478377e+01 #> 637   6.36   0.000000 366.720844   2.6790289 9.226077e-01 2.488228e+01 #> 638   6.37   0.000000 365.941720   2.6672097 9.159629e-01 2.498079e+01 #> 639   6.38   0.000000 365.163682   2.6554679 9.093742e-01 2.507929e+01 #> 640   6.39   0.000000 364.386732   2.6438028 9.028412e-01 2.517780e+01 #> 641   6.40   0.000000 363.610872   2.6322137 8.963633e-01 2.527630e+01 #> 642   6.41   0.000000 362.836102   2.6207002 8.899400e-01 2.537480e+01 #> 643   6.42   0.000000 362.062426   2.6092616 8.835709e-01 2.547329e+01 #> 644   6.43   0.000000 361.289842   2.5978973 8.772553e-01 2.557178e+01 #> 645   6.44   0.000000 360.518355   2.5866069 8.709928e-01 2.567025e+01 #> 646   6.45   0.000000 359.747963   2.5753896 8.647828e-01 2.576872e+01 #> 647   6.46   0.000000 358.978670   2.5642450 8.586250e-01 2.586718e+01 #> 648   6.47   0.000000 358.210476   2.5531724 8.525187e-01 2.596563e+01 #> 649   6.48   0.000000 357.443382   2.5421714 8.464635e-01 2.606407e+01 #> 650   6.49   0.000000 356.677391   2.5312414 8.404589e-01 2.616249e+01 #> 651   6.50   0.000000 355.912502   2.5203819 8.345045e-01 2.626090e+01 #> 652   6.51   0.000000 355.148718   2.5095922 8.285997e-01 2.635929e+01 #> 653   6.52   0.000000 354.386039   2.4988719 8.227441e-01 2.645767e+01 #> 654   6.53   0.000000 353.624468   2.4882204 8.169373e-01 2.655603e+01 #> 655   6.54   0.000000 352.864004   2.4776373 8.111787e-01 2.665437e+01 #> 656   6.55   0.000000 352.104650   2.4671220 8.054680e-01 2.675269e+01 #> 657   6.56   0.000000 351.346406   2.4566739 7.998046e-01 2.685099e+01 #> 658   6.57   0.000000 350.589273   2.4462926 7.941882e-01 2.694926e+01 #> 659   6.58   0.000000 349.833253   2.4359776 7.886182e-01 2.704752e+01 #> 660   6.59   0.000000 349.078347   2.4257283 7.830944e-01 2.714575e+01 #> 661   6.60   0.000000 348.324556   2.4155442 7.776161e-01 2.724395e+01 #> 662   6.61   0.000000 347.571880   2.4054250 7.721831e-01 2.734213e+01 #> 663   6.62   0.000000 346.820322   2.3953700 7.667948e-01 2.744028e+01 #> 664   6.63   0.000000 346.069881   2.3853788 7.614509e-01 2.753840e+01 #> 665   6.64   0.000000 345.320559   2.3754509 7.561510e-01 2.763650e+01 #> 666   6.65   0.000000 344.572358   2.3655859 7.508946e-01 2.773456e+01 #> 667   6.66   0.000000 343.825277   2.3557832 7.456814e-01 2.783259e+01 #> 668   6.67   0.000000 343.079318   2.3460423 7.405109e-01 2.793059e+01 #> 669   6.68   0.000000 342.334482   2.3363629 7.353827e-01 2.802855e+01 #> 670   6.69   0.000000 341.590770   2.3267445 7.302965e-01 2.812649e+01 #> 671   6.70   0.000000 340.848183   2.3171866 7.252519e-01 2.822438e+01 #> 672   6.71   0.000000 340.106721   2.3076887 7.202484e-01 2.832224e+01 #> 673   6.72   0.000000 339.366385   2.2982505 7.152858e-01 2.842006e+01 #> 674   6.73   0.000000 338.627177   2.2888713 7.103635e-01 2.851785e+01 #> 675   6.74   0.000000 337.889097   2.2795509 7.054813e-01 2.861559e+01 #> 676   6.75   0.000000 337.152145   2.2702888 7.006388e-01 2.871330e+01 #> 677   6.76   0.000000 336.416324   2.2610845 6.958357e-01 2.881096e+01 #> 678   6.77   0.000000 335.681633   2.2519377 6.910714e-01 2.890858e+01 #> 679   6.78   0.000000 334.948073   2.2428478 6.863458e-01 2.900616e+01 #> 680   6.79   0.000000 334.215645   2.2338145 6.816584e-01 2.910369e+01 #> 681   6.80   0.000000 333.484350   2.2248373 6.770090e-01 2.920118e+01 #> 682   6.81   0.000000 332.754188   2.2159158 6.723970e-01 2.929863e+01 #> 683   6.82   0.000000 332.025161   2.2070497 6.678223e-01 2.939602e+01 #> 684   6.83   0.000000 331.297268   2.1982384 6.632844e-01 2.949337e+01 #> 685   6.84   0.000000 330.570511   2.1894817 6.587831e-01 2.959067e+01 #> 686   6.85   0.000000 329.844890   2.1807791 6.543179e-01 2.968792e+01 #> 687   6.86   0.000000 329.120406   2.1721301 6.498887e-01 2.978512e+01 #> 688   6.87   0.000000 328.397060   2.1635345 6.454949e-01 2.988227e+01 #> 689   6.88   0.000000 327.674851   2.1549917 6.411364e-01 2.997937e+01 #> 690   6.89   0.000000 326.953781   2.1465015 6.368128e-01 3.007641e+01 #> 691   6.90   0.000000 326.233850   2.1380634 6.325237e-01 3.017340e+01 #> 692   6.91   0.000000 325.515058   2.1296771 6.282689e-01 3.027034e+01 #> 693   6.92   0.000000 324.797407   2.1213421 6.240481e-01 3.036722e+01 #> 694   6.93   0.000000 324.080897   2.1130582 6.198609e-01 3.046404e+01 #> 695   6.94   0.000000 323.365528   2.1048248 6.157070e-01 3.056080e+01 #> 696   6.95   0.000000 322.651300   2.0966417 6.115862e-01 3.065751e+01 #> 697   6.96   0.000000 321.938215   2.0885085 6.074982e-01 3.075416e+01 #> 698   6.97   0.000000 321.226273   2.0804249 6.034425e-01 3.085075e+01 #> 699   6.98   0.000000 320.515474   2.0723904 5.994191e-01 3.094728e+01 #> 700   6.99   0.000000 319.805818   2.0644046 5.954275e-01 3.104374e+01 #> 701   7.00   0.000000 319.097306   2.0564674 5.914675e-01 3.114015e+01 #> 702   7.01   0.000000 318.389939   2.0485782 5.875387e-01 3.123649e+01 #> 703   7.02   0.000000 317.683716   2.0407368 5.836410e-01 3.133277e+01 #> 704   7.03   0.000000 316.978639   2.0329428 5.797740e-01 3.142898e+01 #> 705   7.04   0.000000 316.274707   2.0251959 5.759375e-01 3.152513e+01 #> 706   7.05   0.000000 315.571920   2.0174957 5.721312e-01 3.162121e+01 #> 707   7.06   0.000000 314.870280   2.0098419 5.683548e-01 3.171722e+01 #> 708   7.07   0.000000 314.169786   2.0022341 5.646080e-01 3.181317e+01 #> 709   7.08   0.000000 313.470439   1.9946720 5.608906e-01 3.190904e+01 #> 710   7.09   0.000000 312.772240   1.9871553 5.572024e-01 3.200485e+01 #> 711   7.10   0.000000 312.075187   1.9796837 5.535430e-01 3.210059e+01 #> 712   7.11   0.000000 311.379282   1.9722568 5.499122e-01 3.219626e+01 #> 713   7.12   0.000000 310.684524   1.9648744 5.463097e-01 3.229185e+01 #> 714   7.13   0.000000 309.990915   1.9575360 5.427354e-01 3.238737e+01 #> 715   7.14   0.000000 309.298454   1.9502415 5.391889e-01 3.248282e+01 #> 716   7.15   0.000000 308.607141   1.9429904 5.356700e-01 3.257820e+01 #> 717   7.16   0.000000 307.916977   1.9357824 5.321785e-01 3.267350e+01 #> 718   7.17   0.000000 307.227961   1.9286173 5.287141e-01 3.276873e+01 #> 719   7.18   0.000000 306.540094   1.9214948 5.252765e-01 3.286388e+01 #> 720   7.19   0.000000 305.853377   1.9144145 5.218656e-01 3.295895e+01 #> 721   7.20   0.000000 305.167808   1.9073762 5.184811e-01 3.305395e+01 #> 722   7.21   0.000000 304.483389   1.9003795 5.151228e-01 3.314887e+01 #> 723   7.22   0.000000 303.800119   1.8934241 5.117904e-01 3.324371e+01 #> 724   7.23   0.000000 303.117999   1.8865098 5.084838e-01 3.333847e+01 #> 725   7.24   0.000000 302.437028   1.8796363 5.052026e-01 3.343315e+01 #> 726   7.25   0.000000 301.757207   1.8728032 5.019467e-01 3.352775e+01 #> 727   7.26   0.000000 301.078535   1.8660104 4.987158e-01 3.362227e+01 #> 728   7.27   0.000000 300.401013   1.8592574 4.955097e-01 3.371670e+01 #> 729   7.28   0.000000 299.724641   1.8525441 4.923282e-01 3.381106e+01 #> 730   7.29   0.000000 299.049418   1.8458701 4.891712e-01 3.390533e+01 #> 731   7.30   0.000000 298.375345   1.8392352 4.860383e-01 3.399951e+01 #> 732   7.31   0.000000 297.702422   1.8326391 4.829293e-01 3.409361e+01 #> 733   7.32   0.000000 297.030649   1.8260815 4.798441e-01 3.418763e+01 #> 734   7.33   0.000000 296.360025   1.8195621 4.767825e-01 3.428156e+01 #> 735   7.34   0.000000 295.690550   1.8130808 4.737442e-01 3.437540e+01 #> 736   7.35   0.000000 295.022225   1.8066371 4.707290e-01 3.446916e+01 #> 737   7.36   0.000000 294.355050   1.8002310 4.677368e-01 3.456283e+01 #> 738   7.37   0.000000 293.689023   1.7938620 4.647673e-01 3.465641e+01 #> 739   7.38   0.000000 293.024146   1.7875299 4.618203e-01 3.474990e+01 #> 740   7.39   0.000000 292.360418   1.7812345 4.588957e-01 3.484330e+01 #> 741   7.40   0.000000 291.697839   1.7749756 4.559933e-01 3.493661e+01 #> 742   7.41   0.000000 291.036409   1.7687528 4.531128e-01 3.502983e+01 #> 743   7.42   0.000000 290.376127   1.7625659 4.502540e-01 3.512296e+01 #> 744   7.43   0.000000 289.716994   1.7564147 4.474169e-01 3.521600e+01 #> 745   7.44   0.000000 289.059009   1.7502989 4.446011e-01 3.530894e+01 #> 746   7.45   0.000000 288.402172   1.7442183 4.418066e-01 3.540179e+01 #> 747   7.46   0.000000 287.746484   1.7381726 4.390331e-01 3.549455e+01 #> 748   7.47   0.000000 287.091942   1.7321616 4.362804e-01 3.558721e+01 #> 749   7.48   0.000000 286.438549   1.7261851 4.335484e-01 3.567978e+01 #> 750   7.49   0.000000 285.786302   1.7202427 4.308369e-01 3.577225e+01 #> 751   7.50   0.000000 285.135203   1.7143344 4.281457e-01 3.586463e+01 #> 752   7.51   0.000000 284.485250   1.7084598 4.254746e-01 3.595691e+01 #> 753   7.52   0.000000 283.836444   1.7026187 4.228235e-01 3.604910e+01 #> 754   7.53   0.000000 283.188784   1.6968108 4.201922e-01 3.614118e+01 #> 755   7.54   0.000000 282.542270   1.6910361 4.175805e-01 3.623317e+01 #> 756   7.55   0.000000 281.896902   1.6852941 4.149883e-01 3.632506e+01 #> 757   7.56   0.000000 281.252679   1.6795848 4.124153e-01 3.641685e+01 #> 758   7.57   0.000000 280.609600   1.6739078 4.098615e-01 3.650854e+01 #> 759   7.58   0.000000 279.967667   1.6682630 4.073267e-01 3.660014e+01 #> 760   7.59   0.000000 279.326878   1.6626501 4.048107e-01 3.669163e+01 #> 761   7.60   0.000000 278.687232   1.6570690 4.023133e-01 3.678302e+01 #> 762   7.61   0.000000 278.048730   1.6515194 3.998344e-01 3.687430e+01 #> 763   7.62   0.000000 277.411372   1.6460010 3.973738e-01 3.696549e+01 #> 764   7.63   0.000000 276.775156   1.6405137 3.949314e-01 3.705657e+01 #> 765   7.64   0.000000 276.140083   1.6350573 3.925070e-01 3.714756e+01 #> 766   7.65   0.000000 275.506151   1.6296315 3.901005e-01 3.723843e+01 #> 767   7.66   0.000000 274.873362   1.6242362 3.877117e-01 3.732921e+01 #> 768   7.67   0.000000 274.241713   1.6188712 3.853404e-01 3.741987e+01 #> 769   7.68   0.000000 273.611205   1.6135361 3.829866e-01 3.751044e+01 #> 770   7.69   0.000000 272.981837   1.6082309 3.806500e-01 3.760090e+01 #> 771   7.70   0.000000 272.353609   1.6029554 3.783306e-01 3.769125e+01 #> 772   7.71   0.000000 271.726521   1.5977092 3.760281e-01 3.778150e+01 #> 773   7.72   0.000000 271.100571   1.5924924 3.737425e-01 3.787164e+01 #> 774   7.73   0.000000 270.475760   1.5873045 3.714736e-01 3.796167e+01 #> 775   7.74   0.000000 269.852086   1.5821455 3.692212e-01 3.805160e+01 #> 776   7.75   0.000000 269.229550   1.5770152 3.669853e-01 3.814141e+01 #> 777   7.76   0.000000 268.608151   1.5719133 3.647656e-01 3.823112e+01 #> 778   7.77   0.000000 267.987888   1.5668396 3.625621e-01 3.832072e+01 #> 779   7.78   0.000000 267.368761   1.5617941 3.603746e-01 3.841021e+01 #> 780   7.79   0.000000 266.750769   1.5567764 3.582030e-01 3.849959e+01 #> 781   7.80   0.000000 266.133912   1.5517865 3.560471e-01 3.858887e+01 #> 782   7.81   0.000000 265.518189   1.5468241 3.539068e-01 3.867803e+01 #> 783   7.82   0.000000 264.903599   1.5418890 3.517820e-01 3.876708e+01 #> 784   7.83   0.000000 264.290143   1.5369810 3.496725e-01 3.885602e+01 #> 785   7.84   0.000000 263.677819   1.5321001 3.475783e-01 3.894484e+01 #> 786   7.85   0.000000 263.066626   1.5272459 3.454991e-01 3.903356e+01 #> 787   7.86   0.000000 262.456565   1.5224184 3.434350e-01 3.912216e+01 #> 788   7.87   0.000000 261.847634   1.5176173 3.413857e-01 3.921065e+01 #> 789   7.88   0.000000 261.239834   1.5128425 3.393511e-01 3.929903e+01 #> 790   7.89   0.000000 260.633162   1.5080937 3.373311e-01 3.938729e+01 #> 791   7.90   0.000000 260.027619   1.5033709 3.353256e-01 3.947544e+01 #> 792   7.91   0.000000 259.423205   1.4986738 3.333345e-01 3.956348e+01 #> 793   7.92   0.000000 258.819917   1.4940023 3.313576e-01 3.965140e+01 #> 794   7.93   0.000000 258.217756   1.4893563 3.293948e-01 3.973921e+01 #> 795   7.94   0.000000 257.616721   1.4847355 3.274460e-01 3.982690e+01 #> 796   7.95   0.000000 257.016812   1.4801397 3.255112e-01 3.991447e+01 #> 797   7.96   0.000000 256.418027   1.4755689 3.235901e-01 4.000193e+01 #> 798   7.97   0.000000 255.820366   1.4710228 3.216827e-01 4.008927e+01 #> 799   7.98   0.000000 255.223828   1.4665013 3.197888e-01 4.017650e+01 #> 800   7.99   0.000000 254.628412   1.4620042 3.179084e-01 4.026361e+01 #> 801   8.00   0.000000 254.034119   1.4575315 3.160414e-01 4.035060e+01 #> 802   8.01   0.000000 253.440946   1.4530828 3.141875e-01 4.043748e+01 #> 803   8.02   0.000000 252.848894   1.4486580 3.123468e-01 4.052423e+01 #> 804   8.03   0.000000 252.257961   1.4442571 3.105191e-01 4.061087e+01 #> 805   8.04   0.000000 251.668146   1.4398798 3.087043e-01 4.069739e+01 #> 806   8.05   0.000000 251.079450   1.4355260 3.069022e-01 4.078379e+01 #> 807   8.06   0.000000 250.491871   1.4311956 3.051129e-01 4.087007e+01 #> 808   8.07   0.000000 249.905409   1.4268883 3.033362e-01 4.095624e+01 #> 809   8.08   0.000000 249.320062   1.4226041 3.015719e-01 4.104228e+01 #> 810   8.09   0.000000 248.735829   1.4183427 2.998201e-01 4.112820e+01 #> 811   8.10   0.000000 248.152711   1.4141041 2.980805e-01 4.121400e+01 #> 812   8.11   0.000000 247.570706   1.4098881 2.963531e-01 4.129969e+01 #> 813   8.12   0.000000 246.989814   1.4056945 2.946379e-01 4.138525e+01 #> 814   8.13   0.000000 246.410033   1.4015232 2.929346e-01 4.147069e+01 #> 815   8.14   0.000000 245.831363   1.3973741 2.912431e-01 4.155601e+01 #> 816   8.15   0.000000 245.253803   1.3932470 2.895635e-01 4.164120e+01 #> 817   8.16   0.000000 244.677351   1.3891418 2.878956e-01 4.172628e+01 #> 818   8.17   0.000000 244.102008   1.3850583 2.862393e-01 4.181123e+01 #> 819   8.18   0.000000 243.527772   1.3809964 2.845946e-01 4.189606e+01 #> 820   8.19   0.000000 242.954643   1.3769559 2.829612e-01 4.198077e+01 #> 821   8.20   0.000000 242.382619   1.3729368 2.813392e-01 4.206535e+01 #> 822   8.21   0.000000 241.811700   1.3689388 2.797284e-01 4.214981e+01 #> 823   8.22   0.000000 241.241885   1.3649619 2.781288e-01 4.223415e+01 #> 824   8.23   0.000000 240.673173   1.3610059 2.765402e-01 4.231836e+01 #> 825   8.24   0.000000 240.105562   1.3570707 2.749626e-01 4.240245e+01 #> 826   8.25   0.000000 239.539053   1.3531562 2.733959e-01 4.248642e+01 #> 827   8.26   0.000000 238.973644   1.3492621 2.718400e-01 4.257026e+01 #> 828   8.27   0.000000 238.409334   1.3453885 2.702947e-01 4.265398e+01 #> 829   8.28   0.000000 237.846122   1.3415351 2.687602e-01 4.273757e+01 #> 830   8.29   0.000000 237.284008   1.3377018 2.672361e-01 4.282104e+01 #> 831   8.30   0.000000 236.722990   1.3338885 2.657225e-01 4.290438e+01 #> 832   8.31   0.000000 236.163068   1.3300951 2.642193e-01 4.298759e+01 #> 833   8.32   0.000000 235.604240   1.3263215 2.627264e-01 4.307068e+01 #> 834   8.33   0.000000 235.046506   1.3225675 2.612437e-01 4.315365e+01 #> 835   8.34   0.000000 234.489864   1.3188329 2.597711e-01 4.323649e+01 #> 836   8.35   0.000000 233.934314   1.3151178 2.583086e-01 4.331920e+01 #> 837   8.36   0.000000 233.379855   1.3114219 2.568560e-01 4.340179e+01 #> 838   8.37   0.000000 232.826485   1.3077451 2.554133e-01 4.348424e+01 #> 839   8.38   0.000000 232.274204   1.3040874 2.539805e-01 4.356658e+01 #> 840   8.39   0.000000 231.723011   1.3004486 2.525573e-01 4.364878e+01 #> 841   8.40   0.000000 231.172904   1.2968285 2.511439e-01 4.373086e+01 #> 842   8.41   0.000000 230.623883   1.2932271 2.497400e-01 4.381281e+01 #> 843   8.42   0.000000 230.075946   1.2896442 2.483456e-01 4.389463e+01 #> 844   8.43   0.000000 229.529093   1.2860798 2.469607e-01 4.397633e+01 #> 845   8.44   0.000000 228.983323   1.2825337 2.455851e-01 4.405789e+01 #> 846   8.45   0.000000 228.438634   1.2790057 2.442188e-01 4.413933e+01 #> 847   8.46   0.000000 227.895025   1.2754959 2.428617e-01 4.422064e+01 #> 848   8.47   0.000000 227.352497   1.2720040 2.415137e-01 4.430182e+01 #> 849   8.48   0.000000 226.811046   1.2685300 2.401748e-01 4.438288e+01 #> 850   8.49   0.000000 226.270673   1.2650738 2.388449e-01 4.446380e+01 #> 851   8.50   0.000000 225.731376   1.2616351 2.375240e-01 4.454460e+01 #> 852   8.51   0.000000 225.193154   1.2582141 2.362119e-01 4.462526e+01 #> 853   8.52   0.000000 224.656007   1.2548104 2.349085e-01 4.470580e+01 #> 854   8.53   0.000000 224.119932   1.2514241 2.336140e-01 4.478621e+01 #> 855   8.54   0.000000 223.584930   1.2480549 2.323280e-01 4.486649e+01 #> 856   8.55   0.000000 223.050998   1.2447029 2.310506e-01 4.494664e+01 #> 857   8.56   0.000000 222.518136   1.2413678 2.297818e-01 4.502666e+01 #> 858   8.57   0.000000 221.986343   1.2380497 2.285214e-01 4.510654e+01 #> 859   8.58   0.000000 221.455618   1.2347483 2.272694e-01 4.518630e+01 #> 860   8.59   0.000000 220.925959   1.2314637 2.260257e-01 4.526593e+01 #> 861   8.60   0.000000 220.397365   1.2281956 2.247903e-01 4.534543e+01 #> 862   8.61   0.000000 219.869836   1.2249440 2.235631e-01 4.542480e+01 #> 863   8.62   0.000000 219.343370   1.2217088 2.223440e-01 4.550404e+01 #> 864   8.63   0.000000 218.817965   1.2184898 2.211329e-01 4.558314e+01 #> 865   8.64   0.000000 218.293622   1.2152870 2.199299e-01 4.566212e+01 #> 866   8.65   0.000000 217.770338   1.2121004 2.187348e-01 4.574097e+01 #> 867   8.66   0.000000 217.248113   1.2089297 2.175476e-01 4.581968e+01 #> 868   8.67   0.000000 216.726946   1.2057749 2.163682e-01 4.589826e+01 #> 869   8.68   0.000000 216.206835   1.2026358 2.151966e-01 4.597671e+01 #> 870   8.69   0.000000 215.687779   1.1995125 2.140327e-01 4.605504e+01 #> 871   8.70   0.000000 215.169776   1.1964048 2.128764e-01 4.613322e+01 #> 872   8.71   0.000000 214.652827   1.1933126 2.117277e-01 4.621128e+01 #> 873   8.72   0.000000 214.136929   1.1902358 2.105865e-01 4.628921e+01 #> 874   8.73   0.000000 213.622082   1.1871743 2.094528e-01 4.636700e+01 #> 875   8.74   0.000000 213.108284   1.1841280 2.083266e-01 4.644467e+01 #> 876   8.75   0.000000 212.595535   1.1810969 2.072076e-01 4.652220e+01 #> 877   8.76   0.000000 212.083832   1.1780808 2.060960e-01 4.659960e+01 #> 878   8.77   0.000000 211.573175   1.1750797 2.049916e-01 4.667686e+01 #> 879   8.78   0.000000 211.063562   1.1720934 2.038944e-01 4.675400e+01 #> 880   8.79   0.000000 210.554993   1.1691219 2.028044e-01 4.683100e+01 #> 881   8.80   0.000000 210.047466   1.1661651 2.017214e-01 4.690787e+01 #> 882   8.81   0.000000 209.540980   1.1632228 2.006454e-01 4.698461e+01 #> 883   8.82   0.000000 209.035533   1.1602951 1.995765e-01 4.706121e+01 #> 884   8.83   0.000000 208.531126   1.1573818 1.985144e-01 4.713769e+01 #> 885   8.84   0.000000 208.027755   1.1544829 1.974592e-01 4.721403e+01 #> 886   8.85   0.000000 207.525420   1.1515982 1.964108e-01 4.729024e+01 #> 887   8.86   0.000000 207.024121   1.1487276 1.953692e-01 4.736631e+01 #> 888   8.87   0.000000 206.523855   1.1458712 1.943343e-01 4.744226e+01 #> 889   8.88   0.000000 206.024621   1.1430287 1.933061e-01 4.751807e+01 #> 890   8.89   0.000000 205.526419   1.1402001 1.922845e-01 4.759374e+01 #> 891   8.90   0.000000 205.029246   1.1373854 1.912695e-01 4.766929e+01 #> 892   8.91   0.000000 204.533102   1.1345844 1.902609e-01 4.774470e+01 #> 893   8.92   0.000000 204.037985   1.1317971 1.892588e-01 4.781998e+01 #> 894   8.93   0.000000 203.543895   1.1290234 1.882632e-01 4.789512e+01 #> 895   8.94   0.000000 203.050829   1.1262632 1.872739e-01 4.797014e+01 #> 896   8.95   0.000000 202.558788   1.1235164 1.862909e-01 4.804502e+01 #> 897   8.96   0.000000 202.067768   1.1207829 1.853143e-01 4.811976e+01 #> 898   8.97   0.000000 201.577770   1.1180628 1.843438e-01 4.819438e+01 #> 899   8.98   0.000000 201.088791   1.1153558 1.833795e-01 4.826886e+01 #> 900   8.99   0.000000 200.600831   1.1126619 1.824214e-01 4.834321e+01 #> 901   9.00   0.000000 200.113888   1.1099810 1.814693e-01 4.841742e+01 #> 902   9.01   0.000000 199.627962   1.1073131 1.805233e-01 4.849150e+01 #> 903   9.02   0.000000 199.143050   1.1046581 1.795833e-01 4.856545e+01 #> 904   9.03   0.000000 198.659151   1.1020159 1.786492e-01 4.863926e+01 #> 905   9.04   0.000000 198.176265   1.0993865 1.777211e-01 4.871295e+01 #> 906   9.05   0.000000 197.694389   1.0967697 1.767988e-01 4.878649e+01 #> 907   9.06   0.000000 197.213523   1.0941654 1.758823e-01 4.885991e+01 #> 908   9.07   0.000000 196.733666   1.0915737 1.749717e-01 4.893319e+01 #> 909   9.08   0.000000 196.254815   1.0889944 1.740667e-01 4.900634e+01 #> 910   9.09   0.000000 195.776970   1.0864275 1.731675e-01 4.907935e+01 #> 911   9.10   0.000000 195.300129   1.0838729 1.722739e-01 4.915223e+01 #> 912   9.11   0.000000 194.824292   1.0813305 1.713859e-01 4.922498e+01 #> 913   9.12   0.000000 194.349456   1.0788002 1.705035e-01 4.929760e+01 #> 914   9.13   0.000000 193.875620   1.0762820 1.696266e-01 4.937008e+01 #> 915   9.14   0.000000 193.402784   1.0737759 1.687552e-01 4.944243e+01 #> 916   9.15   0.000000 192.930946   1.0712816 1.678893e-01 4.951464e+01 #> 917   9.16   0.000000 192.460103   1.0687993 1.670287e-01 4.958672e+01 #> 918   9.17   0.000000 191.990256   1.0663287 1.661736e-01 4.965867e+01 #> 919   9.18   0.000000 191.521403   1.0638699 1.653237e-01 4.973048e+01 #> 920   9.19   0.000000 191.053542   1.0614227 1.644792e-01 4.980217e+01 #> 921   9.20   0.000000 190.586673   1.0589872 1.636399e-01 4.987371e+01 #> 922   9.21   0.000000 190.120793   1.0565632 1.628058e-01 4.994513e+01 #> 923   9.22   0.000000 189.655902   1.0541506 1.619769e-01 5.001641e+01 #> 924   9.23   0.000000 189.191997   1.0517494 1.611531e-01 5.008756e+01 #> 925   9.24   0.000000 188.729079   1.0493596 1.603345e-01 5.015857e+01 #> 926   9.25   0.000000 188.267145   1.0469811 1.595209e-01 5.022946e+01 #> 927   9.26   0.000000 187.806194   1.0446137 1.587123e-01 5.030020e+01 #> 928   9.27   0.000000 187.346224   1.0422575 1.579087e-01 5.037082e+01 #> 929   9.28   0.000000 186.887236   1.0399124 1.571101e-01 5.044130e+01 #> 930   9.29   0.000000 186.429226   1.0375782 1.563163e-01 5.051165e+01 #> 931   9.30   0.000000 185.972193   1.0352551 1.555275e-01 5.058187e+01 #> 932   9.31   0.000000 185.516137   1.0329428 1.547435e-01 5.065195e+01 #> 933   9.32   0.000000 185.061056   1.0306414 1.539644e-01 5.072190e+01 #> 934   9.33   0.000000 184.606949   1.0283507 1.531900e-01 5.079172e+01 #> 935   9.34   0.000000 184.153813   1.0260707 1.524203e-01 5.086140e+01 #> 936   9.35   0.000000 183.701649   1.0238014 1.516554e-01 5.093096e+01 #> 937   9.36   0.000000 183.250454   1.0215426 1.508951e-01 5.100037e+01 #> 938   9.37   0.000000 182.800227   1.0192944 1.501395e-01 5.106966e+01 #> 939   9.38   0.000000 182.350967   1.0170566 1.493885e-01 5.113881e+01 #> 940   9.39   0.000000 181.902672   1.0148293 1.486420e-01 5.120783e+01 #> 941   9.40   0.000000 181.455341   1.0126123 1.479001e-01 5.127672e+01 #> 942   9.41   0.000000 181.008972   1.0104055 1.471627e-01 5.134548e+01 #> 943   9.42   0.000000 180.563565   1.0082090 1.464298e-01 5.141410e+01 #> 944   9.43   0.000000 180.119118   1.0060227 1.457014e-01 5.148259e+01 #> 945   9.44   0.000000 179.675629   1.0038465 1.449773e-01 5.155095e+01 #> 946   9.45   0.000000 179.233097   1.0016804 1.442576e-01 5.161917e+01 #> 947   9.46   0.000000 178.791520   0.9995242 1.435423e-01 5.168727e+01 #> 948   9.47   0.000000 178.350898   0.9973780 1.428313e-01 5.175523e+01 #> 949   9.48   0.000000 177.911229   0.9952417 1.421246e-01 5.182306e+01 #> 950   9.49   0.000000 177.472511   0.9931152 1.414222e-01 5.189075e+01 #> 951   9.50   0.000000 177.034743   0.9909985 1.407240e-01 5.195832e+01 #> 952   9.51   0.000000 176.597924   0.9888916 1.400299e-01 5.202575e+01 #> 953   9.52   0.000000 176.162052   0.9867943 1.393401e-01 5.209305e+01 #> 954   9.53   0.000000 175.727125   0.9847066 1.386544e-01 5.216022e+01 #> 955   9.54   0.000000 175.293144   0.9826285 1.379728e-01 5.222725e+01 #> 956   9.55   0.000000 174.860105   0.9805599 1.372953e-01 5.229416e+01 #> 957   9.56   0.000000 174.428008   0.9785007 1.366218e-01 5.236093e+01 #> 958   9.57   0.000000 173.996851   0.9764510 1.359524e-01 5.242757e+01 #> 959   9.58   0.000000 173.566633   0.9744106 1.352869e-01 5.249408e+01 #> 960   9.59   0.000000 173.137352   0.9723795 1.346254e-01 5.256046e+01 #> 961   9.60   0.000000 172.709008   0.9703577 1.339679e-01 5.262671e+01 #> 962   9.61   0.000000 172.281598   0.9683451 1.333143e-01 5.269282e+01 #> 963   9.62   0.000000 171.855121   0.9663416 1.326645e-01 5.275881e+01 #> 964   9.63   0.000000 171.429575   0.9643472 1.320187e-01 5.282466e+01 #> 965   9.64   0.000000 171.004961   0.9623618 1.313766e-01 5.289038e+01 #> 966   9.65   0.000000 170.581275   0.9603855 1.307384e-01 5.295598e+01 #> 967   9.66   0.000000 170.158516   0.9584181 1.301039e-01 5.302144e+01 #> 968   9.67   0.000000 169.736683   0.9564596 1.294732e-01 5.308677e+01 #> 969   9.68   0.000000 169.315776   0.9545100 1.288462e-01 5.315196e+01 #> 970   9.69   0.000000 168.895791   0.9525691 1.282229e-01 5.321703e+01 #> 971   9.70   0.000000 168.476728   0.9506371 1.276033e-01 5.328197e+01 #> 972   9.71   0.000000 168.058585   0.9487137 1.269873e-01 5.334678e+01 #> 973   9.72   0.000000 167.641362   0.9467990 1.263749e-01 5.341145e+01 #> 974   9.73   0.000000 167.225056   0.9448928 1.257662e-01 5.347600e+01 #> 975   9.74   0.000000 166.809666   0.9429953 1.251610e-01 5.354042e+01 #> 976   9.75   0.000000 166.395190   0.9411063 1.245594e-01 5.360470e+01 #> 977   9.76   0.000000 165.981628   0.9392257 1.239612e-01 5.366886e+01 #> 978   9.77   0.000000 165.568977   0.9373536 1.233666e-01 5.373289e+01 #> 979   9.78   0.000000 165.157237   0.9354899 1.227755e-01 5.379678e+01 #> 980   9.79   0.000000 164.746406   0.9336344 1.221878e-01 5.386055e+01 #> 981   9.80   0.000000 164.336482   0.9317873 1.216035e-01 5.392419e+01 #> 982   9.81   0.000000 163.927464   0.9299484 1.210227e-01 5.398770e+01 #> 983   9.82   0.000000 163.519351   0.9281178 1.204452e-01 5.405108e+01 #> 984   9.83   0.000000 163.112141   0.9262952 1.198711e-01 5.411432e+01 #> 985   9.84   0.000000 162.705833   0.9244808 1.193003e-01 5.417745e+01 #> 986   9.85   0.000000 162.300425   0.9226745 1.187328e-01 5.424044e+01 #> 987   9.86   0.000000 161.895916   0.9208762 1.181686e-01 5.430330e+01 #> 988   9.87   0.000000 161.492304   0.9190858 1.176077e-01 5.436603e+01 #> 989   9.88   0.000000 161.089588   0.9173034 1.170500e-01 5.442864e+01 #> 990   9.89   0.000000 160.687767   0.9155289 1.164955e-01 5.449111e+01 #> 991   9.90   0.000000 160.286838   0.9137623 1.159442e-01 5.455346e+01 #> 992   9.91   0.000000 159.886801   0.9120034 1.153962e-01 5.461568e+01 #> 993   9.92   0.000000 159.487655   0.9102523 1.148512e-01 5.467777e+01 #> 994   9.93   0.000000 159.089397   0.9085090 1.143094e-01 5.473973e+01 #> 995   9.94   0.000000 158.692027   0.9067733 1.137707e-01 5.480157e+01 #> 996   9.95   0.000000 158.295542   0.9050453 1.132351e-01 5.486327e+01 #> 997   9.96   0.000000 157.899942   0.9033249 1.127026e-01 5.492485e+01 #> 998   9.97   0.000000 157.505224   0.9016121 1.121731e-01 5.498630e+01 #> 999   9.98   0.000000 157.111388   0.8999068 1.116467e-01 5.504763e+01 #> 1000  9.99   0.000000 156.718432   0.8982089 1.111232e-01 5.510882e+01 #> 1001 10.00   0.000000 156.326355   0.8965186 1.106028e-01 5.516989e+01 #>                 R #> 1    0.000000e+00 #> 2    4.988903e-06 #> 3    2.050940e-05 #> 4    4.828863e-05 #> 5    9.031093e-05 #> 6    1.488540e-04 #> 7    2.265301e-04 #> 8    3.263324e-04 #> 9    4.516876e-04 #> 10   6.065156e-04 #> 11   7.952969e-04 #> 12   1.023148e-03 #> 13   1.295909e-03 #> 14   1.620238e-03 #> 15   2.003722e-03 #> 16   2.454999e-03 #> 17   2.983898e-03 #> 18   3.601592e-03 #> 19   4.320775e-03 #> 20   5.155859e-03 #> 21   6.123189e-03 #> 22   7.241297e-03 #> 23   8.531173e-03 #> 24   1.001658e-02 #> 25   1.172438e-02 #> 26   1.368494e-02 #> 27   1.593256e-02 #> 28   1.850592e-02 #> 29   2.144865e-02 #> 30   2.480987e-02 #> 31   2.864487e-02 #> 32   3.301580e-02 #> 33   3.799248e-02 #> 34   4.365323e-02 #> 35   5.008583e-02 #> 36   5.738853e-02 #> 37   6.567121e-02 #> 38   7.505652e-02 #> 39   8.568123e-02 #> 40   9.769760e-02 #> 41   1.112749e-01 #> 42   1.266009e-01 #> 43   1.438835e-01 #> 44   1.633528e-01 #> 45   1.852621e-01 #> 46   2.098907e-01 #> 47   2.375447e-01 #> 48   2.685594e-01 #> 49   3.033010e-01 #> 50   3.421677e-01 #> 51   3.855917e-01 #> 52   4.340398e-01 #> 53   4.880150e-01 #> 54   5.480564e-01 #> 55   6.147397e-01 #> 56   6.886769e-01 #> 57   7.705150e-01 #> 58   8.609349e-01 #> 59   9.606491e-01 #> 60   1.070399e+00 #> 61   1.190951e+00 #> 62   1.323092e+00 #> 63   1.467628e+00 #> 64   1.625372e+00 #> 65   1.797146e+00 #> 66   1.983771e+00 #> 67   2.186058e+00 #> 68   2.404810e+00 #> 69   2.640806e+00 #> 70   2.894803e+00 #> 71   3.167527e+00 #> 72   3.459669e+00 #> 73   3.771879e+00 #> 74   4.104766e+00 #> 75   4.458892e+00 #> 76   4.834770e+00 #> 77   5.232865e+00 #> 78   5.653592e+00 #> 79   6.097314e+00 #> 80   6.564347e+00 #> 81   7.054958e+00 #> 82   7.569365e+00 #> 83   8.107744e+00 #> 84   8.670228e+00 #> 85   9.256907e+00 #> 86   9.867836e+00 #> 87   1.050303e+01 #> 88   1.116248e+01 #> 89   1.184615e+01 #> 90   1.255394e+01 #> 91   1.328578e+01 #> 92   1.404154e+01 #> 93   1.482108e+01 #> 94   1.562424e+01 #> 95   1.645085e+01 #> 96   1.730071e+01 #> 97   1.817362e+01 #> 98   1.906936e+01 #> 99   1.998772e+01 #> 100  2.092843e+01 #> 101  2.189085e+01 #> 102  2.287438e+01 #> 103  2.387838e+01 #> 104  2.490228e+01 #> 105  2.594548e+01 #> 106  2.700740e+01 #> 107  2.808750e+01 #> 108  2.918522e+01 #> 109  3.030002e+01 #> 110  3.143138e+01 #> 111  3.257878e+01 #> 112  3.374172e+01 #> 113  3.491971e+01 #> 114  3.611227e+01 #> 115  3.731892e+01 #> 116  3.853921e+01 #> 117  3.977268e+01 #> 118  4.101889e+01 #> 119  4.227742e+01 #> 120  4.354785e+01 #> 121  4.482975e+01 #> 122  4.612273e+01 #> 123  4.742640e+01 #> 124  4.874038e+01 #> 125  5.006428e+01 #> 126  5.139774e+01 #> 127  5.274041e+01 #> 128  5.409194e+01 #> 129  5.545198e+01 #> 130  5.682020e+01 #> 131  5.819627e+01 #> 132  5.957989e+01 #> 133  6.097073e+01 #> 134  6.236850e+01 #> 135  6.377291e+01 #> 136  6.518366e+01 #> 137  6.660047e+01 #> 138  6.802308e+01 #> 139  6.945121e+01 #> 140  7.088460e+01 #> 141  7.232300e+01 #> 142  7.376617e+01 #> 143  7.521385e+01 #> 144  7.666583e+01 #> 145  7.812186e+01 #> 146  7.958173e+01 #> 147  8.104521e+01 #> 148  8.251211e+01 #> 149  8.398220e+01 #> 150  8.545530e+01 #> 151  8.693120e+01 #> 152  8.840971e+01 #> 153  8.989065e+01 #> 154  9.137385e+01 #> 155  9.285912e+01 #> 156  9.434630e+01 #> 157  9.583521e+01 #> 158  9.732571e+01 #> 159  9.881762e+01 #> 160  1.003108e+02 #> 161  1.018051e+02 #> 162  1.033004e+02 #> 163  1.047965e+02 #> 164  1.062934e+02 #> 165  1.077908e+02 #> 166  1.092886e+02 #> 167  1.107868e+02 #> 168  1.122851e+02 #> 169  1.137836e+02 #> 170  1.152820e+02 #> 171  1.167803e+02 #> 172  1.182783e+02 #> 173  1.197760e+02 #> 174  1.212732e+02 #> 175  1.227699e+02 #> 176  1.242660e+02 #> 177  1.257613e+02 #> 178  1.272558e+02 #> 179  1.287494e+02 #> 180  1.302420e+02 #> 181  1.317335e+02 #> 182  1.332239e+02 #> 183  1.347131e+02 #> 184  1.362009e+02 #> 185  1.376875e+02 #> 186  1.391726e+02 #> 187  1.406562e+02 #> 188  1.421382e+02 #> 189  1.436187e+02 #> 190  1.450974e+02 #> 191  1.465745e+02 #> 192  1.480497e+02 #> 193  1.495231e+02 #> 194  1.509947e+02 #> 195  1.524643e+02 #> 196  1.539319e+02 #> 197  1.553975e+02 #> 198  1.568610e+02 #> 199  1.583225e+02 #> 200  1.597818e+02 #> 201  1.612389e+02 #> 202  1.626938e+02 #> 203  1.641464e+02 #> 204  1.655967e+02 #> 205  1.670448e+02 #> 206  1.684904e+02 #> 207  1.699337e+02 #> 208  1.713746e+02 #> 209  1.728131e+02 #> 210  1.742491e+02 #> 211  1.756826e+02 #> 212  1.771137e+02 #> 213  1.785422e+02 #> 214  1.799681e+02 #> 215  1.813915e+02 #> 216  1.828124e+02 #> 217  1.842306e+02 #> 218  1.856462e+02 #> 219  1.870592e+02 #> 220  1.884696e+02 #> 221  1.898773e+02 #> 222  1.912823e+02 #> 223  1.926846e+02 #> 224  1.940843e+02 #> 225  1.954813e+02 #> 226  1.968756e+02 #> 227  1.982671e+02 #> 228  1.996560e+02 #> 229  2.010421e+02 #> 230  2.024254e+02 #> 231  2.038061e+02 #> 232  2.051840e+02 #> 233  2.065591e+02 #> 234  2.079315e+02 #> 235  2.093012e+02 #> 236  2.106681e+02 #> 237  2.120323e+02 #> 238  2.133937e+02 #> 239  2.147523e+02 #> 240  2.161082e+02 #> 241  2.174613e+02 #> 242  2.188117e+02 #> 243  2.201593e+02 #> 244  2.215042e+02 #> 245  2.228463e+02 #> 246  2.241857e+02 #> 247  2.255223e+02 #> 248  2.268562e+02 #> 249  2.281874e+02 #> 250  2.295159e+02 #> 251  2.308416e+02 #> 252  2.321646e+02 #> 253  2.334848e+02 #> 254  2.348024e+02 #> 255  2.361173e+02 #> 256  2.374295e+02 #> 257  2.387389e+02 #> 258  2.400457e+02 #> 259  2.413499e+02 #> 260  2.426513e+02 #> 261  2.439501e+02 #> 262  2.452462e+02 #> 263  2.465397e+02 #> 264  2.478306e+02 #> 265  2.491188e+02 #> 266  2.504044e+02 #> 267  2.516874e+02 #> 268  2.529677e+02 #> 269  2.542455e+02 #> 270  2.555207e+02 #> 271  2.567933e+02 #> 272  2.580634e+02 #> 273  2.593308e+02 #> 274  2.605958e+02 #> 275  2.618581e+02 #> 276  2.631180e+02 #> 277  2.643753e+02 #> 278  2.656302e+02 #> 279  2.668825e+02 #> 280  2.681323e+02 #> 281  2.693796e+02 #> 282  2.706245e+02 #> 283  2.718669e+02 #> 284  2.731068e+02 #> 285  2.743443e+02 #> 286  2.755794e+02 #> 287  2.768121e+02 #> 288  2.780423e+02 #> 289  2.792701e+02 #> 290  2.804956e+02 #> 291  2.817186e+02 #> 292  2.829393e+02 #> 293  2.841577e+02 #> 294  2.853736e+02 #> 295  2.865873e+02 #> 296  2.877986e+02 #> 297  2.890076e+02 #> 298  2.902143e+02 #> 299  2.914186e+02 #> 300  2.926207e+02 #> 301  2.938205e+02 #> 302  2.950181e+02 #> 303  2.962134e+02 #> 304  2.974064e+02 #> 305  2.985972e+02 #> 306  2.997858e+02 #> 307  3.009722e+02 #> 308  3.021563e+02 #> 309  3.033383e+02 #> 310  3.045180e+02 #> 311  3.056956e+02 #> 312  3.068711e+02 #> 313  3.080443e+02 #> 314  3.092154e+02 #> 315  3.103844e+02 #> 316  3.115513e+02 #> 317  3.127160e+02 #> 318  3.138787e+02 #> 319  3.150392e+02 #> 320  3.161976e+02 #> 321  3.173540e+02 #> 322  3.185083e+02 #> 323  3.196605e+02 #> 324  3.208107e+02 #> 325  3.219588e+02 #> 326  3.231049e+02 #> 327  3.242490e+02 #> 328  3.253910e+02 #> 329  3.265311e+02 #> 330  3.276691e+02 #> 331  3.288052e+02 #> 332  3.299393e+02 #> 333  3.310714e+02 #> 334  3.322015e+02 #> 335  3.333297e+02 #> 336  3.344560e+02 #> 337  3.355803e+02 #> 338  3.367027e+02 #> 339  3.378231e+02 #> 340  3.389417e+02 #> 341  3.400583e+02 #> 342  3.411730e+02 #> 343  3.422859e+02 #> 344  3.433969e+02 #> 345  3.445060e+02 #> 346  3.456132e+02 #> 347  3.467186e+02 #> 348  3.478221e+02 #> 349  3.489238e+02 #> 350  3.500236e+02 #> 351  3.511217e+02 #> 352  3.522179e+02 #> 353  3.533123e+02 #> 354  3.544048e+02 #> 355  3.554956e+02 #> 356  3.565846e+02 #> 357  3.576718e+02 #> 358  3.587573e+02 #> 359  3.598409e+02 #> 360  3.609228e+02 #> 361  3.620029e+02 #> 362  3.630813e+02 #> 363  3.641580e+02 #> 364  3.652329e+02 #> 365  3.663060e+02 #> 366  3.673775e+02 #> 367  3.684472e+02 #> 368  3.695152e+02 #> 369  3.705815e+02 #> 370  3.716461e+02 #> 371  3.727091e+02 #> 372  3.737703e+02 #> 373  3.748298e+02 #> 374  3.758877e+02 #> 375  3.769439e+02 #> 376  3.779984e+02 #> 377  3.790513e+02 #> 378  3.801025e+02 #> 379  3.811521e+02 #> 380  3.822000e+02 #> 381  3.832463e+02 #> 382  3.842910e+02 #> 383  3.853340e+02 #> 384  3.863754e+02 #> 385  3.874152e+02 #> 386  3.884534e+02 #> 387  3.894900e+02 #> 388  3.905250e+02 #> 389  3.915585e+02 #> 390  3.925903e+02 #> 391  3.936205e+02 #> 392  3.946492e+02 #> 393  3.956763e+02 #> 394  3.967018e+02 #> 395  3.977258e+02 #> 396  3.987482e+02 #> 397  3.997691e+02 #> 398  4.007884e+02 #> 399  4.018062e+02 #> 400  4.028225e+02 #> 401  4.038373e+02 #> 402  4.048505e+02 #> 403  4.058622e+02 #> 404  4.068724e+02 #> 405  4.078811e+02 #> 406  4.088883e+02 #> 407  4.098941e+02 #> 408  4.108983e+02 #> 409  4.119010e+02 #> 410  4.129023e+02 #> 411  4.139021e+02 #> 412  4.149004e+02 #> 413  4.158972e+02 #> 414  4.168926e+02 #> 415  4.178865e+02 #> 416  4.188789e+02 #> 417  4.198699e+02 #> 418  4.208595e+02 #> 419  4.218475e+02 #> 420  4.228341e+02 #> 421  4.238193e+02 #> 422  4.248030e+02 #> 423  4.257852e+02 #> 424  4.267660e+02 #> 425  4.277454e+02 #> 426  4.287233e+02 #> 427  4.296997e+02 #> 428  4.306747e+02 #> 429  4.316482e+02 #> 430  4.326203e+02 #> 431  4.335910e+02 #> 432  4.345602e+02 #> 433  4.355280e+02 #> 434  4.364943e+02 #> 435  4.374592e+02 #> 436  4.384227e+02 #> 437  4.393847e+02 #> 438  4.403453e+02 #> 439  4.413045e+02 #> 440  4.422622e+02 #> 441  4.432185e+02 #> 442  4.441734e+02 #> 443  4.451268e+02 #> 444  4.460789e+02 #> 445  4.470295e+02 #> 446  4.479786e+02 #> 447  4.489264e+02 #> 448  4.498727e+02 #> 449  4.508175e+02 #> 450  4.517610e+02 #> 451  4.527030e+02 #> 452  4.536436e+02 #> 453  4.545827e+02 #> 454  4.555205e+02 #> 455  4.564568e+02 #> 456  4.573918e+02 #> 457  4.583253e+02 #> 458  4.592574e+02 #> 459  4.601881e+02 #> 460  4.611174e+02 #> 461  4.620453e+02 #> 462  4.629718e+02 #> 463  4.638969e+02 #> 464  4.648206e+02 #> 465  4.657429e+02 #> 466  4.666638e+02 #> 467  4.675834e+02 #> 468  4.685015e+02 #> 469  4.694183e+02 #> 470  4.703337e+02 #> 471  4.712477e+02 #> 472  4.721603e+02 #> 473  4.730715e+02 #> 474  4.739814e+02 #> 475  4.748899e+02 #> 476  4.757970e+02 #> 477  4.767028e+02 #> 478  4.776072e+02 #> 479  4.785102e+02 #> 480  4.794119e+02 #> 481  4.803122e+02 #> 482  4.812111e+02 #> 483  4.821087e+02 #> 484  4.830050e+02 #> 485  4.838998e+02 #> 486  4.847933e+02 #> 487  4.856855e+02 #> 488  4.865763e+02 #> 489  4.874658e+02 #> 490  4.883539e+02 #> 491  4.892407e+02 #> 492  4.901261e+02 #> 493  4.910102e+02 #> 494  4.918929e+02 #> 495  4.927743e+02 #> 496  4.936544e+02 #> 497  4.945331e+02 #> 498  4.954105e+02 #> 499  4.962866e+02 #> 500  4.971613e+02 #> 501  4.980347e+02 #> 502  4.989067e+02 #> 503  4.997774e+02 #> 504  5.006468e+02 #> 505  5.015149e+02 #> 506  5.023816e+02 #> 507  5.032470e+02 #> 508  5.041111e+02 #> 509  5.049739e+02 #> 510  5.058353e+02 #> 511  5.066954e+02 #> 512  5.075542e+02 #> 513  5.084117e+02 #> 514  5.092679e+02 #> 515  5.101227e+02 #> 516  5.109763e+02 #> 517  5.118285e+02 #> 518  5.126794e+02 #> 519  5.135290e+02 #> 520  5.143772e+02 #> 521  5.152242e+02 #> 522  5.160699e+02 #> 523  5.169142e+02 #> 524  5.177572e+02 #> 525  5.185990e+02 #> 526  5.194394e+02 #> 527  5.202785e+02 #> 528  5.211163e+02 #> 529  5.219529e+02 #> 530  5.227881e+02 #> 531  5.236220e+02 #> 532  5.244546e+02 #> 533  5.252859e+02 #> 534  5.261159e+02 #> 535  5.269446e+02 #> 536  5.277721e+02 #> 537  5.285982e+02 #> 538  5.294230e+02 #> 539  5.302465e+02 #> 540  5.310688e+02 #> 541  5.318897e+02 #> 542  5.327094e+02 #> 543  5.335277e+02 #> 544  5.343448e+02 #> 545  5.351606e+02 #> 546  5.359751e+02 #> 547  5.367883e+02 #> 548  5.376002e+02 #> 549  5.384108e+02 #> 550  5.392202e+02 #> 551  5.400283e+02 #> 552  5.408350e+02 #> 553  5.416405e+02 #> 554  5.424447e+02 #> 555  5.432477e+02 #> 556  5.440493e+02 #> 557  5.448497e+02 #> 558  5.456488e+02 #> 559  5.464466e+02 #> 560  5.472431e+02 #> 561  5.480384e+02 #> 562  5.488324e+02 #> 563  5.496251e+02 #> 564  5.504165e+02 #> 565  5.512066e+02 #> 566  5.519955e+02 #> 567  5.527831e+02 #> 568  5.535695e+02 #> 569  5.543545e+02 #> 570  5.551383e+02 #> 571  5.559208e+02 #> 572  5.567021e+02 #> 573  5.574821e+02 #> 574  5.582608e+02 #> 575  5.590383e+02 #> 576  5.598144e+02 #> 577  5.605894e+02 #> 578  5.613630e+02 #> 579  5.621354e+02 #> 580  5.629065e+02 #> 581  5.636764e+02 #> 582  5.644450e+02 #> 583  5.652123e+02 #> 584  5.659784e+02 #> 585  5.667432e+02 #> 586  5.675068e+02 #> 587  5.682691e+02 #> 588  5.690301e+02 #> 589  5.697899e+02 #> 590  5.705484e+02 #> 591  5.713057e+02 #> 592  5.720617e+02 #> 593  5.728165e+02 #> 594  5.735700e+02 #> 595  5.743222e+02 #> 596  5.750732e+02 #> 597  5.758230e+02 #> 598  5.765715e+02 #> 599  5.773187e+02 #> 600  5.780647e+02 #> 601  5.788095e+02 #> 602  5.795530e+02 #> 603  5.802952e+02 #> 604  5.810362e+02 #> 605  5.817760e+02 #> 606  5.825145e+02 #> 607  5.832518e+02 #> 608  5.839878e+02 #> 609  5.847226e+02 #> 610  5.854562e+02 #> 611  5.861885e+02 #> 612  5.869195e+02 #> 613  5.876494e+02 #> 614  5.883780e+02 #> 615  5.891053e+02 #> 616  5.898314e+02 #> 617  5.905563e+02 #> 618  5.912799e+02 #> 619  5.920023e+02 #> 620  5.927235e+02 #> 621  5.934434e+02 #> 622  5.941621e+02 #> 623  5.948796e+02 #> 624  5.955958e+02 #> 625  5.963109e+02 #> 626  5.970246e+02 #> 627  5.977372e+02 #> 628  5.984485e+02 #> 629  5.991586e+02 #> 630  5.998675e+02 #> 631  6.005751e+02 #> 632  6.012815e+02 #> 633  6.019867e+02 #> 634  6.026907e+02 #> 635  6.033934e+02 #> 636  6.040949e+02 #> 637  6.047952e+02 #> 638  6.054943e+02 #> 639  6.061922e+02 #> 640  6.068888e+02 #> 641  6.075843e+02 #> 642  6.082785e+02 #> 643  6.089715e+02 #> 644  6.096632e+02 #> 645  6.103538e+02 #> 646  6.110431e+02 #> 647  6.117313e+02 #> 648  6.124182e+02 #> 649  6.131039e+02 #> 650  6.137884e+02 #> 651  6.144717e+02 #> 652  6.151538e+02 #> 653  6.158347e+02 #> 654  6.165143e+02 #> 655  6.171928e+02 #> 656  6.178701e+02 #> 657  6.185461e+02 #> 658  6.192210e+02 #> 659  6.198946e+02 #> 660  6.205671e+02 #> 661  6.212383e+02 #> 662  6.219084e+02 #> 663  6.225772e+02 #> 664  6.232449e+02 #> 665  6.239113e+02 #> 666  6.245766e+02 #> 667  6.252407e+02 #> 668  6.259035e+02 #> 669  6.265652e+02 #> 670  6.272257e+02 #> 671  6.278850e+02 #> 672  6.285431e+02 #> 673  6.292000e+02 #> 674  6.298557e+02 #> 675  6.305103e+02 #> 676  6.311636e+02 #> 677  6.318158e+02 #> 678  6.324668e+02 #> 679  6.331166e+02 #> 680  6.337652e+02 #> 681  6.344126e+02 #> 682  6.350589e+02 #> 683  6.357039e+02 #> 684  6.363478e+02 #> 685  6.369906e+02 #> 686  6.376321e+02 #> 687  6.382725e+02 #> 688  6.389116e+02 #> 689  6.395497e+02 #> 690  6.401865e+02 #> 691  6.408222e+02 #> 692  6.414567e+02 #> 693  6.420900e+02 #> 694  6.427221e+02 #> 695  6.433531e+02 #> 696  6.439830e+02 #> 697  6.446116e+02 #> 698  6.452391e+02 #> 699  6.458654e+02 #> 700  6.464906e+02 #> 701  6.471146e+02 #> 702  6.477375e+02 #> 703  6.483591e+02 #> 704  6.489797e+02 #> 705  6.495990e+02 #> 706  6.502172e+02 #> 707  6.508343e+02 #> 708  6.514502e+02 #> 709  6.520650e+02 #> 710  6.526786e+02 #> 711  6.532910e+02 #> 712  6.539023e+02 #> 713  6.545124e+02 #> 714  6.551214e+02 #> 715  6.557293e+02 #> 716  6.563360e+02 #> 717  6.569416e+02 #> 718  6.575460e+02 #> 719  6.581493e+02 #> 720  6.587514e+02 #> 721  6.593524e+02 #> 722  6.599522e+02 #> 723  6.605510e+02 #> 724  6.611485e+02 #> 725  6.617450e+02 #> 726  6.623403e+02 #> 727  6.629345e+02 #> 728  6.635275e+02 #> 729  6.641194e+02 #> 730  6.647102e+02 #> 731  6.652999e+02 #> 732  6.658884e+02 #> 733  6.664758e+02 #> 734  6.670621e+02 #> 735  6.676472e+02 #> 736  6.682313e+02 #> 737  6.688142e+02 #> 738  6.693959e+02 #> 739  6.699766e+02 #> 740  6.705562e+02 #> 741  6.711346e+02 #> 742  6.717119e+02 #> 743  6.722881e+02 #> 744  6.728632e+02 #> 745  6.734372e+02 #> 746  6.740100e+02 #> 747  6.745818e+02 #> 748  6.751524e+02 #> 749  6.757219e+02 #> 750  6.762904e+02 #> 751  6.768577e+02 #> 752  6.774239e+02 #> 753  6.779890e+02 #> 754  6.785530e+02 #> 755  6.791159e+02 #> 756  6.796778e+02 #> 757  6.802385e+02 #> 758  6.807981e+02 #> 759  6.813566e+02 #> 760  6.819140e+02 #> 761  6.824704e+02 #> 762  6.830256e+02 #> 763  6.835798e+02 #> 764  6.841328e+02 #> 765  6.846848e+02 #> 766  6.852357e+02 #> 767  6.857855e+02 #> 768  6.863342e+02 #> 769  6.868818e+02 #> 770  6.874284e+02 #> 771  6.879739e+02 #> 772  6.885182e+02 #> 773  6.890616e+02 #> 774  6.896038e+02 #> 775  6.901450e+02 #> 776  6.906850e+02 #> 777  6.912240e+02 #> 778  6.917620e+02 #> 779  6.922989e+02 #> 780  6.928347e+02 #> 781  6.933694e+02 #> 782  6.939031e+02 #> 783  6.944357e+02 #> 784  6.949672e+02 #> 785  6.954977e+02 #> 786  6.960271e+02 #> 787  6.965554e+02 #> 788  6.970827e+02 #> 789  6.976089e+02 #> 790  6.981341e+02 #> 791  6.986582e+02 #> 792  6.991813e+02 #> 793  6.997033e+02 #> 794  7.002243e+02 #> 795  7.007442e+02 #> 796  7.012631e+02 #> 797  7.017809e+02 #> 798  7.022977e+02 #> 799  7.028134e+02 #> 800  7.033281e+02 #> 801  7.038417e+02 #> 802  7.043543e+02 #> 803  7.048659e+02 #> 804  7.053764e+02 #> 805  7.058859e+02 #> 806  7.063943e+02 #> 807  7.069017e+02 #> 808  7.074081e+02 #> 809  7.079135e+02 #> 810  7.084178e+02 #> 811  7.089211e+02 #> 812  7.094234e+02 #> 813  7.099246e+02 #> 814  7.104248e+02 #> 815  7.109240e+02 #> 816  7.114222e+02 #> 817  7.119193e+02 #> 818  7.124155e+02 #> 819  7.129106e+02 #> 820  7.134047e+02 #> 821  7.138978e+02 #> 822  7.143898e+02 #> 823  7.148809e+02 #> 824  7.153709e+02 #> 825  7.158600e+02 #> 826  7.163480e+02 #> 827  7.168350e+02 #> 828  7.173210e+02 #> 829  7.178060e+02 #> 830  7.182900e+02 #> 831  7.187730e+02 #> 832  7.192550e+02 #> 833  7.197360e+02 #> 834  7.202160e+02 #> 835  7.206950e+02 #> 836  7.211731e+02 #> 837  7.216501e+02 #> 838  7.221261e+02 #> 839  7.226012e+02 #> 840  7.230752e+02 #> 841  7.235483e+02 #> 842  7.240203e+02 #> 843  7.244914e+02 #> 844  7.249615e+02 #> 845  7.254307e+02 #> 846  7.258988e+02 #> 847  7.263660e+02 #> 848  7.268322e+02 #> 849  7.272974e+02 #> 850  7.277616e+02 #> 851  7.282249e+02 #> 852  7.286872e+02 #> 853  7.291485e+02 #> 854  7.296088e+02 #> 855  7.300682e+02 #> 856  7.305266e+02 #> 857  7.309841e+02 #> 858  7.314405e+02 #> 859  7.318961e+02 #> 860  7.323506e+02 #> 861  7.328042e+02 #> 862  7.332569e+02 #> 863  7.337085e+02 #> 864  7.341593e+02 #> 865  7.346090e+02 #> 866  7.350579e+02 #> 867  7.355057e+02 #> 868  7.359526e+02 #> 869  7.363986e+02 #> 870  7.368436e+02 #> 871  7.372877e+02 #> 872  7.377309e+02 #> 873  7.381730e+02 #> 874  7.386143e+02 #> 875  7.390546e+02 #> 876  7.394940e+02 #> 877  7.399324e+02 #> 878  7.403699e+02 #> 879  7.408065e+02 #> 880  7.412421e+02 #> 881  7.416768e+02 #> 882  7.421105e+02 #> 883  7.425434e+02 #> 884  7.429753e+02 #> 885  7.434063e+02 #> 886  7.438363e+02 #> 887  7.442655e+02 #> 888  7.446937e+02 #> 889  7.451210e+02 #> 890  7.455474e+02 #> 891  7.459728e+02 #> 892  7.463974e+02 #> 893  7.468210e+02 #> 894  7.472437e+02 #> 895  7.476655e+02 #> 896  7.480864e+02 #> 897  7.485064e+02 #> 898  7.489254e+02 #> 899  7.493436e+02 #> 900  7.497609e+02 #> 901  7.501772e+02 #> 902  7.505927e+02 #> 903  7.510073e+02 #> 904  7.514209e+02 #> 905  7.518337e+02 #> 906  7.522455e+02 #> 907  7.526565e+02 #> 908  7.530666e+02 #> 909  7.534758e+02 #> 910  7.538841e+02 #> 911  7.542915e+02 #> 912  7.546980e+02 #> 913  7.551036e+02 #> 914  7.555084e+02 #> 915  7.559123e+02 #> 916  7.563152e+02 #> 917  7.567173e+02 #> 918  7.571186e+02 #> 919  7.575189e+02 #> 920  7.579184e+02 #> 921  7.583170e+02 #> 922  7.587147e+02 #> 923  7.591116e+02 #> 924  7.595075e+02 #> 925  7.599027e+02 #> 926  7.602969e+02 #> 927  7.606903e+02 #> 928  7.610828e+02 #> 929  7.614744e+02 #> 930  7.618652e+02 #> 931  7.622552e+02 #> 932  7.626442e+02 #> 933  7.630324e+02 #> 934  7.634198e+02 #> 935  7.638063e+02 #> 936  7.641919e+02 #> 937  7.645767e+02 #> 938  7.649607e+02 #> 939  7.653438e+02 #> 940  7.657260e+02 #> 941  7.661074e+02 #> 942  7.664880e+02 #> 943  7.668677e+02 #> 944  7.672466e+02 #> 945  7.676246e+02 #> 946  7.680018e+02 #> 947  7.683781e+02 #> 948  7.687537e+02 #> 949  7.691283e+02 #> 950  7.695022e+02 #> 951  7.698752e+02 #> 952  7.702474e+02 #> 953  7.706188e+02 #> 954  7.709893e+02 #> 955  7.713590e+02 #> 956  7.717279e+02 #> 957  7.720959e+02 #> 958  7.724632e+02 #> 959  7.728296e+02 #> 960  7.731952e+02 #> 961  7.735600e+02 #> 962  7.739239e+02 #> 963  7.742871e+02 #> 964  7.746494e+02 #> 965  7.750109e+02 #> 966  7.753716e+02 #> 967  7.757315e+02 #> 968  7.760906e+02 #> 969  7.764489e+02 #> 970  7.768064e+02 #> 971  7.771631e+02 #> 972  7.775189e+02 #> 973  7.778740e+02 #> 974  7.782283e+02 #> 975  7.785818e+02 #> 976  7.789344e+02 #> 977  7.792863e+02 #> 978  7.796374e+02 #> 979  7.799877e+02 #> 980  7.803372e+02 #> 981  7.806859e+02 #> 982  7.810339e+02 #> 983  7.813810e+02 #> 984  7.817274e+02 #> 985  7.820729e+02 #> 986  7.824177e+02 #> 987  7.827617e+02 #> 988  7.831050e+02 #> 989  7.834474e+02 #> 990  7.837891e+02 #> 991  7.841300e+02 #> 992  7.844701e+02 #> 993  7.848095e+02 #> 994  7.851481e+02 #> 995  7.854859e+02 #> 996  7.858229e+02 #> 997  7.861592e+02 #> 998  7.864947e+02 #> 999  7.868294e+02 #> 1000 7.871634e+02 #> 1001 7.874966e+02"},{"path":"/articles/denim_benchmark.html","id":"benchmark-settings","dir":"Articles","previous_headings":"","what":"Benchmark settings","title":"denim benchmark","text":"approaches simulate following SEIR model, simulation duration 180 approach run 50 times","code":"total_runs <- 50L # number of runs sim_duration <- 180 # duration of simulation"},{"path":"/articles/denim_benchmark.html","id":"useir","dir":"Articles","previous_headings":"","what":"uSEIR","title":"denim benchmark","text":"Simulate model using uSEIR approach (Hernández et al. 2021) Source code: https://github.com/jjgomezcadenas/useirn/blob/master/nb/uSEIR.ipynb","code":"library(reticulate) ## Warning: package 'reticulate' was built under R version 4.3.3 # use_python(\"/opt/anaconda3/envs/bnn/bin/python\", required = TRUE) use_condaenv(condaenv='bnn', required = TRUE) matplotlib <- import(\"matplotlib\") matplotlib$use(\"Agg\", force = TRUE) py_run_file(\"../supplements/useir_python.py\")"},{"path":"/articles/denim_benchmark.html","id":"python-implementation","dir":"Articles","previous_headings":"uSEIR","what":"Python implementation","title":"denim benchmark","text":"Run time uSEIR approach, Python implementation (seconds) Median run time uSEIR approach, Python implementation: 53.7090955 seconds","code":"import time import concurrent.futures import pickle import os from statistics import mean  python_runs = []  def get_python_runtime(n):   start = time.time()   df = solve_uSeir(ti_shape     = 2,                      ti_scale     = 4,                      tr_shape     = 2,                      tr_scale     = 3,                      R0           = 3.5)   end = time.time()   return end - start    # load cached result if available instead of rerun due to long run time cached_python_runs = \"../supplements/python_runs.pkl\" if os.path.exists(cached_python_runs):   # If the file exists, load the Python list from the file   with open(cached_python_runs, 'rb') as f:     python_runs = pickle.load(f) else:   print(\"no cache found\")   # multithread instead for quicker result   with concurrent.futures.ProcessPoolExecutor(max_workers=8) as executor:     python_runs = list(executor.map(get_python_runtime, range(r.total_runs)))   # Save to cache   with open(cached_python_runs, 'wb') as f:       pickle.dump(python_runs, f)        # plot_useir((df,), ('G',), T = 'uSEIR', figsize=(14,8)) # print(f'python solve_seir call: dr = {end-start}') py$python_runs ##  [1] 54.79370 54.23037 54.61863 54.13476 54.73439 54.35928 54.48391 54.56821 ##  [9] 53.26567 53.35437 53.44551 53.31425 53.51092 53.19878 53.92493 53.84889 ## [17] 54.05378 53.66922 53.65536 53.54520 53.73345 53.88690 54.23988 54.19460 ## [25] 53.64543 53.55217 53.66061 53.67430 53.59397 53.65503 54.32232 53.98363 ## [33] 53.53084 53.79021 53.85689 53.45313 53.61043 53.53294 54.00833 54.11180 ## [41] 53.94760 53.61952 53.80676 53.74364 53.68474 53.63701 53.59615 53.81793 ## [49] 44.74661 44.77127"},{"path":"/articles/denim_benchmark.html","id":"cython-implementation","dir":"Articles","previous_headings":"uSEIR","what":"Cython implementation","title":"denim benchmark","text":"Run time uSEIR approach, Cython implementation (seconds) Median run time uSEIR approach, Cython implementation: 0.4036945 seconds","code":"# import precompiled cython module import sys sys.path.insert(0, \"../supplements\") import useir import time import pyarrow as pa  cython_runs = []  # --- Get runtime ---- for i in range(r.total_runs):   start = time.time()   df = useir.csolve_uSeir(dist = \"gamma\",                     ti_shape     = 2,                      ti_scale     = 4,                      tr_shape     = 2,                      tr_scale     = 3,                      R0           = 3.5   )   end = time.time()    cython_runs = cython_runs + [end - start] ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 # ---- Get output for uSEIR ----- df = useir.csolve_uSeir(dist = \"gamma\",                     ti_shape     = 2,                      ti_scale     = 4,                      tr_shape     = 2,                      tr_scale     = 3,                      R0           = 3.5   ) ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 # convert to pyarrow table for easy conversion to R data.frames to_r_df = pa.Table.from_pandas(df) py$cython_runs ##  [1] 0.4006190 0.4024279 0.4006343 0.4025679 0.3997817 0.4068038 0.4022102 ##  [8] 0.4043179 0.4043519 0.4014809 0.4099109 0.4061849 0.3975039 0.3988829 ## [15] 0.4015999 0.4003770 0.4012938 0.4009390 0.4056711 0.4066510 0.4015381 ## [22] 0.3969321 0.4054148 0.4033730 0.4022348 0.4026082 0.4015408 0.4071460 ## [29] 0.4019132 0.4040194 0.4105749 0.4004490 0.4023907 0.4013791 0.4040160 ## [36] 0.4061792 0.4076910 0.4065399 0.4004521 0.3999770 0.4053557 0.4042711 ## [43] 0.4062769 0.4112499 0.4052560 0.4052248 0.4040771 0.4084358 0.4083548 ## [50] 0.4056518"},{"path":[]},{"path":"/articles/denim_benchmark.html","id":"model-in-r","dir":"Articles","previous_headings":"deSolve","what":"Model in R","title":"denim benchmark","text":"Run time deSolve implementation Median run time deSolve, model defined R: 0.0030976 seconds","code":"library(deSolve) ## Warning: package 'deSolve' was built under R version 4.3.1 parameters <- c(gamma_rate_I = 1/4, shape_I=2,                 gamma_rate_R = 1/3, shape_R = 2,                 R0 = 3.5, N = 1e6)  initialValues <- c(S = 999999, E1 = 1,                    E2 = 0, E = 0, I1=0,                     I2=0, I=0, R=0                    )  # --- Transition def for deSolve transition_func <- function(t, state, param){   with(as.list( c(state, param) ), {       tr = shape_R*(1/gamma_rate_R)              dS = - (R0/tr) * S * I/N       # apply linear chain trick       dE1 = (R0/tr) * S * I/N - gamma_rate_I*E1       dE2 = gamma_rate_I*E1 - gamma_rate_I*E2       dE = dE1 + dE2       dI1 = gamma_rate_I*E2 - gamma_rate_R*I1       dI2 = gamma_rate_R*I1 - gamma_rate_R*I2       dI =  dI1 + dI2        dR = gamma_rate_R*I2       list(c(dS, dE1, dE2, dE, dI1, dI2, dI, dR))   }) }  times <- seq(0, sim_duration, 1)  # ------ Compute run time ------ desolve_runs <- bench::mark(   ode(y = initialValues, times = times, parms = parameters, func = transition_func),   iterations = total_runs )  ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)  ode_mod <- as.data.frame(ode_mod) desolve_runs$time ## [[1]] ##  [1]  5.57ms  3.16ms  3.14ms  3.1ms   3.1ms   4.72ms  3.1ms   3.05ms  2.99ms ## [10]  3.04ms 28.32ms  3.19ms  3.09ms  3.1ms   3.1ms   3.06ms  5.43ms  3.1ms  ## [19]  3.1ms   3.07ms  3.02ms  4.44ms  3.15ms  3.01ms  2.99ms  2.98ms  3ms    ## [28]  4.58ms  3.25ms  3.22ms  3.03ms  3.03ms  3.27ms  5.96ms  3.48ms  3.43ms ## [37]  3.34ms  3.27ms  5.38ms  3.14ms  3.21ms  3.05ms  3.07ms  3.06ms  4.81ms ## [46]  3.1ms   3.06ms  3.04ms  3.03ms  4.33ms"},{"path":"/articles/denim_benchmark.html","id":"model-in-c","dir":"Articles","previous_headings":"deSolve","what":"Model in C","title":"denim benchmark","text":"Run time deSolve model defined C Median run time deSolve, model defined C: 1.1916651^{-4} seconds","code":"# compile model # system(\"R CMD SHLIB supplements/desolve_mod/benchmark_mod.c\")  # compiled file on Windows will have .dll extension instead of .so dyn.load(\"../supplements/desolve_mod/benchmark_mod.so\")  initialValues <- c(S = 999999, E1 = 1,                    E2 = 0, E = 0, I1=0,                     I2=0, I=0, R=0                    )  parameters <- c(R0 = 3.5, scale_I = 4, shape_I=2,                 scale_R = 3, shape_R = 2, N = 1e6)   deSolve_c_runs <- bench::mark(   # run model defined in C   ode(initialValues, times, func = \"derivs\", parms = parameters,   dllname = \"benchmark_mod\", initfunc = \"initmod\"),   iterations = total_runs )  dyn.unload(\"../supplements/desolve_mod/benchmark_mod.so\") deSolve_c_runs$time ## [[1]] ##  [1] 200µs 244µs 142µs 159µs 118µs 117µs 147µs 112µs 140µs 110µs 109µs 134µs ## [13] 109µs 135µs 115µs 115µs 131µs 112µs 132µs 112µs 115µs 148µs 114µs 139µs ## [25] 124µs 121µs 136µs 115µs 141µs 114µs 115µs 131µs 118µs 136µs 113µs 114µs ## [37] 135µs 114µs 134µs 117µs 115µs 141µs 118µs 135µs 115µs 122µs 141µs 114µs ## [49] 141µs 117µs"},{"path":"/articles/denim_benchmark.html","id":"model-in-fortran","dir":"Articles","previous_headings":"deSolve","what":"Model in Fortran","title":"denim benchmark","text":"Median run time deSolve, model defined Fortran: 1.7345051^{-4} seconds","code":"# compile model in fortran # system(\"R CMD SHLIB supplements/desolve_mod/benchmark_mod_fortran.f\")  dyn.load(\"../supplements/desolve_mod/benchmark_mod_fortran.so\")  initialValues <- c(S = 999999, E1 = 1,                    E2 = 0, E = 0, I1=0,                     I2=0, I=0, R=0                    )  parameters <- c(R0 = 3.5, scale_I = 4, shape_I=2,                 scale_R = 3, shape_R = 2, N = 1e6)   deSolve_fortran_runs <- bench::mark(   # run model defined in C   ode(initialValues, times, func = \"derivs\", parms = parameters,   dllname = \"benchmark_mod_fortran\", initfunc = \"initmod\"),   iterations = total_runs )  dyn.unload(\"../supplements/desolve_mod/benchmark_mod_fortran.so\") deSolve_fortran_runs$time ## [[1]] ##  [1] 368µs 197µs 222µs 184µs 177µs 197µs 171µs 193µs 170µs 177µs 192µs 168µs ## [13] 191µs 169µs 171µs 189µs 167µs 191µs 171µs 171µs 189µs 167µs 199µs 176µs ## [25] 170µs 189µs 170µs 190µs 167µs 169µs 188µs 168µs 186µs 169µs 167µs 186µs ## [37] 167µs 183µs 161µs 163µs 184µs 160µs 187µs 162µs 167µs 186µs 161µs 188µs ## [49] 160µs 163µs"},{"path":"/articles/denim_benchmark.html","id":"sec-odin","dir":"Articles","previous_headings":"","what":"odin","title":"denim benchmark","text":"also implement uSEIR model denim’s algorithm using odin package comparison Run model bench mark. Note process computing transition probability also included part benchmark fair comparison denim. Median run time odin: 0.3246013 seconds","code":"# ---- Install packages ----- # install.packages( #   \"odin2\", #   repos = c(\"https://mrc-ide.r-universe.dev\", \"https://cloud.r-project.org\")) # install.packages( #   \"dust2\", #   repos = c(\"https://mrc-ide.r-universe.dev\", \"https://cloud.r-project.org\")) library(odin2)  odin_mod <- odin2::odin(   {     # ----- Define algo to update compartments here ---------     update(S) <- S - dt * (R0/tr) * S * sum(I)/N      # --- E compartment ------     update(E[1]) <- dt * (R0/tr) * S * sum(I)/N     # starting from 2: to simulate individuals staying in E for another timestep     update(E[2:e_maxtime]) <- E[i-1]*(1-e_transprob[i-1])          # compute total population from E -> I     dim(E_to_I) <- e_maxtime     E_to_I[1:e_maxtime] <- e_transprob[i]*E[i]     sum_E_to_I <- sum(E_to_I)          # --- I compartment ------     update(I[1]) <- sum_E_to_I     update(I[2:i_maxtime]) <- I[i-1]*(1-i_transprob[i-1])          # compute total population from I -> R     dim(I_to_R) <- i_maxtime     I_to_R[1:i_maxtime] <- i_transprob[i]*I[i]     sum_I_to_R <- sum(I_to_R)      # --- R compartment ------     update(R) <- R + sum_I_to_R          # initialize population from input     initial(S) <- S_init     initial(E[]) <- E_init[i]     dim(E) <- e_maxtime     initial(I[]) <- I_init[i]     dim(I) <- i_maxtime     initial(R) <- R_init      # ----- Inputs -------     R0 <- parameter()     tr <- parameter()          # transition prob of E     e_transprob<- parameter()     e_maxtime <- parameter()     dim(e_transprob) <- e_maxtime          # transition prob of I     i_transprob <- parameter()     i_maxtime <- parameter()     dim(i_transprob) <- i_maxtime               # initial populations     S_init <- user()     E_init <- user()     dim(E_init) <- e_maxtime     I_init <- user()     dim(I_init) <- i_maxtime     R_init <- user()     N <- parameter(1000)   } ) ## Warning in odin2::odin({: Found 4 compatibility issues ## Replace calls to 'user()' with 'parameter()' ## ✖ S_init <- user() ## ✔ S_init <- parameter() ## ✖ E_init <- user() ## ✔ E_init <- parameter() ## ✖ I_init <- user() ## ✔ I_init <- parameter() ## ✖ R_init <- user() ## ✔ R_init <- parameter() ## ✔ Wrote 'DESCRIPTION' ## ✔ Wrote 'NAMESPACE' ## ✔ Wrote 'R/dust.R' ## ✔ Wrote 'src/dust.cpp' ## ✔ Wrote 'src/Makevars' ## ℹ 12 functions decorated with [[cpp11::register]] ## ✔ generated file cpp11.R ## ✔ generated file cpp11.cpp ## ℹ Re-compiling odin.system79e020ca ## ── R CMD INSTALL ─────────────────────────────────────────────────────────────── ## * installing *source* package ‘odin.system79e020ca’ ... ## ** using staged installation ## ** libs ## using C++ compiler: ‘Apple clang version 17.0.0 (clang-1700.0.13.3)’ ## using SDK: ‘NA’ ## clang++ -arch arm64 -std=gnu++17 -I\"/Library/Frameworks/R.framework/Resources/include\" -DNDEBUG -O2 -I'/Users/anhptq/Library/R/arm64/4.3/library/cpp11/include' -I'/Users/anhptq/Library/R/arm64/4.3/library/dust2/include' -I'/Users/anhptq/Library/R/arm64/4.3/library/monty/include' -I/opt/R/arm64/include   -DHAVE_INLINE   -fPIC  -isystem /Library/Developer/CommandLineTools/SDKs/MacOSX15.4.sdk/usr/include/c++/v1 -O2  -c cpp11.cpp -o cpp11.o ## clang++ -arch arm64 -std=gnu++17 -I\"/Library/Frameworks/R.framework/Resources/include\" -DNDEBUG -O2 -I'/Users/anhptq/Library/R/arm64/4.3/library/cpp11/include' -I'/Users/anhptq/Library/R/arm64/4.3/library/dust2/include' -I'/Users/anhptq/Library/R/arm64/4.3/library/monty/include' -I/opt/R/arm64/include   -DHAVE_INLINE   -fPIC  -isystem /Library/Developer/CommandLineTools/SDKs/MacOSX15.4.sdk/usr/include/c++/v1 -O2  -c dust.cpp -o dust.o ## clang++ -arch arm64 -std=gnu++17 -dynamiclib -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress -L/Library/Frameworks/R.framework/Resources/lib -L/Library/Developer/CommandLineTools/SDKs/MacOSX15.4.sdk/usr/lib -o odin.system79e020ca.so cpp11.o dust.o -F/Library/Frameworks/R.framework/.. -framework R -Wl,-framework -Wl,CoreFoundation ## ld: warning: -single_module is obsolete ## ld: warning: -multiply_defined is obsolete ## installing to /private/var/folders/rf/dwxhm19j1ws1mfmsvj9yfp140000gr/T/RtmpOyjPQe/devtools_install_2fe61bd96486/00LOCK-dust_2fe62c73c9dd/00new/odin.system79e020ca/libs ## ** checking absolute paths in shared objects and dynamic libraries ## * DONE (odin.system79e020ca) ## ℹ Loading odin.system79e020ca compute_transprob <- function(dist_func,..., timestep=0.05, error_tolerance=0.001){   maxtime <- timestep   prev_prob <- 0   transprob <- numeric()   cumulative_dist <- numeric()   prob_dist <- numeric()      while(TRUE){      # get current cumulative prob and check whether it is sufficiently close to 1      temp_prob <-  ifelse(        dist_func(maxtime, ...) < (1 - error_tolerance),         dist_func(maxtime, ...),         1);      cumulative_dist <- c(cumulative_dist, temp_prob)            # get f(t)      curr_prob <- temp_prob - prev_prob      prob_dist <- c(prob_dist, curr_prob)            # compute transprob      curr_transprob <- curr_prob/(1-prev_prob)      transprob <- c(transprob, curr_transprob)            prev_prob <- temp_prob      maxtime <- maxtime + timestep            if(temp_prob == 1){        break      }   }      data.frame(     prob_dist = prob_dist,     cumulative_dist = cumulative_dist,     transprob = transprob   ) } timeStep <- 0.01 errorTolerance <- 0.001  # ---- Get runtimes ---- odin_runs <- bench::mark(   {     # ---- Compute transprob -----      e_transprob <- compute_transprob(pgamma, rate=1/4, shape=2,                                       timestep = timeStep, error_tolerance = errorTolerance)$transprob     i_transprob <- compute_transprob(pgamma, rate=1/3, shape=2,                                       timestep = timeStep, error_tolerance = errorTolerance)$transprob          # ---- Run model and plot -----      # initialize params     odin_pars <- list(       R0 = 3.5,        tr = 3*2, # compute mean recovery time, for gamma it's scale*shape       N = 1e6,       e_transprob = e_transprob,       e_maxtime = length(e_transprob),       i_transprob = i_transprob,       i_maxtime = length(i_transprob),       S_init = 999999,        E_init = array( c(1, rep(0, length(e_transprob) - 1) ) ),       I_init = array( rep(0, length(i_transprob)) ),       R_init = 0     )          # run model     t_seq <- seq(0, sim_duration, 0.25)     odin_seir <- dust2::dust_system_create(odin_mod, odin_pars, dt = timeStep)     dust2::dust_system_set_state_initial(odin_seir)     out <- dust2::dust_system_simulate(odin_seir, t_seq)     out <- dust2::dust_unpack_state(odin_seir, out)   },   iterations = total_runs ) ## Warning: Some expressions had a GC in every iteration; so filtering is ## disabled. odin_out <- data.frame(   t = t_seq,   S = out$S,   E = colSums(out$E),   I = colSums(out$I),   R = out$R ) odin_runs$time ## [[1]] ##  [1] 428ms 421ms 315ms 411ms 326ms 333ms 430ms 331ms 409ms 325ms 316ms 324ms ## [13] 392ms 314ms 317ms 393ms 315ms 319ms 317ms 319ms 395ms 314ms 394ms 312ms ## [25] 334ms 319ms 384ms 318ms 388ms 319ms 329ms 315ms 386ms 315ms 320ms 384ms ## [37] 397ms 320ms 319ms 327ms 390ms 314ms 318ms 391ms 316ms 329ms 395ms 314ms ## [49] 324ms 316ms"},{"path":[]},{"path":"/articles/denim_benchmark.html","id":"parametric","dir":"Articles","previous_headings":"denim","what":"Parametric","title":"denim benchmark","text":"Run time denim implementation Median run time denim: 0.7830995 seconds","code":"timeStep <- 0.01 errorTolerance <- 0.001  library(denim)  denim_model <- denim_dsl({   S -> E = (R0/tr) * timeStep * S * (I/N) # formulate according that of uSEIR method   E -> I = d_gamma(rate = 1/4, shape = 2)   I -> R = d_gamma(rate = 1/3, shape = 2) })  initialValues <- c(S = 999999, E = 1, I= 0, R= 0) parameters <- c(R0 = 3.5,                  tr = 3*2, # compute mean recovery time, for gamma it's scale*shape                 N = 1e6)  # ---- Get runtimes ---- denim_runs <- bench::mark(   sim(     transitions = denim_model,     initialValues = initialValues,     parameters = parameters,     simulationDuration = sim_duration,     timeStep = timeStep,     errorTolerance = errorTolerance   ),    iterations = total_runs )   # ---- Get output ---- denim_out <- sim(transitions = denim_model,                       initialValues = initialValues,                      parameters = parameters,                      simulationDuration = sim_duration, timeStep = timeStep) denim_runs$time ## [[1]] ##  [1] 791ms 802ms 792ms 788ms 775ms 776ms 775ms 776ms 774ms 775ms 776ms 780ms ## [13] 783ms 792ms 797ms 788ms 790ms 797ms 790ms 788ms 784ms 770ms 768ms 771ms ## [25] 770ms 768ms 769ms 770ms 773ms 788ms 783ms 808ms 797ms 791ms 784ms 799ms ## [37] 793ms 768ms 770ms 773ms 770ms 768ms 771ms 770ms 780ms 792ms 784ms 790ms ## [49] 793ms 791ms"},{"path":"/articles/denim_benchmark.html","id":"nonparametric","dir":"Articles","previous_headings":"denim","what":"Nonparametric","title":"denim benchmark","text":"can also define SEIR model denim using function nonparametric() dwell-time distribution pre-computed using helper function Section @ref(sec-odin) Run time denim, using nonparametric() pre-computed distribution Median run time denim using nonparametric() pre-computed distribution: 1.235576 seconds. longer run time compared parametric approach due overhead interfacing large vectors (ei_dist ir_dist example) R C++.reason, recommended use nonparametric() observed distribution adequately represented one available parametric transitions.","code":"timeStep <- 0.01 errorTolerance <- 0.001  denim_nonparametric_model <- denim_dsl({   S -> E = (R0/tr) * timeStep * S * (I/N) # formulate according that of uSEIR method   E -> I = nonparametric(ei_dist) #ei_dist is considered a model parameter   I -> R = nonparametric(ir_dist) #ir_dist is also a model parameter })  initialValues2 <- c(S = 999999, E = 1, I= 0, R= 0)  ei_dist <- compute_transprob(pgamma, rate = 1/4, shape = 2,                               timestep = timeStep, error_tolerance = errorTolerance)$prob_dist ir_dist <- compute_transprob(pgamma, rate = 1/3, shape = 2,                               timestep = timeStep, error_tolerance = errorTolerance)$prob_dist  parameters2 <- list(R0 = 3.5,                  tr = 3*2, # compute mean recovery time, for gamma it's scale*shape                 N = 1e6,                 ei_dist = ei_dist,                  ir_dist = ir_dist)  # ---- Get runtimes ---- denim_nonparametric_runs <- bench::mark(   sim(transitions = denim_nonparametric_model,                      initialValues = initialValues2,                      parameters = parameters2,                      simulationDuration = sim_duration, timeStep = timeStep),   iterations = total_runs ) ## Warning: Some expressions had a GC in every iteration; so filtering is ## disabled. # ---- Get output ---- denim_nonparametric_out <- sim(transitions = denim_nonparametric_model,                       initialValues = initialValues2,                      parameters = parameters2,                      simulationDuration = sim_duration, timeStep = timeStep) denim_nonparametric_runs$time ## [[1]] ##  [1] 1.25s 1.24s 1.25s 1.22s 1.22s 1.25s 1.16s 1.24s 1.24s 1.26s 1.24s 1.25s ## [13] 1.24s 1.21s 1.13s 1.22s 1.22s 1.22s 1.25s 1.26s 1.24s 1.24s 1.14s 1.23s ## [25] 1.24s 1.24s 1.24s 1.22s 1.24s 1.23s 1.18s 1.25s 1.25s 1.24s 1.25s 1.27s ## [37] 1.22s 1.26s 1.17s 1.23s 1.24s 1.24s 1.25s 1.25s 1.23s 1.24s 1.15s 1.22s ## [49] 1.21s 1.22s"},{"path":[]},{"path":"/articles/denim_benchmark.html","id":"compare-run-time","dir":"Articles","previous_headings":"","what":"Compare run time","title":"denim benchmark","text":"following plot shows run time 50 runs (horizontal line showing median run time) approach.","code":""},{"path":"/articles/denim_benchmark.html","id":"run-time-scaling-in-denim","dir":"Articles","previous_headings":"","what":"Run time scaling in denim","title":"denim benchmark","text":"worth noting runtime denim also dependent duration time step (timeStep parameter sim). following plot demonstrates run time changes value timeStep changes, using model benchmarking. values timeStep evaluated [0.01, 0.02, 0.05, 0.1, 0.25, 0.5, 1].","code":""},{"path":"/articles/denim_dsl.html","id":"model-definition-in-denim","dir":"Articles","previous_headings":"","what":"Model definition in denim","title":"denim DSL","text":"denim, model defined set transitions compartments. transition provided form key-value pair, : key show transition direction 2 compartments. value expression describe transition, can math expression built-dwell-time distribution function. key-value pairs can provided 2 ways Using denim domain-specific language (DSL). Define list R.","code":""},{"path":"/articles/denim_dsl.html","id":"denim-dsl","dir":"Articles","previous_headings":"","what":"Denim DSL","title":"denim DSL","text":"denim, line code must transition. syntax defining transition denim DSL followed: compartment_A -> compartment_B = transition Model definition written denim DSL must parsed function denim_dsl() Math expression math expression, basic supported operators include: + addition, - minus, * multiplication, / division, ^ power. Users can also define additional model parameters math expression. Math expressions denim parsed using muparser. full list operators, visit muparser website https://beltoforion.de/en/muparser/features.php. Distribution functions Several built-functions provided describe transitions based distribution dwell time: parametric distributions: d_lognormal(), d_gamma(), d_weibull(), d_exponential() non-parametric distributions: nonparametric() functions accepts either fixed numeric values model parameters inputs distributional parameters. Note current version denim accept mathematical expression distribution’s parameters.","code":""},{"path":"/articles/denim_dsl.html","id":"define-a-classic-sir-model","dir":"Articles","previous_headings":"Denim DSL","what":"Define a classic SIR model","title":"denim DSL","text":"classic SIR model can defined denim followed variable right hand side (RHS) transitions definition (compartments) considered model parameters values must provided later . example, model parameters : N, beta, S, gamma. timeStep special variable denim automatically uses time step defined simulation configuration ’s value. Note special variable can used within math expression. Users can also choose provide fixed values distributional parameter followed Similar R, users can also add comments denim DSL starting comment # sign. Run model run model, users must provide: Values model parameters (example, N, beta, S gamma). Initial population compartments. Simulation configurations. Parameters initial values can defined named vectors named lists R. Simulation configurations provided parameters sim() function runs model, : timeStep duration time step model. simulationDuration duration run simulation.","code":"sir_model <- denim_dsl({   S -> I = beta * (I/N) * S * timeStep   I -> R = d_exponential(rate = gamma) }) sir_model <- denim_dsl({   S -> I = beta*(I/N)*S*timeStep   I -> R = d_exponential(rate = 1/4) }) sir_model <- denim_dsl({   # this is a comment   S -> I = beta*(I/N)*S*timeStep   I -> R = d_exponential(rate = 1/4) # this is another comment }) # parameters for the model parameters <- c(   beta = 0.4,   N = 1000,   gamma = 1/7 ) # initial population for each compartment  initValues <- c(   S = 999,    I = 50,   R = 0 ) mod <- sim(sir_model,      parameters = parameters,      initialValues = initValues,      timeStep = 0.01,     simulationDuration = 40) plot(mod, ylim = c(1, 1000))"},{"path":"/articles/denim_dsl.html","id":"time-varying-transition","dir":"Articles","previous_headings":"Denim DSL","what":"Time varying transition","title":"denim DSL","text":"Aside timeStep, denim also another special variable time time varying transition (e.g. modeling seasonality). Note variable can used within math expression. Example: time varying transition","code":"time_varying_mod <- denim_dsl({   A -> B = 20 * (1+cos(omega * time)) * timeStep })  # parameters for the model parameters <- c(   omega = 2*pi/10 ) # initial population for each compartment  initValues <- c(A = 1000, B = 0)  mod <- sim(time_varying_mod,      parameters = parameters,      initialValues = initValues,      timeStep = 0.01,     simulationDuration = 40)  plot(mod, ylim = c(0, 1000))"},{"path":"/articles/denim_dsl.html","id":"r-list","dir":"Articles","previous_headings":"","what":"R list","title":"denim DSL","text":"Users can also define model structure list R. example, SIR model previous example can represented followed. Note transitions (S -> , -> R), mathematical expression (beta * (/N) * S * timeStep), model parameter (gamma) must now provided strings. can run model manner previously demonstrated.  define model list R? denim DSL offers cleaner readable syntax define model structure, using R list may familiar R users better suited integration R-centric workflow. example, consider use case , explore model dynamics change three different -> R dwell time distributions (d_gamma, d_weibull, d_lognormal) using map2.","code":"sir_model_list <- list(   \"S -> I\" = \"beta * (I/N) * S * timeStep\",   \"I -> R\" = d_exponential(rate = \"gamma\") )  sir_model_list #> $`S -> I` #> [1] \"beta * (I/N) * S * timeStep\" #>  #> $`I -> R` #> Discretized exponential distribution #> Rate = gamma # parameters for the model parameters <- c(   beta = 0.4,   N = 1000,   gamma = 1/7 ) # initial population for each compartment  initValues <- c(   S = 999,    I = 50,   R = 0 ) # run the simulation mod <- sim(sir_model_list,      parameters = parameters,      initialValues = initValues,      timeStep = 0.01,     simulationDuration = 40) # plot output plot(mod, ylim = c(1, 1000)) library(tidyverse) #> Warning: package 'ggplot2' was built under R version 4.3.1 #> Warning: package 'tidyr' was built under R version 4.3.1 #> Warning: package 'readr' was built under R version 4.3.1 #> Warning: package 'purrr' was built under R version 4.3.3 #> Warning: package 'dplyr' was built under R version 4.3.1 #> Warning: package 'stringr' was built under R version 4.3.1 #> Warning: package 'lubridate' was built under R version 4.3.3 # configurations for 3 different I->R transitions model_config <- tibble(   IR_dists = c(d_gamma, d_weibull, d_lognormal),   IR_pars = list(c(rate = 0.1, shape = 3), c(scale = 5, shape = 0.3), c(mu = 0.3, sigma = 2)) )  model_config %>%    mutate(     plots = map2(IR_dists, IR_pars, \\(dist, par){       transitions <- list(         \"S -> I\" = \"beta * S * (I / N) * timeStep\",         # This is not applicable when using denim_dsl()         \"I -> R\" = do.call(dist, as.list(par))       )              # model settings       denimInitialValues <- c(S = 980, I = 20, R = 0)       parameters <- c(         beta = 0.4,         N = 1000       )              # compare output        mod <- sim(transitions = transitions,                   initialValues = denimInitialValues,                   parameters = parameters,                   simulationDuration = 60,                   timeStep = 0.05)              plot(mod, ylim = c(0,1000))     })   ) %>%    pull(plots) #> [[1]] #> [[1]]$rect #> [[1]]$rect$w #> [1] 8.5166 #>  #> [[1]]$rect$h #> [1] 324.2026 #>  #> [[1]]$rect$left #> [1] 53.8834 #>  #> [[1]]$rect$top #> [1] 662.1013 #>  #>  #> [[1]]$text #> [[1]]$text$x #> [1] 60.30808 60.30808 60.30808 #>  #> [[1]]$text$y #> [1] 581.0507 500.0000 418.9493 #>  #>  #>  #> [[2]] #> [[2]]$rect #> [[2]]$rect$w #> [1] 8.5166 #>  #> [[2]]$rect$h #> [1] 324.2026 #>  #> [[2]]$rect$left #> [1] 53.8834 #>  #> [[2]]$rect$top #> [1] 662.1013 #>  #>  #> [[2]]$text #> [[2]]$text$x #> [1] 60.30808 60.30808 60.30808 #>  #> [[2]]$text$y #> [1] 581.0507 500.0000 418.9493 #>  #>  #>  #> [[3]] #> [[3]]$rect #> [[3]]$rect$w #> [1] 8.5166 #>  #> [[3]]$rect$h #> [1] 324.2026 #>  #> [[3]]$rect$left #> [1] 53.8834 #>  #> [[3]]$rect$top #> [1] 662.1013 #>  #>  #> [[3]]$text #> [[3]]$text$x #> [1] 60.30808 60.30808 60.30808 #>  #> [[3]]$text$y #> [1] 581.0507 500.0000 418.9493"},{"path":"/articles/denim_vs_deSolve.html","id":"comparison-between-desolve-and-denim","dir":"Articles","previous_headings":"","what":"Comparison between deSolve and denim","title":"denim vs deSolve","text":"","code":"library(denim) library(deSolve) ## Warning: package 'deSolve' was built under R version 4.3.1 # --- Timestep definition simulationDuration <- 300  timestep <- 0.01 # small timestep required for comparison  # --- Transition def for denim transitions <- list(   # note that timeStep uses the timeStep parameter in denim::sim()    \"S -> I\" = \"beta * S * (I/N) * timeStep\",   \"I -> R\" = d_gamma(rate = 1/3, shape = 2) ) parameters <- c(beta = 0.2, rate = 1/3, shape=2, N=1000)  initialValues <- c(S = 999, I = 1, I1 = 1, I2=0, R=0)  # --- Transition def for deSolve transition_func <- function(t, state, param){   with(as.list( c(state, param) ), {        dS = - beta * S * I/N       # apply linear chain trick       dI1 = beta * S * I/N - rate*I1       dI2 = rate*I1 - rate*I2       dI =  dI1 + dI2       dR = rate*I2       list(c(dS, dI, dI1, dI2, dR))   }) }"},{"path":"/articles/denim_vs_deSolve.html","id":"run-simulation-with-denim","dir":"Articles","previous_headings":"Comparison between deSolve and denim","what":"Run simulation with denim","title":"denim vs deSolve","text":"","code":"denim_runtime <- bench::mark(   sim(transitions = transitions, initialValues = initialValues, parameters, simulationDuration = simulationDuration, timeStep = timestep),   iterations = 1 ) denim_runtime <- as.numeric(denim_runtime$total_time)  mod <- sim(transitions = transitions, initialValues = initialValues, parameters, simulationDuration = simulationDuration, timeStep = timestep) # --- show output head(mod[mod$Time %in% 1:simulationDuration,]) ##     Time        S        I          R ## 101    1 998.7825 1.169597 0.04786644 ## 201    2 998.5358 1.296591 0.16756473 ## 301    3 998.2665 1.399083 0.33440701 ## 401    4 997.9783 1.487980 0.53374794 ## 501    5 997.6732 1.569868 0.75697598 ## 601    6 997.3521 1.648745 0.99910771"},{"path":"/articles/denim_vs_deSolve.html","id":"run-simulation-with-desolve","dir":"Articles","previous_headings":"Comparison between deSolve and denim","what":"Run simulation with deSolve","title":"denim vs deSolve","text":"","code":"times <- seq(0, simulationDuration, timestep)  desolve_runtime <- bench::mark(   ode(y = initialValues, times = times, parms = parameters, func = transition_func),   iterations = 1 ) ## Warning: Some expressions had a GC in every iteration; so filtering is ## disabled. desolve_runtime <- as.numeric(desolve_runtime$total_time)  ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)  # --- show output ode_mod <- as.data.frame(ode_mod) head(ode_mod[ode_mod$time %in% 1:simulationDuration, c(\"time\", \"S\", \"I\", \"R\")]) ##     time        S        I         R ## 101    1 998.7824 1.169731 0.0479167 ## 201    2 998.5355 1.296752 0.1677463 ## 301    3 998.2660 1.399189 0.3347737 ## 401    4 997.9777 1.487967 0.5343309 ## 501    5 997.6725 1.569688 0.7577887 ## 601    6 997.3515 1.648357 1.0001499"},{"path":"/articles/denim_vs_deSolve.html","id":"execution-time-comparison","dir":"Articles","previous_headings":"Comparison between deSolve and denim","what":"Execution time comparison","title":"denim vs deSolve","text":"denim takes approximately 71.18 times long deSolve compute result given specifications . significant difference can attributed difference approaches: deSolve solves system ODEs denim iterates timestep updates population compartment approach denim allow flexibility types dwell time distributions, computation time scales exponentially timestep grows smaller.","code":""},{"path":"/articles/denim_vs_deSolve.html","id":"plot-the-result","dir":"Articles","previous_headings":"","what":"Plot the result","title":"denim vs deSolve","text":"","code":"# increase timestep before plotting mod <- mod[mod$Time %in% seq(0, simulationDuration, 0.2),] ode_mod <- ode_mod[ode_mod$time %in% seq(0, simulationDuration, 0.2),]"},{"path":[]},{"path":"/articles/denim_vs_deSolve.html","id":"implementation-using-desolve","dir":"Articles","previous_headings":"Comparison with SEIR model","what":"Implementation using deSolve","title":"denim vs deSolve","text":"","code":"library(deSolve) parameters <- c(gamma_rate_I = 1/4, shape_I=2,                 gamma_rate_R = 1/3, shape_R = 2,                 R0 = 3.5, N = 1e6)  initialValues <- c(S = 999999, E1 = 1,                    E2 = 0, E = 0, I1=0,                     I2=0, I=0, R=0                    )  # --- Transition def for deSolve transition_func <- function(t, state, param){   with(as.list( c(state, param) ), {              tr = (1/gamma_rate_R)*shape_R              dS = - (R0/tr) * S * I/N       # apply linear chain trick       dE1 = (R0/tr) * S * I/N - gamma_rate_I*E1       dE2 = gamma_rate_I*E1 - gamma_rate_I*E2       dE = dE1 + dE2       dI1 = gamma_rate_I*E2 - gamma_rate_R*I1       dI2 = gamma_rate_R*I1 - gamma_rate_R*I2       dI =  dI1 + dI2        dR = gamma_rate_R*I2       list(c(dS, dE1, dE2, dE, dI1, dI2, dI, dR))   }) }  times <- seq(0, 210, 1)  ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)  # --- show output ode_mod <- as.data.frame(ode_mod)"},{"path":"/articles/denim_vs_deSolve.html","id":"implementation-using-denim","dir":"Articles","previous_headings":"Comparison with SEIR model","what":"Implementation using denim","title":"denim vs deSolve","text":"","code":"denim_model <- list(   \"S -> E\" = \"(R0/tr) * timeStep * S * (I/N)\", # formulate according that of uSEIR method   \"E -> I\" = d_gamma(rate = 1/4, shape = 2),   \"I -> R\" = d_gamma(rate = 1/3, shape = 2) )  initialValues <- c(S = 999999, E = 1, I= 0, R= 0) parameters <- c(R0 = 3.5,                  tr = 3*2, # compute mean recovery time, for gamma it's scale*shape                 N = 1e6, timeStepDur = 0.01)  mod <- sim(transitions = denim_model,                       initialValues = initialValues,                      parameters = parameters,                      simulationDuration = 210, timeStep = 0.01)  # denim_out[, c(\"S\",\"E\", \"I\", \"R\")] <- denim_out[, c(\"S\",\"E\", \"I\", \"R\")]/1e6 plot(mod)"},{"path":[]},{"path":"/articles/denim_vs_uSEIR.html","id":"useir-defined-in-python","dir":"Articles","previous_headings":"","what":"uSEIR defined in Python","title":"denim vs uSEIR","text":"Source code: https://github.com/jjgomezcadenas/useirn/blob/master/nb/uSEIR.ipynb","code":"library(reticulate) ## Warning: package 'reticulate' was built under R version 4.3.1 # use_python(\"/opt/anaconda3/envs/bnn/bin/python\", required = TRUE) use_condaenv(condaenv='bnn', required = TRUE) matplotlib <- import(\"matplotlib\") matplotlib$use(\"Agg\", force = TRUE) from scipy.stats import gamma import matplotlib import matplotlib.pyplot as plt matplotlib.use('Agg') from matplotlib.pyplot import imshow plt.rcParams[\"figure.figsize\"] = 10, 8 plt.rcParams[\"font.size\"     ] = 14 plt.rcParams['savefig.format'] = 'png' import numpy as np import pandas as pd import pyarrow as pa  def plot_useir(dfs, lbls, T = 'uSEIR', figsize=(10,10)):          fig = plt.figure(figsize=figsize)          ax=plt.subplot(1,2,1)     for i, df in enumerate(dfs):         df.head()         ls = f'S-{lbls[i]}'         lr = f'R-{lbls[i]}'         plt.plot(df.t, df.S, lw=2, label=ls)         plt.plot(df.t, df.R, lw=2, label=lr)      plt.xlabel('time (days)')     plt.ylabel('Fraction of population')     plt.legend()     plt.title(T)          ax=plt.subplot(1,2,2)     for i, df in enumerate(dfs):         le = f'E-{lbls[i]}'         li = f'I-{lbls[i]}'         plt.plot(df.t, df.E, lw=2, label=le)         plt.plot(df.t, df.I, lw=2, label=li)      plt.xlabel('time (days)')     plt.ylabel('Fraction of population')     plt.legend()          plt.title(T)     plt.tight_layout()     plt.show()  def solve_uSeir(ti_shape     = 5.5,                      ti_scale     = 1,                     tr_shape     = 6.5,                      tr_scale     = 1,                    R0           = 3.5):     \"\"\"     The pure python version only uses the gamma distribution and fine grain.     It's sole purpose is benchmarking the cython version     \"\"\"          # This function is similar to calcTransitionProb in denim     def compute_gamma_pde(t_shape, t_scale, eps, tol):         # compute dwell time steps unit         ne = int(gamma.ppf(tol, a=t_shape, scale=t_scale) / eps)         # transition rate per timestep          pdE = np.zeros(ne)         cd1 = 0         for i in np.arange(ne):             # equivalent to computing sum(pi_i) in denim             cd2    = gamma.cdf(i*eps, a=t_shape, scale=t_scale)             pdE[i] = cd2-cd1 # equivalent compute current transition prob in denim             cd1    = cd2                  # return values         # ne: equivalent of dwell time in time steps         # pdE: equivalent to p_i in denim paper         return ne, pdE      N       = 1e+6     Smin    = 1e-10      Emin    = 1e-10     nmax    = 21000 # max time steps     eps     = 0.01     tr = tr_shape*tr_scale     prob    = R0 / tr      pn      = prob * eps     tol     = 0.9999 # similar to the error tolerance in denim      nE, pdE = compute_gamma_pde(ti_shape, ti_scale, eps, tol)     nI, pdI = compute_gamma_pde(tr_shape, tr_scale, eps, tol)      print(f' Function solve_uSeir: time epsilon = {eps}')     print(f' statistical distribution is Gamma , ti = {ti_shape*ti_scale}, tr = {tr_shape*tr_scale}')     print(f' number of exposed compartments = {nE}, infected compartments = {nI}')     print(f' R0 = {R0}, prob = {prob}, pn = {pn}')           I   = np.zeros(nI)     E   = np.zeros(nE)     S    = 1 - 1/N     E[0] = 1 / N          R    = 0     sI   = 0      TT = []     SS = []     EE = []     II = []     RR = []     n    = 0          while True:                  # update R compartment           # I[0] here is equivalent to population that will move to R at t + 0 (i.e. current time step)          R += I[0]          # ----- Simulate for S-I first -----         end = nI - 1 # compute dwell time         # update population for I_k where I_k is the population that will move to R at time t + k (in time step)         for k in np.arange(end):             I[k] = I[k+1] + pdI[k] * E[0]              # pdI[k] * E[0] is just contact rate             # where I[k+1] is value computed from previous timestep (i.e. shift I[k+1] from old iteration to I[k] in current iteration)         I[end] = pdI[end] * E[0]                  #print(I)          # ----- Simulate I-E transition -----         end = nE - 1         for k in np.arange(end):             E[k] = E[k+1] + pn * pdE[k] * sI * S         E[end]   = pn * pdE[end] * sI * S          #print(E)                  # pn * sI * S equivalent to probs * epsilon * S * I/N         S  = S - pn * sI * S                  sI = np.sum(I)         sE = np.sum(E)                  #print(sI)         #print(sE)         TT.append(n * eps)         SS.append(S)         EE.append(sE)         II.append(sI)         RR.append(R)                  #print(f't = {n*eps} S = {S} E ={sE} I ={sI} R = {R}')         n+=1         if (sE < Smin and sI < Emin) or n > nmax:             break          df = pd.DataFrame(list(zip(TT, SS, EE, II, RR)),                 columns =['t', 'S', 'E', 'I', 'R'])           return df  # print(plt.gcf().canvas.get_supported_filetypes())"},{"path":"/articles/denim_vs_uSEIR.html","id":"run-simulation-using-pure-python-implementation","dir":"Articles","previous_headings":"uSEIR defined in Python","what":"Run simulation using pure Python implementation","title":"denim vs uSEIR","text":"Run time pure Python implementation ~ 59.9872","code":"import time from statistics import mean  runs = []  # --- Get runtime for 10 runs ---- # for i in range(10): #   start = time.time() #   df = solve_uSeir(ti_shape     = 2, #                      ti_scale     = 4, #                      tr_shape     = 2, #                      tr_scale     = 3, #                      R0           = 3.5) #   end = time.time() #   runs = runs + [end - start] #   mean(runs)    # plot_useir((df,), ('G',), T = 'uSEIR', figsize=(14,8)) # print(f'python solve_seir call: dr = {end-start}')"},{"path":"/articles/denim_vs_uSEIR.html","id":"run-simulation-using-cython-implementation","dir":"Articles","previous_headings":"uSEIR defined in Python","what":"Run simulation using cython implementation","title":"denim vs uSEIR","text":"Run time Cython implementation ~ 0.4140","code":"# import precompiled cython module import sys sys.path.insert(0, \"../supplements\") import useir import time  runs = [] # --- Get runtime for 10 runs ---- # for i in range(10): #   start = time.time() #   df = useir.csolve_uSeir(dist = \"gamma\", #                     ti_shape     = 2,   #                      ti_scale     = 4,  #                      tr_shape     = 2,   #                      tr_scale     = 3, #                      R0           = 3.5 #   ) #   end = time.time() #  #   runs = runs + [end - start] # mean(runs)  df = useir.csolve_uSeir(dist = \"gamma\",                     ti_shape     = 2,                        ti_scale     = 4,                       tr_shape     = 2,                        tr_scale     = 3,                      R0           = 3.5   ) ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 # convert to pyarrow table for easy conversion to R data.frames to_r_df = pa.Table.from_pandas(df)"},{"path":"/articles/denim_vs_uSEIR.html","id":"run-simulation-using-denim","dir":"Articles","previous_headings":"uSEIR defined in Python","what":"Run simulation using denim","title":"denim vs uSEIR","text":"Run time denim implementation ~ 1.002","code":"library(denim)  denim_model <- list(   \"S -> E\" = \"(R0/tr) * timeStepDur * S * (I/N)\", # formulate according that of uSEIR method   \"E -> I\" = d_gamma(scale = 4, shape = 2),   \"I -> R\" = d_gamma(scale = 3, shape = 2) )   initialValues <- c(S = 999999, E = 1, I= 0, R= 0) parameters <- c(R0 = 3.5,                  tr = 3*2, # compute mean recovery time, for gamma it's scale*shape                 N = 1e6, timeStepDur = 0.01)  # ---- Get runtimes of 10 runs ---- # runtimes <- sapply(1:10, #   function (i) { #     time <- system.time( #       sim(transitions = denim_model,  #                      initialValues = initialValues, #                      parameters = parameters, #                      simulationDuration = 210, timeStep = 0.01) #     ) #     return(time[[\"elapsed\"]]) #   }) #  # mean(runtimes)  # ---- Get output ---- denim_out <- sim(transitions = denim_model,                       initialValues = initialValues,                      parameters = parameters,                      simulationDuration = 210, timeStep = 0.01) ## Warning: package 'arrow' was built under R version 4.3.3 ##  ## Attaching package: 'arrow' ## The following object is masked from 'package:utils': ##  ##     timestamp"},{"path":"/articles/multinomial.html","id":"transition-to-multiple-states-in-denim","dir":"Articles","previous_headings":"","what":"1. Transition to multiple states in denim","title":"transition to multiple states","text":"Modelers may encounter many situations individuals can transition one compartment multiple others, SIRD model. 2 main approaches handle : Model transitions competing risks Model multinomial transition (outgoing population split fixed proportion transition new compartments). denim allows users model situations, requiring minimal change code base switch 2 methods modeling.","code":""},{"path":[]},{"path":"/articles/multinomial.html","id":"model-definition","dir":"Articles","previous_headings":"2. Multinomial in denim","what":"2.1. Model definition","title":"transition to multiple states","text":"specify proportion goes outgoing compartment, define transition using following syntax model definition: proportion * compartment ->  out_compartment = [transition] Note proportion proportion compartment end out_compartment equilibrium. Example: SIRD model 90% infected can recover remaining 10% die. \\[ \\begin{cases} dS = -\\beta S \\frac{}{N} \\\\ dIR_1 = 0.9 *\\beta S \\frac{}{N} -\\frac{1}{3}IR_1 \\\\ dIR_2 = \\frac{1}{3}IR_1 - \\frac{1}{3}IR_2 \\\\ = 0.1*\\beta S \\frac{}{N} - 0.1*ID \\\\ dR = \\frac{1}{3}IR_2 \\\\ dD = 0.1*ID \\end{cases} \\]","code":"transitions <- denim_dsl({   S -> I = beta * S * (I / N) * timeStep   0.9 * I -> R = d_gamma(1/3, 2)   0.1 * I -> D = d_exponential(0.1) })"},{"path":"/articles/multinomial.html","id":"proportion-normalization","dir":"Articles","previous_headings":"2. Multinomial in denim > 2.1. Model definition","what":"Proportion normalization","title":"transition to multiple states","text":"denim automatically normalize proportions don’t sum 1. Example 2: following model definition equivalent one Example 1","code":"transitions <- denim_dsl({   S -> I = beta * S * (I / N) * timeStep   36 * I -> R = d_gamma(1/3, 2)   4 * I -> D = d_exponential(0.1) })"},{"path":"/articles/multinomial.html","id":"example-model","dir":"Articles","previous_headings":"2. Multinomial in denim","what":"2.2. Example model","title":"transition to multiple states","text":"demonstrate implementation multinomial denim, provide equivalent model implemented deSolve compare output 2 implementations.","code":""},{"path":"/articles/multinomial.html","id":"model-definition-in-denim","dir":"Articles","previous_headings":"2. Multinomial in denim > 2.2. Example model","what":"Model definition in denim","title":"transition to multiple states","text":"","code":"# model in denim transitions <- denim_dsl({   S -> I = beta * S * (I / N) * timeStep   0.9 * I -> R = d_gamma(1/3, 2)   0.1 * I -> D = d_exponential(0.1) })  denimInitialValues <- c(   S = 999,    I = 1,    R = 0,   D = 0 )"},{"path":"/articles/multinomial.html","id":"equivalent-model-definition-in-desolve","dir":"Articles","previous_headings":"2. Multinomial in denim > 2.2. Example model","what":"Equivalent model definition in deSolve","title":"transition to multiple states","text":"","code":"# model in deSolve transition_func <- function(t, state, param){   with(as.list( c(state, param) ), {        dS = - beta * S * (IR1 + IR2 + ID)/N       # apply linear chain trick for I -> R transition       # 0.9 * to specify prop of I that goes to I->R transition       dIR1 = 0.9 * beta * S * (IR1 + IR2 + ID)/N - rate*IR1       dIR2 = rate*IR1 - rate*IR2       dR = rate*IR2               # handle I -> D transition       # 0.1 * to specify prop of I that goes to I->D transition       dID = 0.1 * beta * S * (IR1 + IR2 + ID)/N - exp_rate*ID       dD = exp_rate*ID       list(c(dS, dIR1, dIR2, dID, dR, dD))   }) }  desolveInitialValues <- c(   S = 999,    # note that internally, denim also allocate initial value based on specified proportion   IR1 = 0.9,   IR2 = 0,   ID = 0.1,    R = 0,   D = 0 )"},{"path":"/articles/multinomial.html","id":"run-simulation-and-compare","dir":"Articles","previous_headings":"2. Multinomial in denim > 2.2. Example model","what":"Run simulation and compare","title":"transition to multiple states","text":"Output Comparison","code":"parameters <- c(   beta = 0.2,   N = 1000,   rate = 1/3,   exp_rate = 0.1 )  simulationDuration <- 200 timeStep <- 0.05 # --- run denim model ----  mod <- sim(transitions = transitions,             initialValues = denimInitialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep)  # run deSolve model times <- seq(0, simulationDuration) ode_mod <- ode(y = desolveInitialValues, times = times, parms = parameters, func = transition_func)  ode_mod <- as.data.frame(ode_mod) ode_mod$I<- rowSums(ode_mod[, c(\"IR1\", \"IR2\", \"ID\")])"},{"path":[]},{"path":"/articles/multinomial.html","id":"model-definition-1","dir":"Articles","previous_headings":"3. Competing risks in denim","what":"3.1. Model definition","title":"transition to multiple states","text":"multiple transitions one compartment proportions specified, denim automatically treat transitions competing risks. Example: following model definition treat ->R ->D competing risks.","code":"transitions <- denim_dsl({   S -> I = beta * S * (I / N) * timeStep   I -> R = d_gamma(rate = 1/3, shape = 2)   I -> D = d_gamma(rate = 1/4, shape = 2) })"},{"path":"/articles/multinomial.html","id":"example-model-1","dir":"Articles","previous_headings":"3. Competing risks in denim","what":"3.2. Example model","title":"transition to multiple states","text":"demonstrate implementation competing risks denim, provide equivalent model implemented deSolve compare output 2 implementations.","code":""},{"path":"/articles/multinomial.html","id":"model-definition-in-denim-1","dir":"Articles","previous_headings":"3. Competing risks in denim > 3.2. Example model","what":"Model definition in denim","title":"transition to multiple states","text":"","code":"transitions <- denim_dsl({   S -> I = beta * S * (I / N) * timeStep   I -> R = d_gamma(rate = 1/3, shape = 2)   I -> D = d_gamma(rate = 1/4, shape = 2) })  denimInitialValues <- c(   S = 950,    I = 50,    R = 0,    D = 0 )"},{"path":"/articles/multinomial.html","id":"equivalent-model-definition-in-desolve-1","dir":"Articles","previous_headings":"3. Competing risks in denim > 3.2. Example model","what":"Equivalent model definition in deSolve","title":"transition to multiple states","text":"","code":"transition_func <- function(t, state, param){   with(as.list( c(state, param) ), {     dS = - beta * S * (I1 + I2 + IR + ID)/N      dI1 = beta * S * (I1 + I2 + IR + ID)/N - (rate+d_rate)*I1      dIR = rate*I1 - (d_rate + rate)*IR     dID = d_rate*I1 - (d_rate + rate)*ID      dI2 = d_rate*IR + rate*ID - (d_rate + rate)*I2      dR = rate*IR + rate*I2     dD = d_rate*ID + d_rate*I2      list(c(dS, dI1, dIR, dID, dI2, dR, dD))   }) }  desolveInitialValues <- c(   S = 950,    I1 = 50,   IR = 0,   ID = 0,   I2 = 0,   R = 0,   D = 0 )"},{"path":"/articles/multinomial.html","id":"run-simulation-and-compare-1","dir":"Articles","previous_headings":"3. Competing risks in denim > 3.2. Example model","what":"Run simulation and compare","title":"transition to multiple states","text":"","code":"parameters <- c(   beta = 0.2,   N = 1000,   rate = 1/3,   d_rate = 1/4 )  simulationDuration <- 50 timeStep <- 0.05 # run denim model mod <- sim(transitions = transitions,             initialValues = denimInitialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep)  # run deSolve model times <- seq(0, simulationDuration) ode_mod <- ode(y = desolveInitialValues, times = times, parms = parameters, func = transition_func)  ode_mod <- as.data.frame(ode_mod) ode_mod$I <- rowSums(ode_mod[,c(\"I1\", \"ID\", \"IR\", \"I2\")])"},{"path":"/articles/nonparametric.html","id":"non-parametric-vs-parametric","dir":"Articles","previous_headings":"","what":"Non-parametric vs parametric","title":"nonparametric distribution","text":"denim, users 2 options define dwell-time distribution: parametric distribution: using d_*() functions. non-parametric distribution: using nonparametric() function user must provide histogram distribution bin-width matches timeStep.","code":""},{"path":"/articles/nonparametric.html","id":"example-1","dir":"Articles","previous_headings":"Non-parametric vs parametric","what":"Example 1","title":"nonparametric distribution","text":"demonstrate difference 2 approaches, can try modeling SIR model Weibull distributed infectious period using nonparametric() d_weibull(). Model definition using d_weibull() Model parameters must defined : beta, N, r_scale, r_shape Model definition using nonparametric() Model parameters must defined : beta, N, dwelltime_dist (discrete dwell time distribution) Run model run models following model settings Running model d_weibull() straight forward  However, run model using nonparametric(), first need compute discrete dwell time distribution (dwelltime_dist). Since parametric distributions asymptotic 1, set maximal dwell time time point cumulative probability sufficiently close 1 (.e. threshold 1 - error_tolerance). helper function compute discrete dwell time distribution distribution function R provided . can run model followed","code":"sir_parametric <- denim_dsl({   S -> I = beta * (I/N) * S * timeStep   I -> R = d_weibull(scale = r_scale, shape = r_shape) }) sir_nonparametric <- denim_dsl({   S -> I = beta * (I/N) * S * timeStep   I -> R = nonparametric(dwelltime_dist) }) # parameters mod_params <- list(   beta = 0.4,   N = 1000,   r_scale = 4,   r_shape = 3 ) # initial population init_vals <- c(S = 950, I = 50, R = 0) # simulation duration and timestep sim_duration <- 30 timestep <- 0.05 parametric_mod <- sim(sir_parametric,     initialValues = init_vals,     parameters = mod_params,     simulationDuration = sim_duration,     timeStep = timestep)   plot(parametric_mod, ylim = c(0, 1000)) # Compute discrete distribution of dwell-tinme # dist_func - R distribution function for dwell time (pexp, pgamma, etc.) # ... - parameters for dist_func compute_dist <- function(dist_func,..., timestep=0.05, error_tolerance=0.0001){   maxtime <- timestep   prev_prob <- 0   prob_dist <- numeric()      while(TRUE){      # get current cumulative prob and check whether it is sufficiently close to 1      temp_prob <-  ifelse(        dist_func(maxtime, ...) < (1 - error_tolerance),         dist_func(maxtime, ...),         1);       # get f(t)      curr_prob <- temp_prob - prev_prob      prob_dist <- c(prob_dist, curr_prob)            prev_prob <- temp_prob      maxtime <- maxtime + timestep            if(temp_prob == 1){        break      }   }      prob_dist } # Compute the discrete distribution dwelltime_dist <- compute_dist(pweibull,                                 scale = mod_params$r_scale, shape = mod_params$r_shape,                                timestep = timestep)  # Compute the discrete distribution nonparametric_mod <- sim(sir_nonparametric,     initialValues = init_vals,     parameters = list(       beta = mod_params$beta,       N = mod_params$N,       dwelltime_dist = dwelltime_dist     ),     simulationDuration = sim_duration,     timeStep = timestep)  plot(nonparametric_mod, ylim = c(0, 1000))"},{"path":"/articles/nonparametric.html","id":"example-2","dir":"Articles","previous_headings":"Non-parametric vs parametric","what":"Example 2","title":"nonparametric distribution","text":"using nonparametric(), can run model dwell time distribution shape Consider following multimodal distribution.  can also run sir_nonparametric model last example dwell time distribution","code":"timestep <- 0.05 plot(seq(0, by = 0.05, length.out = length(multimodal_dist)),       multimodal_dist,       type = \"l\", col = \"#374F77\", lty = 1, lwd = 3,      xlab = \"Length of stay (days)\", ylab = \"\", yaxt = 'n') # model parameter parameters <- list(beta = 0.4, N = 1000,                    dwelltime_dist = multimodal_dist) # initial population init_vals <- c(S = 950, I = 50, R = 0) # simulation duration and timestep sim_duration <- 30 timestep <- 0.05  # Run the model with multimodel distribution nonparametric_mod <- sim(   sir_nonparametric,   initialValues = init_vals,   parameters = parameters,   simulationDuration = sim_duration,   timeStep = timestep)  plot(nonparametric_mod, ylim = c(0, 1000))"},{"path":"/articles/web_only/denim.html","id":"simple-sir-model-with-gamma-distributed-lengths-of-stay","dir":"Articles > Web_only","previous_headings":"","what":"1. Simple SIR model with gamma distributed lengths of stay","title":"denim: deterministic discrete-time model with memory","text":"SIR model uses 3 compartments: S (susceptible), (infected), R (recovered) describe clinical status individuals. use simple form SIR model demonstrate define distribution lengths stay distribution. model equations : \\[S_{t+1} - S_{t} = -\\lambda S_{t} = -\\frac{\\beta I_{t}}{N}S_{t}\\] \\[I_{t+1} - I_{t} = \\frac{\\beta I_{t}}{N}S_{t} - \\gamma I_{t}\\] \\[R_{t+1} - R_{t} = \\gamma I_{t}\\] \\(N\\): total population size, \\(N = S + + R\\) \\(\\beta\\): product contact rates transmission probability; usually define \\(\\lambda =\\frac{\\beta I_{t}}{N}\\) force infection \\(\\gamma\\): recovery rate Usually solve model easier make assumption recovery rate \\(\\gamma\\) constant, leads exponentially distributed length stay .e individuals recover 1 day infected.  realistic length stay distribution can look like , patients recovered 4 days. defined using gamma distribution shape = 3 scale = 2.  model now look like : Model specification Model transition two transitions S -> -> R case. transitions specified list follow format \"transition\" = equation, equation defined one functions waiting time distribution. Initial state Use vector define compartments assigned names initial values format compartment_name = initial_value: Model parameters use math expression, symbols except compartment names parameters, defined constant values. two constant parameters example: beta N: Model application Time step specification run model 30 days give output 0.01 daily intervals. default interval (time step) 1 declared explicitly.","code":"transitions <- list(   \"S -> I\" = \"beta * S * I / N\",   \"I -> R\" = d_gamma(3, 2) ) initialValues <- c(   S = 999,    I = 1,    R = 0 ) parameters <- c(   beta = 0.012,   N = 1000 ) simulationDuration <- 30 timeStep <- 0.01 mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep) head(mod) #>   Time        S        I            R #> 1 0.00 999.0000 1.000000 0.000000e+00 #> 2 0.01 998.9880 1.011982 5.543225e-06 #> 3 0.02 998.9759 1.024097 2.219016e-05 #> 4 0.03 998.9636 1.036346 5.000038e-05 #> 5 0.04 998.9512 1.048730 8.903457e-05 #> 6 0.05 998.9386 1.061252 1.393545e-04 plot(mod)"},{"path":"/articles/web_only/denim.html","id":"how-the-algorithm-work","dir":"Articles > Web_only","previous_headings":"","what":"2. How the algorithm work?","title":"denim: deterministic discrete-time model with memory","text":"SIR model, infected individuals presented single compartment recovery rate \\(\\gamma\\). want recovery rate individuals infected 1 day differ recovery rate 2-day infected patients. rather using one compartment infected (), define multiple infected sub-compartments. number sub-compartments depends maximum day expect infected individuals recovered. example, expect disease maximum 4 days infection, end 4 sub-compartments. sub-compartment recovery rate \\(\\gamma_{1}\\), \\(\\gamma_{2}\\), \\(\\gamma_{3}\\), \\(\\gamma_{4}\\). day 4 certain patient recover (assume disease maximum 4 days infection), \\(\\gamma_{4} = 1\\). Let \\(R_1 + R_2 + R_3 + R_4 = \\Sigma R\\). \\(\\frac{R_1}{\\Sigma R} = p_1\\), \\(\\frac{R_2}{\\Sigma R} = p_2\\), \\(\\frac{R_3}{\\Sigma R} = p_3\\), \\(\\frac{R_4}{\\Sigma R} = p_4\\). mission estimate \\(\\gamma_{1}\\), \\(\\gamma_{2}\\), \\(\\gamma_{3}\\) obtain \\(p_1\\), \\(p_2\\), \\(p_3\\), \\(p_4\\) fit pre-defined distribution equilibrium state. can obtained setting: \\[\\gamma_{} = \\frac{p_i}{1 - \\sum_{j=1}^{-1}p_j}\\] given length stay distribution, identify maximum length stay using cumulative distribution function. cumulative distribution function asymptotic 1 never equal 1, need set value acceptable rounded 1. want cumulative probability 0.999 rounded 1, set error tolerance threshold 1 - 0.999 = 0.001 (specified argument errorTolerance = 0.001). time cumulative probability = 0.999 set maximum length stay compartment. Default errorTolerance denim set 0.001.","code":""},{"path":"/articles/web_only/denim.html","id":"waiting-time-distribution","dir":"Articles > Web_only","previous_headings":"","what":"3. Waiting time distribution","title":"denim: deterministic discrete-time model with memory","text":"Current available distribution package including: d_exponential(rate): Discrete exponential distribution parameter rate d_gamma(scale, shape): Discrete gamma distribution parameters scale shape d_weibull(scale, shape): Discrete Weibull distribution parameters scale shape d_lognormal(mu, sigma): Discrete log-normal distribution parameters mu sigma can define type transitions : Mathematical expression: Transition defined string value \"beta * S * / N\" converted mathematical expression. need define parameters compartment names parameters argument Constant: Transition defined numerical value 1, 2 converted constant. define number individuals moving time step. transprob(x): Every time step fixed percentage left compartment transit right compartment, also convenient way define \\(R_t - R_{t-1} = \\gamma \\) can input \"-> R\" = transprob(gamma) nonparametric(waitingTimes...): vector values, numbers, percentages, density length stay based real data, denim convert distribution multinomial(probabilities): convenient way define several probabilities compartment transit many compartments, may may time step. example, \"V -> VA, VS, VH\" = multinomial(0.6, 0.3, 0.1) means 60% V become VA, 30% become VS 10% become VH. continue define length stay distribution transitions e.g \"V -> VA\" = d_gamma(3, 2), probabilities defined multinomial() percentage left compartment transit time step, percentage individuals move VA equilibrium state. define length stay distribution, \"V -> VA, VS, VH\" = multinomial(0.6, 0.3, 0.1) percentage V transit right compartments per time step similar transprob() function. See detailed explanations Multiple transitions compartment section.","code":""},{"path":"/articles/web_only/denim.html","id":"multiple-transitions-from-a-compartment","dir":"Articles > Web_only","previous_headings":"","what":"4. Multiple transitions from a compartment","title":"denim: deterministic discrete-time model with memory","text":"many ways define type transition two transitions compartment. Consider example: two scenarios example: Susceptible individuals can infected vaccinated. assumption infected first (S -> ), rest infected get vaccinated (S -> V). Infected individuals can recover die. mortality probability known, can implement model, example defining 0.9 * -> R (90% individuals recover) 0.1 * -> D (10% die). , ensure mortality probability 10%, also define length stay individuals infected state recover die follows gamma log-normal distribution, respectively. can define model example follows:  Tips: Instead writing: can also use multinomial(), define length stay distribution obtain result:","code":"transitions <- list(   \"S -> I\" = \"beta * S * I / N\",   \"S -> V\" = 7,   \"0.9 * I -> R\" = d_gamma(3, 2),   \"0.1 * I -> D\" = d_lognormal(2, 0.5) )  initialValues <- c(   S = 999,    I = 1,    R = 0,   V = 0,   D = 0 )  parameters <- c(   beta = 0.12,   N = 1000 )  simulationDuration <- 10 timeStep <- 0.01  mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep) plot(mod) \"0.9 * I -> R\" = d_gamma(3, 2), \"0.1 * I -> D\" = d_lognormal(2, 0.5) \"I -> R, D\" = multinomial(0.9, 0.1), \"I -> R\" = d_gamma(3, 2), \"I -> D\" = d_lognormal(2, 0.5)"},{"path":"/articles/web_only/denim.html","id":"another-example","dir":"Articles > Web_only","previous_headings":"","what":"5. Another example","title":"denim: deterministic discrete-time model with memory","text":"","code":"transitions <- list(   \"S -> I\" = \"beta * S * (I + IV) / N\",   \"S -> V\" = 2,   \"0.1 * I -> D\" = d_lognormal(2, 0.5),   \"0.9 * I -> R\" = d_gamma(3, 2),   \"V -> IV\" = \"0.1 * beta * V * (I + IV) / N\",   \"IV -> R\" = d_exponential(2) )  initialValues <- c(   S = 999,    I = 1,    R = 0,   V = 0,   IV = 0,   D = 0 )  parameters <- c(   beta = 0.12,   N = 1000 )  simulationDuration <- 10 timeStep <- 0.01  mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep) plot(mod)"},{"path":"/articles/web_only/denim_vs_deSolve.html","id":"comparison-between-desolve-and-denim","dir":"Articles > Web_only","previous_headings":"","what":"Comparison between deSolve and denim","title":"denim vs deSolve","text":"Using deSolve, can replicate Erlang distribution exponential distribution testing","code":"library(denim) library(deSolve) ## Warning: package 'deSolve' was built under R version 4.3.1 # --- Transition def for denim transitions <- list(   \"S -> I\" = d_exponential(0.2),   \"I -> R\" = d_gamma(3, 2) ) parameters <- c(rate = 0.2, scale = 3, shape=2)  initialValues <- c(S = 999, I = 1, I1 = 1, I2=0, R=0)  # --- Transition def for deSolve transition_func <- function(t, state, param){   with(as.list( c(state, param) ), {       gamma_rate = 1/scale       dS = -rate*S       # apply linear chain trick       dI1 = rate*S - gamma_rate*I1       dI2 = gamma_rate*I1 - gamma_rate*I2       dI =  dI1 + dI2       dR = gamma_rate*I2       list(c(dS, dI, dI1, dI2, dR))   }) }  # --- Timestep definition simulationDuration <- 20  timestep <- 0.001 # small timestep required for comparison"},{"path":"/articles/web_only/denim_vs_deSolve.html","id":"run-simulation-with-denim","dir":"Articles > Web_only","previous_headings":"Comparison between deSolve and denim","what":"Run simulation with denim","title":"denim vs deSolve","text":"","code":"denim_start <- Sys.time() mod <- sim(transitions = transitions, initialValues = initialValues, parameters, simulationDuration = simulationDuration, timeStep = timestep) denim_end <- Sys.time()  # --- show output head(mod[mod$Time %in% 1:simulationDuration,]) ##      Time        S        I          R ## 1001    1 817.9120 179.0627   3.025308 ## 2001    2 669.6497 310.8811  19.469173 ## 3001    3 548.2628 398.4336  53.303539 ## 4001    4 448.8796 448.0932 103.027204 ## 5001    5 367.5116 467.6504 164.838060 ## 6001    6 300.8930 464.7307 234.376244"},{"path":"/articles/web_only/denim_vs_deSolve.html","id":"run-simulation-with-desolve","dir":"Articles > Web_only","previous_headings":"Comparison between deSolve and denim","what":"Run simulation with deSolve","title":"denim vs deSolve","text":"","code":"times <- seq(0, simulationDuration, timestep)  desolve_start <- Sys.time() ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func) desolve_end <- Sys.time()  # --- show output ode_mod <- as.data.frame(ode_mod) head(ode_mod[ode_mod$time %in% 1:simulationDuration, c(\"time\", \"S\", \"I\", \"R\")]) ##      time        S        I          R ## 1001    1 817.9120 179.0585   3.029466 ## 2001    2 669.6497 310.8686  19.481654 ## 3001    3 548.2628 398.4125  53.324630 ## 4001    4 448.8796 448.0650 103.055392 ## 5001    5 367.5116 467.6172 164.871207 ## 6001    6 300.8930 464.6948 234.412204"},{"path":"/articles/web_only/denim_vs_deSolve.html","id":"execution-time-comparison","dir":"Articles > Web_only","previous_headings":"Comparison between deSolve and denim","what":"Execution time comparison","title":"denim vs deSolve","text":"denim takes approximately 101.74 times long deSolve compute result given specifications . significant difference can attributed difference approaches: deSolve solves system ODEs denim iterates timestep updates population compartment approach denim allow flexibility types dwell time distributions, computation time scales timestep grows smaller (O(n) time complexity).","code":""},{"path":"/articles/web_only/denim_vs_deSolve.html","id":"plot-the-result","dir":"Articles > Web_only","previous_headings":"","what":"Plot the result","title":"denim vs deSolve","text":"","code":"# increase timestep before plotting mod <- mod[mod$Time %in% seq(0, simulationDuration, 0.2),] ode_mod <- ode_mod[ode_mod$time %in% seq(0, simulationDuration, 0.2),] # ---- Plot S compartment plot(x = mod$Time, y = mod$S,xlab = \"Time\", ylab = \"Count\", main=\"S compartment\",      col = \"#4876ff\", type=\"l\", lwd=3) lines(ode_mod$time, ode_mod$S, lwd=3, lty=3) legend(x = 15, y = 900,legend=c(\"denim\", \"deSolve\"), col = c(\"#4876ff\", \"black\"), lty=c(1,3)) # ---- Plot I compartment plot(x = mod$Time, y = mod$I, xlab = \"Time\", ylab = \"Count\", main=\"I compartment\",       col = \"#4876ff\", type=\"l\", lwd=2) lines(ode_mod$time, ode_mod$I, lwd=3, lty=3) legend(x = 15, y = 350,legend=c(\"denim\", \"deSolve\"), col = c(\"#4876ff\", \"black\"), lty=c(1,3)) # ---- Plot R compartment plot(x = mod$Time, y = mod$R, xlab = \"Time\", ylab = \"Count\", main=\"R compartment\",      col = \"#4876ff\", type=\"l\", lwd=2) lines(ode_mod$time, ode_mod$R, lwd=3, lty=3) legend(x = 15, y = 300,legend=c(\"denim\", \"deSolve\"), col = c(\"#4876ff\", \"black\"), lty=c(1,3))"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thinh Ong. Author, copyright holder. Anh Phan. Author, maintainer. Marc Choisy. Author. Niels Lohman. Contributor. Bjoern Hoehrmann. Contributor. Florian Loitsch. Contributor. Ingo Berg. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ong T, Phan , Choisy M (2025). denim: Generate Simulate Deterministic Discrete-Time Compartmental Models. https://drthinhong.com/denim/, https://github.com/thinhong/denim.","code":"@Manual{,   title = {denim: Generate and Simulate Deterministic Discrete-Time Compartmental Models},   author = {Thinh Ong and Anh Phan and Marc Choisy},   year = {2025},   note = {https://drthinhong.com/denim/, https://github.com/thinhong/denim}, }"},{"path":"/index.html","id":"denim-","dir":"","previous_headings":"","what":"Generate and Simulate Deterministic Discrete-Time Compartmental Models","title":"Generate and Simulate Deterministic Discrete-Time Compartmental Models","text":"R package building simulating deterministic discrete-time compartmental models memory.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate and Simulate Deterministic Discrete-Time Compartmental Models","text":"can install development version denim GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"thinhong/denim\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Generate and Simulate Deterministic Discrete-Time Compartmental Models","text":"basic example illustrate specification simple SIR model, contains three compartments susceptible (S), infected () recovered (R). recovery probabilities infected individuals gamma distributed example: output data frame 4 columns: Time, S, R can plot output :","code":"library(denim)  transitions <- list(   \"S -> I\" = \"beta * S * I / N\",   \"I -> R\" = d_gamma(rate = 1/3, shape = 2) )  parameters <- c(   beta = 0.12,   N = 1000 )  initialValues <- c(   S = 999,    I = 1,    R = 0 )  simulationDuration <- 10 timeStep <- 0.01  mod <- sim(transitions = transitions, initialValues = initialValues,             parameters = parameters, simulationDuration = simulationDuration,             timeStep = timeStep) head(mod) #>   Time        S        I            R #> 1 0.00 999.0000 1.000000 0.000000e+00 #> 2 0.01 998.8801 1.119874 5.543225e-06 #> 3 0.02 998.7459 1.254092 2.278823e-05 #> 4 0.03 998.5956 1.404364 5.306419e-05 #> 5 0.04 998.4273 1.572606 9.785981e-05 #> 6 0.05 998.2389 1.760961 1.588423e-04 plot(mod)"},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Fixed transition — constant","title":"Fixed transition — constant","text":"Define fixed number individuals left compartment transit right compartment every time step","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fixed transition — constant","text":"","code":"constant(x)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fixed transition — constant","text":"x number individuals move one compartment another","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fixed transition — constant","text":"Distribution object simulator","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fixed transition — constant","text":"","code":"transitions <- list(\"S->I\" = constant(10))"},{"path":"/reference/d_exponential.html","id":null,"dir":"Reference","previous_headings":"","what":"Discrete exponential distribution — d_exponential","title":"Discrete exponential distribution — d_exponential","text":"Discrete exponential distribution","code":""},{"path":"/reference/d_exponential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discrete exponential distribution — d_exponential","text":"","code":"d_exponential(rate, dist_init = FALSE)"},{"path":"/reference/d_exponential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discrete exponential distribution — d_exponential","text":"rate rate parameter exponential distribution dist_init whether distribute initial value across subcompartments following distribution. (default FALSE, meaning init value always first compartment)","code":""},{"path":"/reference/d_exponential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discrete exponential distribution — d_exponential","text":"Distribution object simulator","code":""},{"path":"/reference/d_exponential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discrete exponential distribution — d_exponential","text":"","code":"transitions <- list(\"I -> D\" = d_exponential(0.3)) transitions <- denim_dsl({I -> D = d_exponential(0.3)})"},{"path":"/reference/d_gamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Discrete gamma distribution — d_gamma","title":"Discrete gamma distribution — d_gamma","text":"Discrete gamma distribution","code":""},{"path":"/reference/d_gamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discrete gamma distribution — d_gamma","text":"","code":"d_gamma(rate, shape, dist_init = FALSE)"},{"path":"/reference/d_gamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discrete gamma distribution — d_gamma","text":"rate rate parameter gamma distribution shape shape parameter gamma distribution dist_init whether distribute initial value across subcompartments following distribution.","code":""},{"path":"/reference/d_gamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discrete gamma distribution — d_gamma","text":"Distribution object simulator","code":""},{"path":"/reference/d_gamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discrete gamma distribution — d_gamma","text":"","code":"transitions <- list(\"S -> I\" = d_gamma(rate = 1, shape = 5)) transitions_dsl <- denim_dsl({S -> I = d_gamma(rate = 1, shape = 5)}) # define model parameters as distributional parameters transitions_dsl <- denim_dsl({S -> I = d_gamma(rate = i_rate, shape = i_shape)})"},{"path":"/reference/d_lognormal.html","id":null,"dir":"Reference","previous_headings":"","what":"Discrete log-normal distribution — d_lognormal","title":"Discrete log-normal distribution — d_lognormal","text":"Discrete log-normal distribution","code":""},{"path":"/reference/d_lognormal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discrete log-normal distribution — d_lognormal","text":"","code":"d_lognormal(mu, sigma, dist_init = FALSE)"},{"path":"/reference/d_lognormal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discrete log-normal distribution — d_lognormal","text":"mu location parameter ln mean sigma scale parameter ln standard deviation dist_init whether distribute initial value across subcompartments following distribution. (default FALSE, meaning init value always first compartment)","code":""},{"path":"/reference/d_lognormal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discrete log-normal distribution — d_lognormal","text":"Distribution object simulator","code":""},{"path":"/reference/d_lognormal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discrete log-normal distribution — d_lognormal","text":"","code":"transitions <- list(\"I -> D\" = d_lognormal(3, 0.6)) transitions <- denim_dsl({I -> D = d_lognormal(3, 0.6)})"},{"path":"/reference/d_weibull.html","id":null,"dir":"Reference","previous_headings":"","what":"Discrete Weibull distribution — d_weibull","title":"Discrete Weibull distribution — d_weibull","text":"Discrete Weibull distribution","code":""},{"path":"/reference/d_weibull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discrete Weibull distribution — d_weibull","text":"","code":"d_weibull(scale, shape, dist_init = FALSE)"},{"path":"/reference/d_weibull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discrete Weibull distribution — d_weibull","text":"scale scale parameter Weibull distribution shape shape parameter Weibull distribution dist_init whether distribute initial value across subcompartments following distribution. (default FALSE, meaning init value always first compartment)","code":""},{"path":"/reference/d_weibull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discrete Weibull distribution — d_weibull","text":"Distribution object simulator","code":""},{"path":"/reference/d_weibull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discrete Weibull distribution — d_weibull","text":"","code":"transitions <- list(\"I -> D\" = d_weibull(0.6, 2)) transitions <- denim_dsl({ I -> D = d_weibull(0.6, 2) })"},{"path":"/reference/denim-package.html","id":null,"dir":"Reference","previous_headings":"","what":"denim — denim-package","title":"denim — denim-package","text":"Simulate deterministic discrete time model","code":""},{"path":"/reference/denim-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"denim — denim-package","text":"Imports","code":""},{"path":[]},{"path":"/reference/denim-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"denim — denim-package","text":"Maintainer: Anh Phan anhptq@oucru.org (ORCID) Authors: Thinh Ong thinhop@oucru.org (ORCID) [copyright holder] Marc Choisy mchoisy@oucru.org (ORCID) contributors: Niels Lohman [contributor] Bjoern Hoehrmann bjoern@hoehrmann.de [contributor] Florian Loitsch [contributor] Ingo Berg [contributor]","code":""},{"path":"/reference/denim_dsl.html","id":null,"dir":"Reference","previous_headings":"","what":"Define transitions using denim's domain-specific language (DSL) — denim_dsl","title":"Define transitions using denim's domain-specific language (DSL) — denim_dsl","text":"function parses model transitions defined denim's DSL syntax","code":""},{"path":"/reference/denim_dsl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define transitions using denim's domain-specific language (DSL) — denim_dsl","text":"","code":"denim_dsl(x)"},{"path":"/reference/denim_dsl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define transitions using denim's domain-specific language (DSL) — denim_dsl","text":"x expression written denim's DSL syntax. line transition written format compartment -> out_compartment = expression expression can either math expression one denim's built-dwell time distribution function","code":""},{"path":"/reference/denim_dsl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define transitions using denim's domain-specific language (DSL) — denim_dsl","text":"denim_transition object","code":""},{"path":"/reference/denim_dsl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define transitions using denim's domain-specific language (DSL) — denim_dsl","text":"","code":"transitions <- denim_dsl({   S -> I = beta * (I/N) * S * timeStep   I -> R = d_gamma(rate = 1/4, shape = 3) })"},{"path":"/reference/mathexpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Mathematical expression — mathexpr","title":"Mathematical expression — mathexpr","text":"Mathematical expression","code":""},{"path":"/reference/mathexpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mathematical expression — mathexpr","text":"","code":"mathexpr(expr)"},{"path":"/reference/mathexpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mathematical expression — mathexpr","text":"expr User defined mathematial expression. expression processed muparser library offers wide variety operators. Visit muparser website (https://beltoforion.de/en/muparser/features.php) see full list available operators.","code":""},{"path":"/reference/mathexpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mathematical expression — mathexpr","text":"Distribution object simulator","code":""},{"path":"/reference/mathexpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mathematical expression — mathexpr","text":"","code":"transitions <- list(\"S->I\"=\"beta*S/N\") transitions <- denim_dsl({S->I=beta*S/N}) # definition for parameters in the expression required params <- c(N = 1000, beta = 0.3)"},{"path":"/reference/multinomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Multinomial — multinomial","title":"Multinomial — multinomial","text":"Define set probabilities transition one compartment multiple compartments   equal ","code":"\"I -> R\" = d_gamma(1/3, 2), \"I -> D\" = d_lognormal(2, 0.5) \"0.5 * I -> R\" = d_gamma(1/3, 2), \"0.5 * I -> D\" = d_lognormal(2, 0.5)"},{"path":"/reference/multinomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multinomial — multinomial","text":"","code":"multinomial(...)"},{"path":"/reference/multinomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multinomial — multinomial","text":"... vector probabilities. Vector automatically rescaled sum 1.","code":""},{"path":"/reference/multinomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multinomial — multinomial","text":"Distribution object simulator","code":""},{"path":"/reference/nonparametric.html","id":null,"dir":"Reference","previous_headings":"","what":"Nonparametric distribution — nonparametric","title":"Nonparametric distribution — nonparametric","text":"Convert vector frequencies, percentages... distribution","code":""},{"path":"/reference/nonparametric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nonparametric distribution — nonparametric","text":"","code":"nonparametric(x, dist_init = FALSE)"},{"path":"/reference/nonparametric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nonparametric distribution — nonparametric","text":"x vector values dist_init whether distribute initial value across subcompartments following distribution. (default FALSE, meaning init value always first compartment))","code":""},{"path":"/reference/nonparametric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nonparametric distribution — nonparametric","text":"Distribution object simulator","code":""},{"path":"/reference/nonparametric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nonparametric distribution — nonparametric","text":"","code":"transitions <- list(\"S->I\"=nonparametric( c(0.1, 0.2, 0.5, 0.2) )) transitions <- denim_dsl({S->I=nonparametric( c(0.1, 0.2, 0.5, 0.2) )}) # you can also define a model parameter for the distribution transitions <- denim_dsl({S->I=nonparametric( dwelltime_dist )})"},{"path":"/reference/plot.denim.html","id":null,"dir":"Reference","previous_headings":"","what":"Overloaded plot function for denim object — plot.denim","title":"Overloaded plot function for denim object — plot.denim","text":"Overloaded plot function denim object","code":""},{"path":"/reference/plot.denim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Overloaded plot function for denim object — plot.denim","text":"","code":"# S3 method for denim plot(x, ..., color_palette = NULL)"},{"path":"/reference/plot.denim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Overloaded plot function for denim object — plot.denim","text":"x output denim::sim function ... additional parameter plot() function color_palette palette name colorspace package. can view available palettes colorspace::hcl_palettes(\"qualitative\", plot = TRUE).","code":""},{"path":"/reference/sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulator for deterministic discrete time model with memory — sim","title":"Simulator for deterministic discrete time model with memory — sim","text":"Simulation function call C++ simulator","code":""},{"path":"/reference/sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulator for deterministic discrete time model with memory — sim","text":"","code":"sim(   transitions,   initialValues,   parameters = NULL,   simulationDuration,   timeStep = 1,   errorTolerance = 0.001 )"},{"path":"/reference/sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulator for deterministic discrete time model with memory — sim","text":"transitions output function denim_dsl() list transitions follows format \"transition\" = distribution() initialValues vector contains initial values compartments defined transitions, follows format compartment_name = initial_value parameters vector contains values parameters compartments, usually parameters used mathexp() functions simulationDuration duration time simulate timeStep set output time interval. example, simulationDuration = 10 means 10 days timeStep = 0.1, output display results 0.1 daily interval errorTolerance set threshold cumulative distribution function can rounded 1. example, want cumulative probability 0.999 rounded 1, set errorTolerance = 0.001 (1 - 0.999 = 0.001). Default 0.001","code":""},{"path":"/reference/sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulator for deterministic discrete time model with memory — sim","text":"data.frame class denim can plotted plot() method","code":""},{"path":"/reference/sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulator for deterministic discrete time model with memory — sim","text":"","code":"# model can be defined using denim DSL transitions <- denim_dsl({    S -> I = beta * S * I / N    I -> R = d_gamma(1/3, 2) })  # or as a list transitions <- list(    \"S -> I\" = \"beta * S * I / N\",    \"I -> R\" = d_gamma(1/3, 2) )  initialValues <- c(    S = 999,     I = 1,     R = 0 )  parameters <- c(    beta = 0.012,    N = 1000 )  simulationDuration <- 30 timeStep <- 0.01  mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep)"},{"path":"/reference/transprob.html","id":null,"dir":"Reference","previous_headings":"","what":"Transition probability — transprob","title":"Transition probability — transprob","text":"fixed percentage left compartment transit right compartment every time step","code":""},{"path":"/reference/transprob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transition probability — transprob","text":"","code":"transprob(x)"},{"path":"/reference/transprob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transition probability — transprob","text":"x float number 0 1","code":""},{"path":"/reference/transprob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transition probability — transprob","text":"Distribution object simulator","code":""},{"path":"/reference/transprob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transition probability — transprob","text":"","code":"transitions <- list(\"S->I\"=transprob(0.8))"},{"path":"/news/index.html","id":"denim-121","dir":"Changelog","previous_headings":"","what":"denim 1.2.1","title":"denim 1.2.1","text":"CRAN release: 2025-06-02 Minor runtime improvement Add option select color palette plot","code":""},{"path":"/news/index.html","id":"denim-120","dir":"Changelog","previous_headings":"","what":"denim 1.2.0","title":"denim 1.2.0","text":"CRAN release: 2025-05-30 Add denim DSL support Add error handlers","code":""},{"path":"/news/index.html","id":"denim-110","dir":"Changelog","previous_headings":"","what":"denim 1.1.0","title":"denim 1.1.0","text":"CRAN release: 2025-05-16 Fix multinomial vs competing risks transition Add distribute initial value feature","code":""},{"path":"/news/index.html","id":"denim-101","dir":"Changelog","previous_headings":"","what":"denim 1.0.1","title":"denim 1.0.1","text":"CRAN release: 2025-03-17 Remove deprecated syntax C++","code":""},{"path":"/news/index.html","id":"denim-100","dir":"Changelog","previous_headings":"","what":"denim 1.0.0","title":"denim 1.0.0","text":"CRAN release: 2024-06-05 Initial CRAN submission.","code":""}]
