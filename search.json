[{"path":[]},{"path":"/articles/deSolve_to_denim.html","id":"original-code-in-desolve","dir":"Articles","previous_headings":"Migrate deSolve code to denim","what":"Original code in deSolve","title":"Migrate to denim","text":"model used demonstrating process migrating code deSolve denim followed","code":"# --- Model definition in deSolve transition_func <- function(t, state, param){   with(as.list( c(state, param) ), {       gamma_rate = 1/scale       dS = -rate*S       dI1 = rate*S - gamma_rate*I1       dI2 = gamma_rate*I1 - gamma_rate*I2       dI =  dI1 + dI2       dR = gamma_rate*I2       list(c(dS, dI, dI1, dI2, dR))   }) }  # ---- Model configuration  parameters <- c(rate = 0.2, scale = 3, beta = 0.12)  initialValues <- c(S = 999, I = 0, I1 = 0, I2=0, R=0)  # ---- Run simulation times <- seq(0, 20) # simulation duration ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)  # --- show output ode_mod <- as.data.frame(ode_mod) head(ode_mod[ode_mod$time %in% 1:20, c(\"time\", \"S\", \"I\", \"R\")]) ##   time        S        I          R ## 2    1 817.9120 178.1031   2.984842 ## 3    2 669.6497 310.0129  19.337352 ## 4    3 548.2628 397.6768  53.060395 ## 5    4 448.8796 447.4499 102.670468 ## 6    5 367.5116 467.1136 164.374867 ## 7    6 300.8930 464.2888 233.818204"},{"path":"/articles/deSolve_to_denim.html","id":"model-definition","dir":"Articles","previous_headings":"Migrate deSolve code to denim","what":"Model definition","title":"Migrate to denim","text":"Unlike deSolve transitions compartments defined system ODEs, transitions denim must defined explicitly using built-distributions. User must first identify distribution type best describe transition deSolve model. transitions identified, user can define model denim. using denim, model structure given list key-value pairs key string showing transition direction compartments value built-distribution function describe transition","code":"# --- Model definition in deSolve transition_func <- function(t, state, param){   with(as.list( c(state, param) ), {       gamma_rate = 1/scale              # For S -> I transition, constant rate is assumed --> exponentially distributed dwell time       dS = -rate*S       # For I -> R transition, linear chain trick is applied --> gamma distributed dwell time        dI1 = rate*S - gamma_rate*I1       dI2 = gamma_rate*I1 - gamma_rate*I2       dI =  dI1 + dI2       dR = gamma_rate*I2       list(c(dS, dE, dI, dI1, dI2, dR))   }) } # --- Transition def for denim transitions <- list(   \"S -> I\" = d_exponential(0.2),   \"I -> R\" = d_gamma(3, 2) # shape is 2 from number of I sub compartments )"},{"path":"/articles/deSolve_to_denim.html","id":"model-configurations","dir":"Articles","previous_headings":"Migrate deSolve code to denim","what":"Model configurations","title":"Migrate to denim","text":"Similar deSolve, denim also ask users provide initial values additional parameters form named vectors. example deSolve code, users can use initalValues (denim ignore unused I1, I2 compartments), recommended remove redundant compartments. parameters, since rate scale already defined distribution functions, users need keep beta initial parameters vector.","code":"# remove I1, I2 compartments denim_initialValues <- c(S = 999, I = 0, R=0) denim_parameters <- c(beta = 0.12)"},{"path":"/articles/deSolve_to_denim.html","id":"simulation","dir":"Articles","previous_headings":"Migrate deSolve code to denim","what":"Simulation","title":"Migrate to denim","text":"Lastly, users need define simulation duration time step denim run. Unlike deSolve takes time sequence, denim require simulation duration time step. Since denim discrete time model, time step must set small value result closely follow deSolve.","code":"mod <- sim(transitions = transitions,              initialValues = denim_initialValues,               parameters = denim_parameters,              simulationDuration = 20,              timeStep = 0.01) plot(mod)"},{"path":[]},{"path":"/articles/denim.html","id":"simple-sir-model-with-gamma-distributed-lengths-of-stay","dir":"Articles","previous_headings":"","what":"1. Simple SIR model with gamma distributed lengths of stay","title":"denim: deterministic discrete-time model with memory","text":"SIR model uses 3 compartments: S (susceptible), (infected), R (recovered) describe clinical status individuals. use simple form SIR model demonstrate define distribution lengths stay distribution. model equations : \\[S_{t+1} - S_{t} = -\\lambda S_{t} = -\\frac{\\beta I_{t}}{N}S_{t}\\] \\[I_{t+1} - I_{t} = \\frac{\\beta I_{t}}{N}S_{t} - \\gamma I_{t}\\] \\[R_{t+1} - R_{t} = \\gamma I_{t}\\] \\(N\\): total population size, \\(N = S + + R\\) \\(\\beta\\): product contact rates transmission probability; usually define \\(\\lambda =\\frac{\\beta I_{t}}{N}\\) force infection \\(\\gamma\\): recovery rate Usually solve model easier make assumption recovery rate \\(\\gamma\\) constant, leads exponentially distributed length stay .e individuals recover 1 day infected.  realistic length stay distribution can look like , patients recovered 4 days. defined using gamma distribution shape = 3 scale = 2.  model now look like : Model specification Model transition two transitions S -> -> R case. transitions specified list follow format \"transition\" = equation, equation defined one functions waiting time distribution. Initial state Use vector define compartments assigned names initial values format compartment_name = initial_value: Model parameters use math expression, symbols except compartment names parameters, defined constant values. two constant parameters example: beta N: Model application Time step specification run model 30 days give output 0.01 daily intervals. default interval (time step) 1 declared explicitly.","code":"transitions <- list(   \"S -> I\" = \"beta * S * I / N\",   \"I -> R\" = d_gamma(3, 2) ) initialValues <- c(   S = 999,    I = 1,    R = 0 ) parameters <- c(   beta = 0.012,   N = 1000 ) simulationDuration <- 30 timeStep <- 0.01 mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep) head(mod) #>   Time        S        I            R #> 1 0.00 999.0000 1.000000 0.000000e+00 #> 2 0.01 998.9880 1.011982 5.543225e-06 #> 3 0.02 998.9759 1.024097 2.219016e-05 #> 4 0.03 998.9636 1.036346 5.000038e-05 #> 5 0.04 998.9512 1.048730 8.903457e-05 #> 6 0.05 998.9386 1.061252 1.393545e-04 plot(mod)"},{"path":"/articles/denim.html","id":"how-the-algorithm-work","dir":"Articles","previous_headings":"","what":"2. How the algorithm work?","title":"denim: deterministic discrete-time model with memory","text":"SIR model, infected individuals presented single compartment recovery rate \\(\\gamma\\). want recovery rate individuals infected 1 day differ recovery rate 2-day infected patients. rather using one compartment infected (), define multiple infected sub-compartments. number sub-compartments depends maximum day expect infected individuals recovered. example, expect disease maximum 4 days infection, end 4 sub-compartments. sub-compartment recovery rate \\(\\gamma_{1}\\), \\(\\gamma_{2}\\), \\(\\gamma_{3}\\), \\(\\gamma_{4}\\). day 4 certain patient recover (assume disease maximum 4 days infection), \\(\\gamma_{4} = 1\\). Let \\(R_1 + R_2 + R_3 + R_4 = \\Sigma R\\). \\(\\frac{R_1}{\\Sigma R} = p_1\\), \\(\\frac{R_2}{\\Sigma R} = p_2\\), \\(\\frac{R_3}{\\Sigma R} = p_3\\), \\(\\frac{R_4}{\\Sigma R} = p_4\\). mission estimate \\(\\gamma_{1}\\), \\(\\gamma_{2}\\), \\(\\gamma_{3}\\) obtain \\(p_1\\), \\(p_2\\), \\(p_3\\), \\(p_4\\) fit pre-defined distribution equilibrium state. can obtained setting: \\[\\gamma_{} = \\frac{p_i}{1 - \\sum_{j=1}^{-1}p_j}\\] given length stay distribution, identify maximum length stay using cumulative distribution function. cumulative distribution function asymptotic 1 never equal 1, need set value acceptable rounded 1. want cumulative probability 0.999 rounded 1, set error tolerance threshold 1 - 0.999 = 0.001 (specified argument errorTolerance = 0.001). time cumulative probability = 0.999 set maximum length stay compartment. Default errorTolerance denim set 0.001.","code":""},{"path":"/articles/denim.html","id":"waiting-time-distribution","dir":"Articles","previous_headings":"","what":"3. Waiting time distribution","title":"denim: deterministic discrete-time model with memory","text":"Current available distribution package including: d_exponential(rate): Discrete exponential distribution parameter rate d_gamma(scale, shape): Discrete gamma distribution parameters scale shape d_weibull(scale, shape): Discrete Weibull distribution parameters scale shape d_lognormal(mu, sigma): Discrete log-normal distribution parameters mu sigma can define type transitions : Mathematical expression: Transition defined string value \"beta * S * / N\" converted mathematical expression. need define parameters compartment names parameters argument Constant: Transition defined numerical value 1, 2 converted constant. define number individuals moving time step. transprob(x): Every time step fixed percentage left compartment transit right compartment, also convenient way define \\(R_t - R_{t-1} = \\gamma \\) can input \"-> R\" = transprob(gamma) nonparametric(waitingTimes...): vector values, numbers, percentages, density length stay based real data, denim convert distribution multinomial(probabilities): convenient way define several probabilities compartment transit many compartments, may may time step. example, \"V -> VA, VS, VH\" = multinomial(0.6, 0.3, 0.1) means 60% V become VA, 30% become VS 10% become VH. continue define length stay distribution transitions e.g \"V -> VA\" = d_gamma(3, 2), probabilities defined multinomial() percentage left compartment transit time step, percentage individuals move VA equilibrium state. define length stay distribution, \"V -> VA, VS, VH\" = multinomial(0.6, 0.3, 0.1) percentage V transit right compartments per time step similar transprob() function. See detailed explanations Multiple transitions compartment section.","code":""},{"path":"/articles/denim.html","id":"multiple-transitions-from-a-compartment","dir":"Articles","previous_headings":"","what":"4. Multiple transitions from a compartment","title":"denim: deterministic discrete-time model with memory","text":"many ways define type transition two transitions compartment. Consider example: two scenarios example: Susceptible individuals can infected vaccinated. assumption infected first (S -> ), rest infected get vaccinated (S -> V). Infected individuals can recover die. mortality probability known, can implement model, example defining 0.9 * -> R (90% individuals recover) 0.1 * -> D (10% die). , ensure mortality probability 10%, also define length stay individuals infected state recover die follows gamma log-normal distribution, respectively. can define model example follows:  Tips: Instead writing: can also use multinomial(), define length stay distribution obtain result:","code":"transitions <- list(   \"S -> I\" = \"beta * S * I / N\",   \"S -> V\" = 7,   \"0.9 * I -> R\" = d_gamma(3, 2),   \"0.1 * I -> D\" = d_lognormal(2, 0.5) )  initialValues <- c(   S = 999,    I = 1,    R = 0,   V = 0,   D = 0 )  parameters <- c(   beta = 0.12,   N = 1000 )  simulationDuration <- 10 timeStep <- 0.01  mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep) plot(mod) \"0.9 * I -> R\" = d_gamma(3, 2), \"0.1 * I -> D\" = d_lognormal(2, 0.5) \"I -> R, D\" = multinomial(0.9, 0.1), \"I -> R\" = d_gamma(3, 2), \"I -> D\" = d_lognormal(2, 0.5)"},{"path":"/articles/denim.html","id":"another-example","dir":"Articles","previous_headings":"","what":"5. Another example","title":"denim: deterministic discrete-time model with memory","text":"","code":"transitions <- list(   \"S -> I\" = \"beta * S * (I + IV) / N\",   \"S -> V\" = 2,   \"0.1 * I -> D\" = d_lognormal(2, 0.5),   \"0.9 * I -> R\" = d_gamma(3, 2),   \"V -> IV\" = \"0.1 * beta * V * (I + IV) / N\",   \"IV -> R\" = d_exponential(2) )  initialValues <- c(   S = 999,    I = 1,    R = 0,   V = 0,   IV = 0,   D = 0 )  parameters <- c(   beta = 0.12,   N = 1000 )  simulationDuration <- 10 timeStep <- 0.01  mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep) plot(mod) transitions <- list(   \"O -> S\" = 100,   \"S -> I, R\" = multinomial(0.5, 0.5),   \"S -> I\" = transprob(1),   \"S -> R\" = transprob(1) )  initialValues <- c(   O = 1000,   S = 500,    I = 0,    R = 0 )  simulationDuration <- 10 timeStep <- 0.01  mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep) mod #>       Time    O            S         I         R #> 1     0.00 1000 5.000000e+02   0.00000   0.00000 #> 2     0.01  900 5.950000e+02   2.50000   2.50000 #> 3     0.02  800 6.890500e+02   5.47500   5.47500 #> 4     0.03  700 7.821595e+02   8.92025   8.92025 #> 5     0.04  600 8.743379e+02  12.83105  12.83105 #> 6     0.05  500 9.655945e+02  17.20274  17.20274 #> 7     0.06  400 1.055939e+03  22.03071  22.03071 #> 8     0.07  300 1.145379e+03  27.31040  27.31040 #> 9     0.08  200 1.233925e+03  33.03730  33.03730 #> 10    0.09  100 1.321586e+03  39.20693  39.20693 #> 11    0.10    0 1.408370e+03  45.81486  45.81486 #> 12    0.11    0 1.394287e+03  52.85671  52.85671 #> 13    0.12    0 1.380344e+03  59.82814  59.82814 #> 14    0.13    0 1.366540e+03  66.72986  66.72986 #> 15    0.14    0 1.352875e+03  73.56256  73.56256 #> 16    0.15    0 1.339346e+03  80.32694  80.32694 #> 17    0.16    0 1.325953e+03  87.02367  87.02367 #> 18    0.17    0 1.312693e+03  93.65343  93.65343 #> 19    0.18    0 1.299566e+03 100.21689 100.21689 #> 20    0.19    0 1.286571e+03 106.71473 106.71473 #> 21    0.20    0 1.273705e+03 113.14758 113.14758 #> 22    0.21    0 1.260968e+03 119.51610 119.51610 #> 23    0.22    0 1.248358e+03 125.82094 125.82094 #> 24    0.23    0 1.235875e+03 132.06273 132.06273 #> 25    0.24    0 1.223516e+03 138.24210 138.24210 #> 26    0.25    0 1.211281e+03 144.35968 144.35968 #> 27    0.26    0 1.199168e+03 150.41609 150.41609 #> 28    0.27    0 1.187176e+03 156.41193 156.41193 #> 29    0.28    0 1.175304e+03 162.34781 162.34781 #> 30    0.29    0 1.163551e+03 168.22433 168.22433 #> 31    0.30    0 1.151916e+03 174.04209 174.04209 #> 32    0.31    0 1.140397e+03 179.80166 179.80166 #> 33    0.32    0 1.128993e+03 185.50365 185.50365 #> 34    0.33    0 1.117703e+03 191.14861 191.14861 #> 35    0.34    0 1.106526e+03 196.73713 196.73713 #> 36    0.35    0 1.095460e+03 202.26975 202.26975 #> 37    0.36    0 1.084506e+03 207.74706 207.74706 #> 38    0.37    0 1.073661e+03 213.16959 213.16959 #> 39    0.38    0 1.062924e+03 218.53789 218.53789 #> 40    0.39    0 1.052295e+03 223.85251 223.85251 #> 41    0.40    0 1.041772e+03 229.11399 229.11399 #> 42    0.41    0 1.031354e+03 234.32285 234.32285 #> 43    0.42    0 1.021041e+03 239.47962 239.47962 #> 44    0.43    0 1.010830e+03 244.58482 244.58482 #> 45    0.44    0 1.000722e+03 249.63897 249.63897 #> 46    0.45    0 9.907148e+02 254.64258 254.64258 #> 47    0.46    0 9.808077e+02 259.59616 259.59616 #> 48    0.47    0 9.709996e+02 264.50020 264.50020 #> 49    0.48    0 9.612896e+02 269.35519 269.35519 #> 50    0.49    0 9.516767e+02 274.16164 274.16164 #> 51    0.50    0 9.421599e+02 278.92003 278.92003 #> 52    0.51    0 9.327383e+02 283.63083 283.63083 #> 53    0.52    0 9.234110e+02 288.29452 288.29452 #> 54    0.53    0 9.141769e+02 292.91157 292.91157 #> 55    0.54    0 9.050351e+02 297.48246 297.48246 #> 56    0.55    0 8.959847e+02 302.00763 302.00763 #> 57    0.56    0 8.870249e+02 306.48756 306.48756 #> 58    0.57    0 8.781546e+02 310.92268 310.92268 #> 59    0.58    0 8.693731e+02 315.31345 315.31345 #> 60    0.59    0 8.606794e+02 319.66032 319.66032 #> 61    0.60    0 8.520726e+02 323.96372 323.96372 #> 62    0.61    0 8.435518e+02 328.22408 328.22408 #> 63    0.62    0 8.351163e+02 332.44184 332.44184 #> 64    0.63    0 8.267652e+02 336.61742 336.61742 #> 65    0.64    0 8.184975e+02 340.75125 340.75125 #> 66    0.65    0 8.103125e+02 344.84373 344.84373 #> 67    0.66    0 8.022094e+02 348.89530 348.89530 #> 68    0.67    0 7.941873e+02 352.90634 352.90634 #> 69    0.68    0 7.862454e+02 356.87728 356.87728 #> 70    0.69    0 7.783830e+02 360.80851 360.80851 #> 71    0.70    0 7.705992e+02 364.70042 364.70042 #> 72    0.71    0 7.628932e+02 368.55342 368.55342 #> 73    0.72    0 7.552642e+02 372.36788 372.36788 #> 74    0.73    0 7.477116e+02 376.14420 376.14420 #> 75    0.74    0 7.402345e+02 379.88276 379.88276 #> 76    0.75    0 7.328321e+02 383.58393 383.58393 #> 77    0.76    0 7.255038e+02 387.24809 387.24809 #> 78    0.77    0 7.182488e+02 390.87561 390.87561 #> 79    0.78    0 7.110663e+02 394.46686 394.46686 #> 80    0.79    0 7.039556e+02 398.02219 398.02219 #> 81    0.80    0 6.969161e+02 401.54197 401.54197 #> 82    0.81    0 6.899469e+02 405.02655 405.02655 #> 83    0.82    0 6.830474e+02 408.47628 408.47628 #> 84    0.83    0 6.762170e+02 411.89152 411.89152 #> 85    0.84    0 6.694548e+02 415.27260 415.27260 #> 86    0.85    0 6.627602e+02 418.61988 418.61988 #> 87    0.86    0 6.561326e+02 421.93368 421.93368 #> 88    0.87    0 6.495713e+02 425.21434 425.21434 #> 89    0.88    0 6.430756e+02 428.46220 428.46220 #> 90    0.89    0 6.366448e+02 431.67758 431.67758 #> 91    0.90    0 6.302784e+02 434.86080 434.86080 #> 92    0.91    0 6.239756e+02 438.01219 438.01219 #> 93    0.92    0 6.177359e+02 441.13207 441.13207 #> 94    0.93    0 6.115585e+02 444.22075 444.22075 #> 95    0.94    0 6.054429e+02 447.27854 447.27854 #> 96    0.95    0 5.993885e+02 450.30576 450.30576 #> 97    0.96    0 5.933946e+02 453.30270 453.30270 #> 98    0.97    0 5.874607e+02 456.26967 456.26967 #> 99    0.98    0 5.815860e+02 459.20698 459.20698 #> 100   0.99    0 5.757702e+02 462.11491 462.11491 #> 101   1.00    0 5.700125e+02 464.99376 464.99376 #> 102   1.01    0 5.643124e+02 467.84382 467.84382 #> 103   1.02    0 5.586692e+02 470.66538 470.66538 #> 104   1.03    0 5.530825e+02 473.45873 473.45873 #> 105   1.04    0 5.475517e+02 476.22414 476.22414 #> 106   1.05    0 5.420762e+02 478.96190 478.96190 #> 107   1.06    0 5.366554e+02 481.67228 481.67228 #> 108   1.07    0 5.312889e+02 484.35556 484.35556 #> 109   1.08    0 5.259760e+02 487.01200 487.01200 #> 110   1.09    0 5.207162e+02 489.64188 489.64188 #> 111   1.10    0 5.155091e+02 492.24546 492.24546 #> 112   1.11    0 5.103540e+02 494.82301 494.82301 #> 113   1.12    0 5.052504e+02 497.37478 497.37478 #> 114   1.13    0 5.001979e+02 499.90103 499.90103 #> 115   1.14    0 4.951960e+02 502.40202 502.40202 #> 116   1.15    0 4.902440e+02 504.87800 504.87800 #> 117   1.16    0 4.853416e+02 507.32922 507.32922 #> 118   1.17    0 4.804881e+02 509.75593 509.75593 #> 119   1.18    0 4.756833e+02 512.15837 512.15837 #> 120   1.19    0 4.709264e+02 514.53678 514.53678 #> 121   1.20    0 4.662172e+02 516.89142 516.89142 #> 122   1.21    0 4.615550e+02 519.22250 519.22250 #> 123   1.22    0 4.569394e+02 521.53028 521.53028 #> 124   1.23    0 4.523700e+02 523.81498 523.81498 #> 125   1.24    0 4.478463e+02 526.07683 526.07683 #> 126   1.25    0 4.433679e+02 528.31606 528.31606 #> 127   1.26    0 4.389342e+02 530.53290 530.53290 #> 128   1.27    0 4.345449e+02 532.72757 532.72757 #> 129   1.28    0 4.301994e+02 534.90029 534.90029 #> 130   1.29    0 4.258974e+02 537.05129 537.05129 #> 131   1.30    0 4.216384e+02 539.18078 539.18078 #> 132   1.31    0 4.174221e+02 541.28897 541.28897 #> 133   1.32    0 4.132478e+02 543.37608 543.37608 #> 134   1.33    0 4.091154e+02 545.44232 545.44232 #> 135   1.34    0 4.050242e+02 547.48789 547.48789 #> 136   1.35    0 4.009740e+02 549.51302 549.51302 #> 137   1.36    0 3.969642e+02 551.51789 551.51789 #> 138   1.37    0 3.929946e+02 553.50271 553.50271 #> 139   1.38    0 3.890646e+02 555.46768 555.46768 #> 140   1.39    0 3.851740e+02 557.41300 557.41300 #> 141   1.40    0 3.813223e+02 559.33887 559.33887 #> 142   1.41    0 3.775090e+02 561.24548 561.24548 #> 143   1.42    0 3.737339e+02 563.13303 563.13303 #> 144   1.43    0 3.699966e+02 565.00170 565.00170 #> 145   1.44    0 3.662966e+02 566.85168 566.85168 #> 146   1.45    0 3.626337e+02 568.68317 568.68317 #> 147   1.46    0 3.590073e+02 570.49633 570.49633 #> 148   1.47    0 3.554173e+02 572.29137 572.29137 #> 149   1.48    0 3.518631e+02 574.06846 574.06846 #> 150   1.49    0 3.483445e+02 575.82777 575.82777 #> 151   1.50    0 3.448610e+02 577.56949 577.56949 #> 152   1.51    0 3.414124e+02 579.29380 579.29380 #> 153   1.52    0 3.379983e+02 581.00086 581.00086 #> 154   1.53    0 3.346183e+02 582.69085 582.69085 #> 155   1.54    0 3.312721e+02 584.36394 584.36394 #> 156   1.55    0 3.279594e+02 586.02030 586.02030 #> 157   1.56    0 3.246798e+02 587.66010 587.66010 #> 158   1.57    0 3.214330e+02 589.28350 589.28350 #> 159   1.58    0 3.182187e+02 590.89067 590.89067 #> 160   1.59    0 3.150365e+02 592.48176 592.48176 #> 161   1.60    0 3.118861e+02 594.05694 594.05694 #> 162   1.61    0 3.087673e+02 595.61637 595.61637 #> 163   1.62    0 3.056796e+02 597.16021 597.16021 #> 164   1.63    0 3.026228e+02 598.68861 598.68861 #> 165   1.64    0 2.995966e+02 600.20172 600.20172 #> 166   1.65    0 2.966006e+02 601.69970 601.69970 #> 167   1.66    0 2.936346e+02 603.18271 603.18271 #> 168   1.67    0 2.906982e+02 604.65088 604.65088 #> 169   1.68    0 2.877913e+02 606.10437 606.10437 #> 170   1.69    0 2.849133e+02 607.54333 607.54333 #> 171   1.70    0 2.820642e+02 608.96789 608.96789 #> 172   1.71    0 2.792436e+02 610.37821 610.37821 #> 173   1.72    0 2.764511e+02 611.77443 611.77443 #> 174   1.73    0 2.736866e+02 613.15669 613.15669 #> 175   1.74    0 2.709498e+02 614.52512 614.52512 #> 176   1.75    0 2.682403e+02 615.87987 615.87987 #> 177   1.76    0 2.655579e+02 617.22107 617.22107 #> 178   1.77    0 2.629023e+02 618.54886 618.54886 #> 179   1.78    0 2.602733e+02 619.86337 619.86337 #> 180   1.79    0 2.576705e+02 621.16474 621.16474 #> 181   1.80    0 2.550938e+02 622.45309 622.45309 #> 182   1.81    0 2.525429e+02 623.72856 623.72856 #> 183   1.82    0 2.500175e+02 624.99127 624.99127 #> 184   1.83    0 2.475173e+02 626.24136 626.24136 #> 185   1.84    0 2.450421e+02 627.47895 627.47895 #> 186   1.85    0 2.425917e+02 628.70416 628.70416 #> 187   1.86    0 2.401658e+02 629.91712 629.91712 #> 188   1.87    0 2.377641e+02 631.11795 631.11795 #> 189   1.88    0 2.353865e+02 632.30677 632.30677 #> 190   1.89    0 2.330326e+02 633.48370 633.48370 #> 191   1.90    0 2.307023e+02 634.64886 634.64886 #> 192   1.91    0 2.283953e+02 635.80237 635.80237 #> 193   1.92    0 2.261113e+02 636.94435 636.94435 #> 194   1.93    0 2.238502e+02 638.07491 638.07491 #> 195   1.94    0 2.216117e+02 639.19416 639.19416 #> 196   1.95    0 2.193956e+02 640.30221 640.30221 #> 197   1.96    0 2.172016e+02 641.39919 641.39919 #> 198   1.97    0 2.150296e+02 642.48520 642.48520 #> 199   1.98    0 2.128793e+02 643.56035 643.56035 #> 200   1.99    0 2.107505e+02 644.62475 644.62475 #> 201   2.00    0 2.086430e+02 645.67850 645.67850 #> 202   2.01    0 2.065566e+02 646.72171 646.72171 #> 203   2.02    0 2.044910e+02 647.75450 647.75450 #> 204   2.03    0 2.024461e+02 648.77695 648.77695 #> 205   2.04    0 2.004216e+02 649.78918 649.78918 #> 206   2.05    0 1.984174e+02 650.79129 650.79129 #> 207   2.06    0 1.964332e+02 651.78338 651.78338 #> 208   2.07    0 1.944689e+02 652.76554 652.76554 #> 209   2.08    0 1.925242e+02 653.73789 653.73789 #> 210   2.09    0 1.905990e+02 654.70051 654.70051 #> 211   2.10    0 1.886930e+02 655.65350 655.65350 #> 212   2.11    0 1.868061e+02 656.59697 656.59697 #> 213   2.12    0 1.849380e+02 657.53100 657.53100 #> 214   2.13    0 1.830886e+02 658.45569 658.45569 #> 215   2.14    0 1.812577e+02 659.37113 659.37113 #> 216   2.15    0 1.794452e+02 660.27742 660.27742 #> 217   2.16    0 1.776507e+02 661.17465 661.17465 #> 218   2.17    0 1.758742e+02 662.06290 662.06290 #> 219   2.18    0 1.741155e+02 662.94227 662.94227 #> 220   2.19    0 1.723743e+02 663.81285 663.81285 #> 221   2.20    0 1.706506e+02 664.67472 664.67472 #> 222   2.21    0 1.689441e+02 665.52797 665.52797 #> 223   2.22    0 1.672546e+02 666.37269 666.37269 #> 224   2.23    0 1.655821e+02 667.20897 667.20897 #> 225   2.24    0 1.639262e+02 668.03688 668.03688 #> 226   2.25    0 1.622870e+02 668.85651 668.85651 #> 227   2.26    0 1.606641e+02 669.66794 669.66794 #> 228   2.27    0 1.590575e+02 670.47126 670.47126 #> 229   2.28    0 1.574669e+02 671.26655 671.26655 #> 230   2.29    0 1.558922e+02 672.05388 672.05388 #> 231   2.30    0 1.543333e+02 672.83335 672.83335 #> 232   2.31    0 1.527900e+02 673.60501 673.60501 #> 233   2.32    0 1.512621e+02 674.36896 674.36896 #> 234   2.33    0 1.497495e+02 675.12527 675.12527 #> 235   2.34    0 1.482520e+02 675.87402 675.87402 #> 236   2.35    0 1.467694e+02 676.61528 676.61528 #> 237   2.36    0 1.453017e+02 677.34913 677.34913 #> 238   2.37    0 1.438487e+02 678.07564 678.07564 #> 239   2.38    0 1.424102e+02 678.79488 678.79488 #> 240   2.39    0 1.409861e+02 679.50693 679.50693 #> 241   2.40    0 1.395763e+02 680.21186 680.21186 #> 242   2.41    0 1.381805e+02 680.90974 680.90974 #> 243   2.42    0 1.367987e+02 681.60065 681.60065 #> 244   2.43    0 1.354307e+02 682.28464 682.28464 #> 245   2.44    0 1.340764e+02 682.96179 682.96179 #> 246   2.45    0 1.327357e+02 683.63217 683.63217 #> 247   2.46    0 1.314083e+02 684.29585 684.29585 #> 248   2.47    0 1.300942e+02 684.95289 684.95289 #> 249   2.48    0 1.287933e+02 685.60337 685.60337 #> 250   2.49    0 1.275053e+02 686.24733 686.24733 #> 251   2.50    0 1.262303e+02 686.88486 686.88486 #> 252   2.51    0 1.249680e+02 687.51601 687.51601 #> 253   2.52    0 1.237183e+02 688.14085 688.14085 #> 254   2.53    0 1.224811e+02 688.75944 688.75944 #> 255   2.54    0 1.212563e+02 689.37185 689.37185 #> 256   2.55    0 1.200437e+02 689.97813 689.97813 #> 257   2.56    0 1.188433e+02 690.57835 690.57835 #> 258   2.57    0 1.176549e+02 691.17256 691.17256 #> 259   2.58    0 1.164783e+02 691.76084 691.76084 #> 260   2.59    0 1.153135e+02 692.34323 692.34323 #> 261   2.60    0 1.141604e+02 692.91980 692.91980 #> 262   2.61    0 1.130188e+02 693.49060 693.49060 #> 263   2.62    0 1.118886e+02 694.05569 694.05569 #> 264   2.63    0 1.107697e+02 694.61514 694.61514 #> 265   2.64    0 1.096620e+02 695.16898 695.16898 #> 266   2.65    0 1.085654e+02 695.71730 695.71730 #> 267   2.66    0 1.074798e+02 696.26012 696.26012 #> 268   2.67    0 1.064050e+02 696.79752 696.79752 #> 269   2.68    0 1.053409e+02 697.32955 697.32955 #> 270   2.69    0 1.042875e+02 697.85625 697.85625 #> 271   2.70    0 1.032446e+02 698.37769 698.37769 #> 272   2.71    0 1.022122e+02 698.89391 698.89391 #> 273   2.72    0 1.011901e+02 699.40497 699.40497 #> 274   2.73    0 1.001782e+02 699.91092 699.91092 #> 275   2.74    0 9.917637e+01 700.41181 700.41181 #> 276   2.75    0 9.818461e+01 700.90769 700.90769 #> 277   2.76    0 9.720276e+01 701.39862 701.39862 #> 278   2.77    0 9.623074e+01 701.88463 701.88463 #> 279   2.78    0 9.526843e+01 702.36579 702.36579 #> 280   2.79    0 9.431575e+01 702.84213 702.84213 #> 281   2.80    0 9.337259e+01 703.31371 703.31371 #> 282   2.81    0 9.243886e+01 703.78057 703.78057 #> 283   2.82    0 9.151447e+01 704.24276 704.24276 #> 284   2.83    0 9.059933e+01 704.70034 704.70034 #> 285   2.84    0 8.969334e+01 705.15333 705.15333 #> 286   2.85    0 8.879640e+01 705.60180 705.60180 #> 287   2.86    0 8.790844e+01 706.04578 706.04578 #> 288   2.87    0 8.702935e+01 706.48532 706.48532 #> 289   2.88    0 8.615906e+01 706.92047 706.92047 #> 290   2.89    0 8.529747e+01 707.35127 707.35127 #> 291   2.90    0 8.444449e+01 707.77775 707.77775 #> 292   2.91    0 8.360005e+01 708.19998 708.19998 #> 293   2.92    0 8.276405e+01 708.61798 708.61798 #> 294   2.93    0 8.193641e+01 709.03180 709.03180 #> 295   2.94    0 8.111704e+01 709.44148 709.44148 #> 296   2.95    0 8.030587e+01 709.84706 709.84706 #> 297   2.96    0 7.950282e+01 710.24859 710.24859 #> 298   2.97    0 7.870779e+01 710.64611 710.64611 #> 299   2.98    0 7.792071e+01 711.03965 711.03965 #> 300   2.99    0 7.714150e+01 711.42925 711.42925 #> 301   3.00    0 7.637009e+01 711.81496 711.81496 #> 302   3.01    0 7.560639e+01 712.19681 712.19681 #> 303   3.02    0 7.485032e+01 712.57484 712.57484 #> 304   3.03    0 7.410182e+01 712.94909 712.94909 #> 305   3.04    0 7.336080e+01 713.31960 713.31960 #> 306   3.05    0 7.262719e+01 713.68640 713.68640 #> 307   3.06    0 7.190092e+01 714.04954 714.04954 #> 308   3.07    0 7.118191e+01 714.40904 714.40904 #> 309   3.08    0 7.047009e+01 714.76495 714.76495 #> 310   3.09    0 6.976539e+01 715.11730 715.11730 #> 311   3.10    0 6.906774e+01 715.46613 715.46613 #> 312   3.11    0 6.837706e+01 715.81147 715.81147 #> 313   3.12    0 6.769329e+01 716.15335 716.15335 #> 314   3.13    0 6.701636e+01 716.49182 716.49182 #> 315   3.14    0 6.634619e+01 716.82690 716.82690 #> 316   3.15    0 6.568273e+01 717.15863 717.15863 #> 317   3.16    0 6.502590e+01 717.48705 717.48705 #> 318   3.17    0 6.437565e+01 717.81218 717.81218 #> 319   3.18    0 6.373189e+01 718.13406 718.13406 #> 320   3.19    0 6.309457e+01 718.45272 718.45272 #> 321   3.20    0 6.246362e+01 718.76819 718.76819 #> 322   3.21    0 6.183899e+01 719.08051 719.08051 #> 323   3.22    0 6.122060e+01 719.38970 719.38970 #> 324   3.23    0 6.060839e+01 719.69580 719.69580 #> 325   3.24    0 6.000231e+01 719.99885 719.99885 #> 326   3.25    0 5.940229e+01 720.29886 720.29886 #> 327   3.26    0 5.880826e+01 720.59587 720.59587 #> 328   3.27    0 5.822018e+01 720.88991 720.88991 #> 329   3.28    0 5.763798e+01 721.18101 721.18101 #> 330   3.29    0 5.706160e+01 721.46920 721.46920 #> 331   3.30    0 5.649098e+01 721.75451 721.75451 #> 332   3.31    0 5.592607e+01 722.03696 722.03696 #> 333   3.32    0 5.536681e+01 722.31659 722.31659 #> 334   3.33    0 5.481314e+01 722.59343 722.59343 #> 335   3.34    0 5.426501e+01 722.86749 722.86749 #> 336   3.35    0 5.372236e+01 723.13882 723.13882 #> 337   3.36    0 5.318514e+01 723.40743 723.40743 #> 338   3.37    0 5.265329e+01 723.67336 723.67336 #> 339   3.38    0 5.212675e+01 723.93662 723.93662 #> 340   3.39    0 5.160549e+01 724.19726 724.19726 #> 341   3.40    0 5.108943e+01 724.45528 724.45528 #> 342   3.41    0 5.057854e+01 724.71073 724.71073 #> 343   3.42    0 5.007275e+01 724.96362 724.96362 #> 344   3.43    0 4.957202e+01 725.21399 725.21399 #> 345   3.44    0 4.907630e+01 725.46185 725.46185 #> 346   3.45    0 4.858554e+01 725.70723 725.70723 #> 347   3.46    0 4.809969e+01 725.95016 725.95016 #> 348   3.47    0 4.761869e+01 726.19066 726.19066 #> 349   3.48    0 4.714250e+01 726.42875 726.42875 #> 350   3.49    0 4.667108e+01 726.66446 726.66446 #> 351   3.50    0 4.620437e+01 726.89782 726.89782 #> 352   3.51    0 4.574232e+01 727.12884 727.12884 #> 353   3.52    0 4.528490e+01 727.35755 727.35755 #> 354   3.53    0 4.483205e+01 727.58397 727.58397 #> 355   3.54    0 4.438373e+01 727.80814 727.80814 #> 356   3.55    0 4.393989e+01 728.03005 728.03005 #> 357   3.56    0 4.350049e+01 728.24975 728.24975 #> 358   3.57    0 4.306549e+01 728.46726 728.46726 #> 359   3.58    0 4.263483e+01 728.68258 728.68258 #> 360   3.59    0 4.220849e+01 728.89576 728.89576 #> 361   3.60    0 4.178640e+01 729.10680 729.10680 #> 362   3.61    0 4.136854e+01 729.31573 729.31573 #> 363   3.62    0 4.095485e+01 729.52257 729.52257 #> 364   3.63    0 4.054530e+01 729.72735 729.72735 #> 365   3.64    0 4.013985e+01 729.93008 729.93008 #> 366   3.65    0 3.973845e+01 730.13077 730.13077 #> 367   3.66    0 3.934107e+01 730.32947 730.32947 #> 368   3.67    0 3.894766e+01 730.52617 730.52617 #> 369   3.68    0 3.855818e+01 730.72091 730.72091 #> 370   3.69    0 3.817260e+01 730.91370 730.91370 #> 371   3.70    0 3.779087e+01 731.10456 731.10456 #> 372   3.71    0 3.741296e+01 731.29352 731.29352 #> 373   3.72    0 3.703883e+01 731.48058 731.48058 #> 374   3.73    0 3.666844e+01 731.66578 731.66578 #> 375   3.74    0 3.630176e+01 731.84912 731.84912 #> 376   3.75    0 3.593874e+01 732.03063 732.03063 #> 377   3.76    0 3.557936e+01 732.21032 732.21032 #> 378   3.77    0 3.522356e+01 732.38822 732.38822 #> 379   3.78    0 3.487133e+01 732.56434 732.56434 #> 380   3.79    0 3.452261e+01 732.73869 732.73869 #> 381   3.80    0 3.417739e+01 732.91131 732.91131 #> 382   3.81    0 3.383561e+01 733.08219 733.08219 #> 383   3.82    0 3.349726e+01 733.25137 733.25137 #> 384   3.83    0 3.316228e+01 733.41886 733.41886 #> 385   3.84    0 3.283066e+01 733.58467 733.58467 #> 386   3.85    0 3.250235e+01 733.74882 733.74882 #> 387   3.86    0 3.217733e+01 733.91133 733.91133 #> 388   3.87    0 3.185556e+01 734.07222 734.07222 #> 389   3.88    0 3.153700e+01 734.23150 734.23150 #> 390   3.89    0 3.122163e+01 734.38918 734.38918 #> 391   3.90    0 3.090942e+01 734.54529 734.54529 #> 392   3.91    0 3.060032e+01 734.69984 734.69984 #> 393   3.92    0 3.029432e+01 734.85284 734.85284 #> 394   3.93    0 2.999138e+01 735.00431 735.00431 #> 395   3.94    0 2.969146e+01 735.15427 735.15427 #> 396   3.95    0 2.939455e+01 735.30273 735.30273 #> 397   3.96    0 2.910060e+01 735.44970 735.44970 #> 398   3.97    0 2.880960e+01 735.59520 735.59520 #> 399   3.98    0 2.852150e+01 735.73925 735.73925 #> 400   3.99    0 2.823628e+01 735.88186 735.88186 #> 401   4.00    0 2.795392e+01 736.02304 736.02304 #> 402   4.01    0 2.767438e+01 736.16281 736.16281 #> 403   4.02    0 2.739764e+01 736.30118 736.30118 #> 404   4.03    0 2.712366e+01 736.43817 736.43817 #> 405   4.04    0 2.685243e+01 736.57379 736.57379 #> 406   4.05    0 2.658390e+01 736.70805 736.70805 #> 407   4.06    0 2.631806e+01 736.84097 736.84097 #> 408   4.07    0 2.605488e+01 736.97256 736.97256 #> 409   4.08    0 2.579433e+01 737.10283 737.10283 #> 410   4.09    0 2.553639e+01 737.23181 737.23181 #> 411   4.10    0 2.528103e+01 737.35949 737.35949 #> 412   4.11    0 2.502822e+01 737.48589 737.48589 #> 413   4.12    0 2.477793e+01 737.61103 737.61103 #> 414   4.13    0 2.453015e+01 737.73492 737.73492 #> 415   4.14    0 2.428485e+01 737.85757 737.85757 #> 416   4.15    0 2.404200e+01 737.97900 737.97900 #> 417   4.16    0 2.380158e+01 738.09921 738.09921 #> 418   4.17    0 2.356357e+01 738.21822 738.21822 #> 419   4.18    0 2.332793e+01 738.33603 738.33603 #> 420   4.19    0 2.309465e+01 738.45267 738.45267 #> 421   4.20    0 2.286371e+01 738.56815 738.56815 #> 422   4.21    0 2.263507e+01 738.68247 738.68247 #> 423   4.22    0 2.240872e+01 738.79564 738.79564 #> 424   4.23    0 2.218463e+01 738.90768 738.90768 #> 425   4.24    0 2.196279e+01 739.01861 739.01861 #> 426   4.25    0 2.174316e+01 739.12842 739.12842 #> 427   4.26    0 2.152573e+01 739.23714 739.23714 #> 428   4.27    0 2.131047e+01 739.34477 739.34477 #> 429   4.28    0 2.109736e+01 739.45132 739.45132 #> 430   4.29    0 2.088639e+01 739.55680 739.55680 #> 431   4.30    0 2.067753e+01 739.66124 739.66124 #> 432   4.31    0 2.047075e+01 739.76462 739.76462 #> 433   4.32    0 2.026604e+01 739.86698 739.86698 #> 434   4.33    0 2.006338e+01 739.96831 739.96831 #> 435   4.34    0 1.986275e+01 740.06863 740.06863 #> 436   4.35    0 1.966412e+01 740.16794 740.16794 #> 437   4.36    0 1.946748e+01 740.26626 740.26626 #> 438   4.37    0 1.927281e+01 740.36360 740.36360 #> 439   4.38    0 1.908008e+01 740.45996 740.45996 #> 440   4.39    0 1.888928e+01 740.55536 740.55536 #> 441   4.40    0 1.870038e+01 740.64981 740.64981 #> 442   4.41    0 1.851338e+01 740.74331 740.74331 #> 443   4.42    0 1.832825e+01 740.83588 740.83588 #> 444   4.43    0 1.814496e+01 740.92752 740.92752 #> 445   4.44    0 1.796351e+01 741.01824 741.01824 #> 446   4.45    0 1.778388e+01 741.10806 741.10806 #> 447   4.46    0 1.760604e+01 741.19698 741.19698 #> 448   4.47    0 1.742998e+01 741.28501 741.28501 #> 449   4.48    0 1.725568e+01 741.37216 741.37216 #> 450   4.49    0 1.708312e+01 741.45844 741.45844 #> 451   4.50    0 1.691229e+01 741.54385 741.54385 #> 452   4.51    0 1.674317e+01 741.62842 741.62842 #> 453   4.52    0 1.657574e+01 741.71213 741.71213 #> 454   4.53    0 1.640998e+01 741.79501 741.79501 #> 455   4.54    0 1.624588e+01 741.87706 741.87706 #> 456   4.55    0 1.608342e+01 741.95829 741.95829 #> 457   4.56    0 1.592259e+01 742.03871 742.03871 #> 458   4.57    0 1.576336e+01 742.11832 742.11832 #> 459   4.58    0 1.560573e+01 742.19714 742.19714 #> 460   4.59    0 1.544967e+01 742.27516 742.27516 #> 461   4.60    0 1.529517e+01 742.35241 742.35241 #> 462   4.61    0 1.514222e+01 742.42889 742.42889 #> 463   4.62    0 1.499080e+01 742.50460 742.50460 #> 464   4.63    0 1.484089e+01 742.57955 742.57955 #> 465   4.64    0 1.469248e+01 742.65376 742.65376 #> 466   4.65    0 1.454556e+01 742.72722 742.72722 #> 467   4.66    0 1.440010e+01 742.79995 742.79995 #> 468   4.67    0 1.425610e+01 742.87195 742.87195 #> 469   4.68    0 1.411354e+01 742.94323 742.94323 #> 470   4.69    0 1.397241e+01 743.01380 743.01380 #> 471   4.70    0 1.383268e+01 743.08366 743.08366 #> 472   4.71    0 1.369435e+01 743.15282 743.15282 #> 473   4.72    0 1.355741e+01 743.22129 743.22129 #> 474   4.73    0 1.342184e+01 743.28908 743.28908 #> 475   4.74    0 1.328762e+01 743.35619 743.35619 #> 476   4.75    0 1.315474e+01 743.42263 743.42263 #> 477   4.76    0 1.302319e+01 743.48840 743.48840 #> 478   4.77    0 1.289296e+01 743.55352 743.55352 #> 479   4.78    0 1.276403e+01 743.61798 743.61798 #> 480   4.79    0 1.263639e+01 743.68180 743.68180 #> 481   4.80    0 1.251003e+01 743.74499 743.74499 #> 482   4.81    0 1.238493e+01 743.80754 743.80754 #> 483   4.82    0 1.226108e+01 743.86946 743.86946 #> 484   4.83    0 1.213847e+01 743.93077 743.93077 #> 485   4.84    0 1.201708e+01 743.99146 743.99146 #> 486   4.85    0 1.189691e+01 744.05154 744.05154 #> 487   4.86    0 1.177794e+01 744.11103 744.11103 #> 488   4.87    0 1.166016e+01 744.16992 744.16992 #> 489   4.88    0 1.154356e+01 744.22822 744.22822 #> 490   4.89    0 1.142813e+01 744.28594 744.28594 #> 491   4.90    0 1.131385e+01 744.34308 744.34308 #> 492   4.91    0 1.120071e+01 744.39965 744.39965 #> 493   4.92    0 1.108870e+01 744.45565 744.45565 #> 494   4.93    0 1.097781e+01 744.51109 744.51109 #> 495   4.94    0 1.086804e+01 744.56598 744.56598 #> 496   4.95    0 1.075935e+01 744.62032 744.62032 #> 497   4.96    0 1.065176e+01 744.67412 744.67412 #> 498   4.97    0 1.054524e+01 744.72738 744.72738 #> 499   4.98    0 1.043979e+01 744.78010 744.78010 #> 500   4.99    0 1.033539e+01 744.83230 744.83230 #> 501   5.00    0 1.023204e+01 744.88398 744.88398 #> 502   5.01    0 1.012972e+01 744.93514 744.93514 #> 503   5.02    0 1.002842e+01 744.98579 744.98579 #> 504   5.03    0 9.928138e+00 745.03593 745.03593 #> 505   5.04    0 9.828856e+00 745.08557 745.08557 #> 506   5.05    0 9.730568e+00 745.13472 745.13472 #> 507   5.06    0 9.633262e+00 745.18337 745.18337 #> 508   5.07    0 9.536929e+00 745.23154 745.23154 #> 509   5.08    0 9.441560e+00 745.27922 745.27922 #> 510   5.09    0 9.347145e+00 745.32643 745.32643 #> 511   5.10    0 9.253673e+00 745.37316 745.37316 #> 512   5.11    0 9.161136e+00 745.41943 745.41943 #> 513   5.12    0 9.069525e+00 745.46524 745.46524 #> 514   5.13    0 8.978830e+00 745.51059 745.51059 #> 515   5.14    0 8.889041e+00 745.55548 745.55548 #> 516   5.15    0 8.800151e+00 745.59992 745.59992 #> 517   5.16    0 8.712150e+00 745.64393 745.64393 #> 518   5.17    0 8.625028e+00 745.68749 745.68749 #> 519   5.18    0 8.538778e+00 745.73061 745.73061 #> 520   5.19    0 8.453390e+00 745.77331 745.77331 #> 521   5.20    0 8.368856e+00 745.81557 745.81557 #> 522   5.21    0 8.285168e+00 745.85742 745.85742 #> 523   5.22    0 8.202316e+00 745.89884 745.89884 #> 524   5.23    0 8.120293e+00 745.93985 745.93985 #> 525   5.24    0 8.039090e+00 745.98046 745.98046 #> 526   5.25    0 7.958699e+00 746.02065 746.02065 #> 527   5.26    0 7.879112e+00 746.06044 746.06044 #> 528   5.27    0 7.800321e+00 746.09984 746.09984 #> 529   5.28    0 7.722318e+00 746.13884 746.13884 #> 530   5.29    0 7.645094e+00 746.17745 746.17745 #> 531   5.30    0 7.568643e+00 746.21568 746.21568 #> 532   5.31    0 7.492957e+00 746.25352 746.25352 #> 533   5.32    0 7.418027e+00 746.29099 746.29099 #> 534   5.33    0 7.343847e+00 746.32808 746.32808 #> 535   5.34    0 7.270409e+00 746.36480 746.36480 #> 536   5.35    0 7.197705e+00 746.40115 746.40115 #> 537   5.36    0 7.125728e+00 746.43714 746.43714 #> 538   5.37    0 7.054470e+00 746.47276 746.47276 #> 539   5.38    0 6.983926e+00 746.50804 746.50804 #> 540   5.39    0 6.914086e+00 746.54296 746.54296 #> 541   5.40    0 6.844945e+00 746.57753 746.57753 #> 542   5.41    0 6.776496e+00 746.61175 746.61175 #> 543   5.42    0 6.708731e+00 746.64563 746.64563 #> 544   5.43    0 6.641644e+00 746.67918 746.67918 #> 545   5.44    0 6.575227e+00 746.71239 746.71239 #> 546   5.45    0 6.509475e+00 746.74526 746.74526 #> 547   5.46    0 6.444380e+00 746.77781 746.77781 #> 548   5.47    0 6.379936e+00 746.81003 746.81003 #> 549   5.48    0 6.316137e+00 746.84193 746.84193 #> 550   5.49    0 6.252976e+00 746.87351 746.87351 #> 551   5.50    0 6.190446e+00 746.90478 746.90478 #> 552   5.51    0 6.128542e+00 746.93573 746.93573 #> 553   5.52    0 6.067256e+00 746.96637 746.96637 #> 554   5.53    0 6.006584e+00 746.99671 746.99671 #> 555   5.54    0 5.946518e+00 747.02674 747.02674 #> 556   5.55    0 5.887053e+00 747.05647 747.05647 #> 557   5.56    0 5.828182e+00 747.08591 747.08591 #> 558   5.57    0 5.769900e+00 747.11505 747.11505 #> 559   5.58    0 5.712201e+00 747.14390 747.14390 #> 560   5.59    0 5.655079e+00 747.17246 747.17246 #> 561   5.60    0 5.598528e+00 747.20074 747.20074 #> 562   5.61    0 5.542543e+00 747.22873 747.22873 #> 563   5.62    0 5.487118e+00 747.25644 747.25644 #> 564   5.63    0 5.432246e+00 747.28388 747.28388 #> 565   5.64    0 5.377924e+00 747.31104 747.31104 #> 566   5.65    0 5.324145e+00 747.33793 747.33793 #> 567   5.66    0 5.270903e+00 747.36455 747.36455 #> 568   5.67    0 5.218194e+00 747.39090 747.39090 #> 569   5.68    0 5.166012e+00 747.41699 747.41699 #> 570   5.69    0 5.114352e+00 747.44282 747.44282 #> 571   5.70    0 5.063209e+00 747.46840 747.46840 #> 572   5.71    0 5.012577e+00 747.49371 747.49371 #> 573   5.72    0 4.962451e+00 747.51877 747.51877 #> 574   5.73    0 4.912826e+00 747.54359 747.54359 #> 575   5.74    0 4.863698e+00 747.56815 747.56815 #> 576   5.75    0 4.815061e+00 747.59247 747.59247 #> 577   5.76    0 4.766910e+00 747.61654 747.61654 #> 578   5.77    0 4.719241e+00 747.64038 747.64038 #> 579   5.78    0 4.672049e+00 747.66398 747.66398 #> 580   5.79    0 4.625328e+00 747.68734 747.68734 #> 581   5.80    0 4.579075e+00 747.71046 747.71046 #> 582   5.81    0 4.533284e+00 747.73336 747.73336 #> 583   5.82    0 4.487952e+00 747.75602 747.75602 #> 584   5.83    0 4.443072e+00 747.77846 747.77846 #> 585   5.84    0 4.398641e+00 747.80068 747.80068 #> 586   5.85    0 4.354655e+00 747.82267 747.82267 #> 587   5.86    0 4.311108e+00 747.84445 747.84445 #> 588   5.87    0 4.267997e+00 747.86600 747.86600 #> 589   5.88    0 4.225317e+00 747.88734 747.88734 #> 590   5.89    0 4.183064e+00 747.90847 747.90847 #> 591   5.90    0 4.141234e+00 747.92938 747.92938 #> 592   5.91    0 4.099821e+00 747.95009 747.95009 #> 593   5.92    0 4.058823e+00 747.97059 747.97059 #> 594   5.93    0 4.018235e+00 747.99088 747.99088 #> 595   5.94    0 3.978052e+00 748.01097 748.01097 #> 596   5.95    0 3.938272e+00 748.03086 748.03086 #> 597   5.96    0 3.898889e+00 748.05056 748.05056 #> 598   5.97    0 3.859900e+00 748.07005 748.07005 #> 599   5.98    0 3.821301e+00 748.08935 748.08935 #> 600   5.99    0 3.783088e+00 748.10846 748.10846 #> 601   6.00    0 3.745257e+00 748.12737 748.12737 #> 602   6.01    0 3.707805e+00 748.14610 748.14610 #> 603   6.02    0 3.670727e+00 748.16464 748.16464 #> 604   6.03    0 3.634019e+00 748.18299 748.18299 #> 605   6.04    0 3.597679e+00 748.20116 748.20116 #> 606   6.05    0 3.561702e+00 748.21915 748.21915 #> 607   6.06    0 3.526085e+00 748.23696 748.23696 #> 608   6.07    0 3.490825e+00 748.25459 748.25459 #> 609   6.08    0 3.455916e+00 748.27204 748.27204 #> 610   6.09    0 3.421357e+00 748.28932 748.28932 #> 611   6.10    0 3.387144e+00 748.30643 748.30643 #> 612   6.11    0 3.353272e+00 748.32336 748.32336 #> 613   6.12    0 3.319739e+00 748.34013 748.34013 #> 614   6.13    0 3.286542e+00 748.35673 748.35673 #> 615   6.14    0 3.253677e+00 748.37316 748.37316 #> 616   6.15    0 3.221140e+00 748.38943 748.38943 #> 617   6.16    0 3.188928e+00 748.40554 748.40554 #> 618   6.17    0 3.157039e+00 748.42148 748.42148 #> 619   6.18    0 3.125469e+00 748.43727 748.43727 #> 620   6.19    0 3.094214e+00 748.45289 748.45289 #> 621   6.20    0 3.063272e+00 748.46836 748.46836 #> 622   6.21    0 3.032639e+00 748.48368 748.48368 #> 623   6.22    0 3.002313e+00 748.49884 748.49884 #> 624   6.23    0 2.972290e+00 748.51386 748.51386 #> 625   6.24    0 2.942567e+00 748.52872 748.52872 #> 626   6.25    0 2.913141e+00 748.54343 748.54343 #> 627   6.26    0 2.884010e+00 748.55800 748.55800 #> 628   6.27    0 2.855170e+00 748.57242 748.57242 #> 629   6.28    0 2.826618e+00 748.58669 748.58669 #> 630   6.29    0 2.798352e+00 748.60082 748.60082 #> 631   6.30    0 2.770368e+00 748.61482 748.61482 #> 632   6.31    0 2.742665e+00 748.62867 748.62867 #> 633   6.32    0 2.715238e+00 748.64238 748.64238 #> 634   6.33    0 2.688086e+00 748.65596 748.65596 #> 635   6.34    0 2.661205e+00 748.66940 748.66940 #> 636   6.35    0 2.634593e+00 748.68270 748.68270 #> 637   6.36    0 2.608247e+00 748.69588 748.69588 #> 638   6.37    0 2.582164e+00 748.70892 748.70892 #> 639   6.38    0 2.556343e+00 748.72183 748.72183 #> 640   6.39    0 2.530779e+00 748.73461 748.73461 #> 641   6.40    0 2.505471e+00 748.74726 748.74726 #> 642   6.41    0 2.480417e+00 748.75979 748.75979 #> 643   6.42    0 2.455613e+00 748.77219 748.77219 #> 644   6.43    0 2.431056e+00 748.78447 748.78447 #> 645   6.44    0 2.406746e+00 748.79663 748.79663 #> 646   6.45    0 2.382678e+00 748.80866 748.80866 #> 647   6.46    0 2.358852e+00 748.82057 748.82057 #> 648   6.47    0 2.335263e+00 748.83237 748.83237 #> 649   6.48    0 2.311910e+00 748.84404 748.84404 #> 650   6.49    0 2.288791e+00 748.85560 748.85560 #> 651   6.50    0 2.265903e+00 748.86705 748.86705 #> 652   6.51    0 2.243244e+00 748.87838 748.87838 #> 653   6.52    0 2.220812e+00 748.88959 748.88959 #> 654   6.53    0 2.198604e+00 748.90070 748.90070 #> 655   6.54    0 2.176618e+00 748.91169 748.91169 #> 656   6.55    0 2.154852e+00 748.92257 748.92257 #> 657   6.56    0 2.133303e+00 748.93335 748.93335 #> 658   6.57    0 2.111970e+00 748.94401 748.94401 #> 659   6.58    0 2.090850e+00 748.95457 748.95457 #> 660   6.59    0 2.069942e+00 748.96503 748.96503 #> 661   6.60    0 2.049242e+00 748.97538 748.97538 #> 662   6.61    0 2.028750e+00 748.98562 748.98562 #> 663   6.62    0 2.008463e+00 748.99577 748.99577 #> 664   6.63    0 1.988378e+00 749.00581 749.00581 #> 665   6.64    0 1.968494e+00 749.01575 749.01575 #> 666   6.65    0 1.948809e+00 749.02560 749.02560 #> 667   6.66    0 1.929321e+00 749.03534 749.03534 #> 668   6.67    0 1.910028e+00 749.04499 749.04499 #> 669   6.68    0 1.890928e+00 749.05454 749.05454 #> 670   6.69    0 1.872018e+00 749.06399 749.06399 #> 671   6.70    0 1.853298e+00 749.07335 749.07335 #> 672   6.71    0 1.834765e+00 749.08262 749.08262 #> 673   6.72    0 1.816418e+00 749.09179 749.09179 #> 674   6.73    0 1.798253e+00 749.10087 749.10087 #> 675   6.74    0 1.780271e+00 749.10986 749.10986 #> 676   6.75    0 1.762468e+00 749.11877 749.11877 #> 677   6.76    0 1.744843e+00 749.12758 749.12758 #> 678   6.77    0 1.727395e+00 749.13630 749.13630 #> 679   6.78    0 1.710121e+00 749.14494 749.14494 #> 680   6.79    0 1.693020e+00 749.15349 749.15349 #> 681   6.80    0 1.676090e+00 749.16196 749.16196 #> 682   6.81    0 1.659329e+00 749.17034 749.17034 #> 683   6.82    0 1.642735e+00 749.17863 749.17863 #> 684   6.83    0 1.626308e+00 749.18685 749.18685 #> 685   6.84    0 1.610045e+00 749.19498 749.19498 #> 686   6.85    0 1.593945e+00 749.20303 749.20303 #> 687   6.86    0 1.578005e+00 749.21100 749.21100 #> 688   6.87    0 1.562225e+00 749.21889 749.21889 #> 689   6.88    0 1.546603e+00 749.22670 749.22670 #> 690   6.89    0 1.531137e+00 749.23443 749.23443 #> 691   6.90    0 1.515825e+00 749.24209 749.24209 #> 692   6.91    0 1.500667e+00 749.24967 749.24967 #> 693   6.92    0 1.485660e+00 749.25717 749.25717 #> 694   6.93    0 1.470804e+00 749.26460 749.26460 #> 695   6.94    0 1.456096e+00 749.27195 749.27195 #> 696   6.95    0 1.441535e+00 749.27923 749.27923 #> 697   6.96    0 1.427120e+00 749.28644 749.28644 #> 698   6.97    0 1.412848e+00 749.29358 749.29358 #> 699   6.98    0 1.398720e+00 749.30064 749.30064 #> 700   6.99    0 1.384733e+00 749.30763 749.30763 #> 701   7.00    0 1.370885e+00 749.31456 749.31456 #> 702   7.01    0 1.357176e+00 749.32141 749.32141 #> 703   7.02    0 1.343605e+00 749.32820 749.32820 #> 704   7.03    0 1.330169e+00 749.33492 749.33492 #> 705   7.04    0 1.316867e+00 749.34157 749.34157 #> 706   7.05    0 1.303698e+00 749.34815 749.34815 #> 707   7.06    0 1.290661e+00 749.35467 749.35467 #> 708   7.07    0 1.277755e+00 749.36112 749.36112 #> 709   7.08    0 1.264977e+00 749.36751 749.36751 #> 710   7.09    0 1.252327e+00 749.37384 749.37384 #> 711   7.10    0 1.239804e+00 749.38010 749.38010 #> 712   7.11    0 1.227406e+00 749.38630 749.38630 #> 713   7.12    0 1.215132e+00 749.39243 749.39243 #> 714   7.13    0 1.202981e+00 749.39851 749.39851 #> 715   7.14    0 1.190951e+00 749.40452 749.40452 #> 716   7.15    0 1.179041e+00 749.41048 749.41048 #> 717   7.16    0 1.167251e+00 749.41637 749.41637 #> 718   7.17    0 1.155578e+00 749.42221 749.42221 #> 719   7.18    0 1.144023e+00 749.42799 749.42799 #> 720   7.19    0 1.132582e+00 749.43371 749.43371 #> 721   7.20    0 1.121257e+00 749.43937 749.43937 #> 722   7.21    0 1.110044e+00 749.44498 749.44498 #> 723   7.22    0 1.098944e+00 749.45053 749.45053 #> 724   7.23    0 1.087954e+00 749.45602 749.45602 #> 725   7.24    0 1.077075e+00 749.46146 749.46146 #> 726   7.25    0 1.066304e+00 749.46685 749.46685 #> 727   7.26    0 1.055641e+00 749.47218 749.47218 #> 728   7.27    0 1.045084e+00 749.47746 749.47746 #> 729   7.28    0 1.034634e+00 749.48268 749.48268 #> 730   7.29    0 1.024287e+00 749.48786 749.48786 #> 731   7.30    0 1.014044e+00 749.49298 749.49298 #> 732   7.31    0 1.003904e+00 749.49805 749.49805 #> 733   7.32    0 9.938649e-01 749.50307 749.50307 #> 734   7.33    0 9.839263e-01 749.50804 749.50804 #> 735   7.34    0 9.740870e-01 749.51296 749.51296 #> 736   7.35    0 9.643461e-01 749.51783 749.51783 #> 737   7.36    0 9.547027e-01 749.52265 749.52265 #> 738   7.37    0 9.451556e-01 749.52742 749.52742 #> 739   7.38    0 9.357041e-01 749.53215 749.53215 #> 740   7.39    0 9.263470e-01 749.53683 749.53683 #> 741   7.40    0 9.170836e-01 749.54146 749.54146 #> 742   7.41    0 9.079127e-01 749.54604 749.54604 #> 743   7.42    0 8.988336e-01 749.55058 749.55058 #> 744   7.43    0 8.898453e-01 749.55508 749.55508 #> 745   7.44    0 8.809468e-01 749.55953 749.55953 #> 746   7.45    0 8.721373e-01 749.56393 749.56393 #> 747   7.46    0 8.634160e-01 749.56829 749.56829 #> 748   7.47    0 8.547818e-01 749.57261 749.57261 #> 749   7.48    0 8.462340e-01 749.57688 749.57688 #> 750   7.49    0 8.377717e-01 749.58111 749.58111 #> 751   7.50    0 8.293939e-01 749.58530 749.58530 #> 752   7.51    0 8.211000e-01 749.58945 749.58945 #> 753   7.52    0 8.128890e-01 749.59356 749.59356 #> 754   7.53    0 8.047601e-01 749.59762 749.59762 #> 755   7.54    0 7.967125e-01 749.60164 749.60164 #> 756   7.55    0 7.887454e-01 749.60563 749.60563 #> 757   7.56    0 7.808579e-01 749.60957 749.60957 #> 758   7.57    0 7.730493e-01 749.61348 749.61348 #> 759   7.58    0 7.653189e-01 749.61734 749.61734 #> 760   7.59    0 7.576657e-01 749.62117 749.62117 #> 761   7.60    0 7.500890e-01 749.62496 749.62496 #> 762   7.61    0 7.425881e-01 749.62871 749.62871 #> 763   7.62    0 7.351622e-01 749.63242 749.63242 #> 764   7.63    0 7.278106e-01 749.63609 749.63609 #> 765   7.64    0 7.205325e-01 749.63973 749.63973 #> 766   7.65    0 7.133272e-01 749.64334 749.64334 #> 767   7.66    0 7.061939e-01 749.64690 749.64690 #> 768   7.67    0 6.991320e-01 749.65043 749.65043 #> 769   7.68    0 6.921407e-01 749.65393 749.65393 #> 770   7.69    0 6.852192e-01 749.65739 749.65739 #> 771   7.70    0 6.783671e-01 749.66082 749.66082 #> 772   7.71    0 6.715834e-01 749.66421 749.66421 #> 773   7.72    0 6.648676e-01 749.66757 749.66757 #> 774   7.73    0 6.582189e-01 749.67089 749.67089 #> 775   7.74    0 6.516367e-01 749.67418 749.67418 #> 776   7.75    0 6.451203e-01 749.67744 749.67744 #> 777   7.76    0 6.386691e-01 749.68067 749.68067 #> 778   7.77    0 6.322824e-01 749.68386 749.68386 #> 779   7.78    0 6.259596e-01 749.68702 749.68702 #> 780   7.79    0 6.197000e-01 749.69015 749.69015 #> 781   7.80    0 6.135030e-01 749.69325 749.69325 #> 782   7.81    0 6.073680e-01 749.69632 749.69632 #> 783   7.82    0 6.012943e-01 749.69935 749.69935 #> 784   7.83    0 5.952814e-01 749.70236 749.70236 #> 785   7.84    0 5.893285e-01 749.70534 749.70534 #> 786   7.85    0 5.834353e-01 749.70828 749.70828 #> 787   7.86    0 5.776009e-01 749.71120 749.71120 #> 788   7.87    0 5.718249e-01 749.71409 749.71409 #> 789   7.88    0 5.661066e-01 749.71695 749.71695 #> 790   7.89    0 5.604456e-01 749.71978 749.71978 #> 791   7.90    0 5.548411e-01 749.72258 749.72258 #> 792   7.91    0 5.492927e-01 749.72535 749.72535 #> 793   7.92    0 5.437998e-01 749.72810 749.72810 #> 794   7.93    0 5.383618e-01 749.73082 749.73082 #> 795   7.94    0 5.329782e-01 749.73351 749.73351 #> 796   7.95    0 5.276484e-01 749.73618 749.73618 #> 797   7.96    0 5.223719e-01 749.73881 749.73881 #> 798   7.97    0 5.171482e-01 749.74143 749.74143 #> 799   7.98    0 5.119767e-01 749.74401 749.74401 #> 800   7.99    0 5.068569e-01 749.74657 749.74657 #> 801   8.00    0 5.017884e-01 749.74911 749.74911 #> 802   8.01    0 4.967705e-01 749.75161 749.75161 #> 803   8.02    0 4.918028e-01 749.75410 749.75410 #> 804   8.03    0 4.868847e-01 749.75656 749.75656 #> 805   8.04    0 4.820159e-01 749.75899 749.75899 #> 806   8.05    0 4.771957e-01 749.76140 749.76140 #> 807   8.06    0 4.724238e-01 749.76379 749.76379 #> 808   8.07    0 4.676995e-01 749.76615 749.76615 #> 809   8.08    0 4.630226e-01 749.76849 749.76849 #> 810   8.09    0 4.583923e-01 749.77080 749.77080 #> 811   8.10    0 4.538084e-01 749.77310 749.77310 #> 812   8.11    0 4.492703e-01 749.77536 749.77536 #> 813   8.12    0 4.447776e-01 749.77761 749.77761 #> 814   8.13    0 4.403298e-01 749.77984 749.77984 #> 815   8.14    0 4.359265e-01 749.78204 749.78204 #> 816   8.15    0 4.315673e-01 749.78422 749.78422 #> 817   8.16    0 4.272516e-01 749.78637 749.78637 #> 818   8.17    0 4.229791e-01 749.78851 749.78851 #> 819   8.18    0 4.187493e-01 749.79063 749.79063 #> 820   8.19    0 4.145618e-01 749.79272 749.79272 #> 821   8.20    0 4.104162e-01 749.79479 749.79479 #> 822   8.21    0 4.063120e-01 749.79684 749.79684 #> 823   8.22    0 4.022489e-01 749.79888 749.79888 #> 824   8.23    0 3.982264e-01 749.80089 749.80089 #> 825   8.24    0 3.942441e-01 749.80288 749.80288 #> 826   8.25    0 3.903017e-01 749.80485 749.80485 #> 827   8.26    0 3.863987e-01 749.80680 749.80680 #> 828   8.27    0 3.825347e-01 749.80873 749.80873 #> 829   8.28    0 3.787094e-01 749.81065 749.81065 #> 830   8.29    0 3.749223e-01 749.81254 749.81254 #> 831   8.30    0 3.711730e-01 749.81441 749.81441 #> 832   8.31    0 3.674613e-01 749.81627 749.81627 #> 833   8.32    0 3.637867e-01 749.81811 749.81811 #> 834   8.33    0 3.601488e-01 749.81993 749.81993 #> 835   8.34    0 3.565473e-01 749.82173 749.82173 #> 836   8.35    0 3.529819e-01 749.82351 749.82351 #> 837   8.36    0 3.494520e-01 749.82527 749.82527 #> 838   8.37    0 3.459575e-01 749.82702 749.82702 #> 839   8.38    0 3.424980e-01 749.82875 749.82875 #> 840   8.39    0 3.390730e-01 749.83046 749.83046 #> 841   8.40    0 3.356822e-01 749.83216 749.83216 #> 842   8.41    0 3.323254e-01 749.83384 749.83384 #> 843   8.42    0 3.290022e-01 749.83550 749.83550 #> 844   8.43    0 3.257121e-01 749.83714 749.83714 #> 845   8.44    0 3.224550e-01 749.83877 749.83877 #> 846   8.45    0 3.192305e-01 749.84038 749.84038 #> 847   8.46    0 3.160382e-01 749.84198 749.84198 #> 848   8.47    0 3.128778e-01 749.84356 749.84356 #> 849   8.48    0 3.097490e-01 749.84513 749.84513 #> 850   8.49    0 3.066515e-01 749.84667 749.84667 #> 851   8.50    0 3.035850e-01 749.84821 749.84821 #> 852   8.51    0 3.005492e-01 749.84973 749.84973 #> 853   8.52    0 2.975437e-01 749.85123 749.85123 #> 854   8.53    0 2.945682e-01 749.85272 749.85272 #> 855   8.54    0 2.916225e-01 749.85419 749.85419 #> 856   8.55    0 2.887063e-01 749.85565 749.85565 #> 857   8.56    0 2.858193e-01 749.85709 749.85709 #> 858   8.57    0 2.829611e-01 749.85852 749.85852 #> 859   8.58    0 2.801315e-01 749.85993 749.85993 #> 860   8.59    0 2.773301e-01 749.86133 749.86133 #> 861   8.60    0 2.745568e-01 749.86272 749.86272 #> 862   8.61    0 2.718113e-01 749.86409 749.86409 #> 863   8.62    0 2.690932e-01 749.86545 749.86545 #> 864   8.63    0 2.664022e-01 749.86680 749.86680 #> 865   8.64    0 2.637382e-01 749.86813 749.86813 #> 866   8.65    0 2.611008e-01 749.86945 749.86945 #> 867   8.66    0 2.584898e-01 749.87076 749.87076 #> 868   8.67    0 2.559049e-01 749.87205 749.87205 #> 869   8.68    0 2.533459e-01 749.87333 749.87333 #> 870   8.69    0 2.508124e-01 749.87459 749.87459 #> 871   8.70    0 2.483043e-01 749.87585 749.87585 #> 872   8.71    0 2.458212e-01 749.87709 749.87709 #> 873   8.72    0 2.433630e-01 749.87832 749.87832 #> 874   8.73    0 2.409294e-01 749.87954 749.87954 #> 875   8.74    0 2.385201e-01 749.88074 749.88074 #> 876   8.75    0 2.361349e-01 749.88193 749.88193 #> 877   8.76    0 2.337736e-01 749.88311 749.88311 #> 878   8.77    0 2.314358e-01 749.88428 749.88428 #> 879   8.78    0 2.291215e-01 749.88544 749.88544 #> 880   8.79    0 2.268302e-01 749.88658 749.88658 #> 881   8.80    0 2.245619e-01 749.88772 749.88772 #> 882   8.81    0 2.223163e-01 749.88884 749.88884 #> 883   8.82    0 2.200932e-01 749.88995 749.88995 #> 884   8.83    0 2.178922e-01 749.89105 749.89105 #> 885   8.84    0 2.157133e-01 749.89214 749.89214 #> 886   8.85    0 2.135562e-01 749.89322 749.89322 #> 887   8.86    0 2.114206e-01 749.89429 749.89429 #> 888   8.87    0 2.093064e-01 749.89535 749.89535 #> 889   8.88    0 2.072133e-01 749.89639 749.89639 #> 890   8.89    0 2.051412e-01 749.89743 749.89743 #> 891   8.90    0 2.030898e-01 749.89846 749.89846 #> 892   8.91    0 2.010589e-01 749.89947 749.89947 #> 893   8.92    0 1.990483e-01 749.90048 749.90048 #> 894   8.93    0 1.970578e-01 749.90147 749.90147 #> 895   8.94    0 1.950872e-01 749.90246 749.90246 #> 896   8.95    0 1.931364e-01 749.90343 749.90343 #> 897   8.96    0 1.912050e-01 749.90440 749.90440 #> 898   8.97    0 1.892930e-01 749.90535 749.90535 #> 899   8.98    0 1.874000e-01 749.90630 749.90630 #> 900   8.99    0 1.855260e-01 749.90724 749.90724 #> 901   9.00    0 1.836708e-01 749.90816 749.90816 #> 902   9.01    0 1.818341e-01 749.90908 749.90908 #> 903   9.02    0 1.800157e-01 749.90999 749.90999 #> 904   9.03    0 1.782156e-01 749.91089 749.91089 #> 905   9.04    0 1.764334e-01 749.91178 749.91178 #> 906   9.05    0 1.746691e-01 749.91267 749.91267 #> 907   9.06    0 1.729224e-01 749.91354 749.91354 #> 908   9.07    0 1.711932e-01 749.91440 749.91440 #> 909   9.08    0 1.694812e-01 749.91526 749.91526 #> 910   9.09    0 1.677864e-01 749.91611 749.91611 #> 911   9.10    0 1.661086e-01 749.91695 749.91695 #> 912   9.11    0 1.644475e-01 749.91778 749.91778 #> 913   9.12    0 1.628030e-01 749.91860 749.91860 #> 914   9.13    0 1.611750e-01 749.91941 749.91941 #> 915   9.14    0 1.595632e-01 749.92022 749.92022 #> 916   9.15    0 1.579676e-01 749.92102 749.92102 #> 917   9.16    0 1.563879e-01 749.92181 749.92181 #> 918   9.17    0 1.548240e-01 749.92259 749.92259 #> 919   9.18    0 1.532758e-01 749.92336 749.92336 #> 920   9.19    0 1.517430e-01 749.92413 749.92413 #> 921   9.20    0 1.502256e-01 749.92489 749.92489 #> 922   9.21    0 1.487233e-01 749.92564 749.92564 #> 923   9.22    0 1.472361e-01 749.92638 749.92638 #> 924   9.23    0 1.457637e-01 749.92712 749.92712 #> 925   9.24    0 1.443061e-01 749.92785 749.92785 #> 926   9.25    0 1.428630e-01 749.92857 749.92857 #> 927   9.26    0 1.414344e-01 749.92928 749.92928 #> 928   9.27    0 1.400201e-01 749.92999 749.92999 #> 929   9.28    0 1.386199e-01 749.93069 749.93069 #> 930   9.29    0 1.372337e-01 749.93138 749.93138 #> 931   9.30    0 1.358613e-01 749.93207 749.93207 #> 932   9.31    0 1.345027e-01 749.93275 749.93275 #> 933   9.32    0 1.331577e-01 749.93342 749.93342 #> 934   9.33    0 1.318261e-01 749.93409 749.93409 #> 935   9.34    0 1.305079e-01 749.93475 749.93475 #> 936   9.35    0 1.292028e-01 749.93540 749.93540 #> 937   9.36    0 1.279108e-01 749.93604 749.93604 #> 938   9.37    0 1.266316e-01 749.93668 749.93668 #> 939   9.38    0 1.253653e-01 749.93732 749.93732 #> 940   9.39    0 1.241117e-01 749.93794 749.93794 #> 941   9.40    0 1.228706e-01 749.93856 749.93856 #> 942   9.41    0 1.216419e-01 749.93918 749.93918 #> 943   9.42    0 1.204254e-01 749.93979 749.93979 #> 944   9.43    0 1.192212e-01 749.94039 749.94039 #> 945   9.44    0 1.180290e-01 749.94099 749.94099 #> 946   9.45    0 1.168487e-01 749.94158 749.94158 #> 947   9.46    0 1.156802e-01 749.94216 749.94216 #> 948   9.47    0 1.145234e-01 749.94274 749.94274 #> 949   9.48    0 1.133782e-01 749.94331 749.94331 #> 950   9.49    0 1.122444e-01 749.94388 749.94388 #> 951   9.50    0 1.111219e-01 749.94444 749.94444 #> 952   9.51    0 1.100107e-01 749.94499 749.94499 #> 953   9.52    0 1.089106e-01 749.94554 749.94554 #> 954   9.53    0 1.078215e-01 749.94609 749.94609 #> 955   9.54    0 1.067433e-01 749.94663 749.94663 #> 956   9.55    0 1.056758e-01 749.94716 749.94716 #> 957   9.56    0 1.046191e-01 749.94769 749.94769 #> 958   9.57    0 1.035729e-01 749.94821 749.94821 #> 959   9.58    0 1.025372e-01 749.94873 749.94873 #> 960   9.59    0 1.015118e-01 749.94924 749.94924 #> 961   9.60    0 1.004967e-01 749.94975 749.94975 #> 962   9.61    0 9.949171e-02 749.95025 749.95025 #> 963   9.62    0 9.849680e-02 749.95075 749.95075 #> 964   9.63    0 9.751183e-02 749.95124 749.95124 #> 965   9.64    0 9.653671e-02 749.95173 749.95173 #> 966   9.65    0 9.557134e-02 749.95221 749.95221 #> 967   9.66    0 9.461563e-02 749.95269 749.95269 #> 968   9.67    0 9.366947e-02 749.95317 749.95317 #> 969   9.68    0 9.273278e-02 749.95363 749.95363 #> 970   9.69    0 9.180545e-02 749.95410 749.95410 #> 971   9.70    0 9.088740e-02 749.95456 749.95456 #> 972   9.71    0 8.997852e-02 749.95501 749.95501 #> 973   9.72    0 8.907874e-02 749.95546 749.95546 #> 974   9.73    0 8.818795e-02 749.95591 749.95591 #> 975   9.74    0 8.730607e-02 749.95635 749.95635 #> 976   9.75    0 8.643301e-02 749.95678 749.95678 #> 977   9.76    0 8.556868e-02 749.95722 749.95722 #> 978   9.77    0 8.471299e-02 749.95764 749.95764 #> 979   9.78    0 8.386586e-02 749.95807 749.95807 #> 980   9.79    0 8.302721e-02 749.95849 749.95849 #> 981   9.80    0 8.219693e-02 749.95890 749.95890 #> 982   9.81    0 8.137496e-02 749.95931 749.95931 #> 983   9.82    0 8.056121e-02 749.95972 749.95972 #> 984   9.83    0 7.975560e-02 749.96012 749.96012 #> 985   9.84    0 7.895805e-02 749.96052 749.96052 #> 986   9.85    0 7.816847e-02 749.96092 749.96092 #> 987   9.86    0 7.738678e-02 749.96131 749.96131 #> 988   9.87    0 7.661291e-02 749.96169 749.96169 #> 989   9.88    0 7.584678e-02 749.96208 749.96208 #> 990   9.89    0 7.508832e-02 749.96246 749.96246 #> 991   9.90    0 7.433743e-02 749.96283 749.96283 #> 992   9.91    0 7.359406e-02 749.96320 749.96320 #> 993   9.92    0 7.285812e-02 749.96357 749.96357 #> 994   9.93    0 7.212954e-02 749.96394 749.96394 #> 995   9.94    0 7.140824e-02 749.96430 749.96430 #> 996   9.95    0 7.069416e-02 749.96465 749.96465 #> 997   9.96    0 6.998722e-02 749.96501 749.96501 #> 998   9.97    0 6.928735e-02 749.96536 749.96536 #> 999   9.98    0 6.859447e-02 749.96570 749.96570 #> 1000  9.99    0 6.790853e-02 749.96605 749.96605 #> 1001 10.00    0 6.722944e-02 749.96639 749.96639"},{"path":"/articles/denim_vs_deSolve.html","id":"comparison-between-desolve-and-denim","dir":"Articles","previous_headings":"","what":"Comparison between deSolve and denim","title":"denim vs deSolve","text":"Using deSolve, can replicate Erlang distribution exponential distribution testing","code":"library(denim) library(deSolve) ## Warning: package 'deSolve' was built under R version 4.3.1 # --- Transition def for denim transitions <- list(   \"S -> I\" = d_exponential(0.2),   \"I -> R\" = d_gamma(3, 2) ) parameters <- c(rate = 0.2, scale = 3, shape=2)  initialValues <- c(S = 999, I = 1, I1 = 1, I2=0, R=0)  # --- Transition def for deSolve transition_func <- function(t, state, param){   with(as.list( c(state, param) ), {       gamma_rate = 1/scale       dS = -rate*S       # apply linear chain trick       dI1 = rate*S - gamma_rate*I1       dI2 = gamma_rate*I1 - gamma_rate*I2       dI =  dI1 + dI2       dR = gamma_rate*I2       list(c(dS, dI, dI1, dI2, dR))   }) }  # --- Timestep definition simulationDuration <- 20  timestep <- 0.01 # small timestep required for comparison"},{"path":"/articles/denim_vs_deSolve.html","id":"run-simulation-with-denim","dir":"Articles","previous_headings":"Comparison between deSolve and denim","what":"Run simulation with denim","title":"denim vs deSolve","text":"","code":"denim_start <- Sys.time() mod <- sim(transitions = transitions, initialValues = initialValues, parameters, simulationDuration = simulationDuration, timeStep = timestep) denim_end <- Sys.time()  # --- show output head(mod[mod$Time %in% 1:simulationDuration,]) ##     Time        S        I          R ## 101    1 817.9120 179.1000   2.987976 ## 201    2 669.6497 310.9933  19.356938 ## 301    3 548.2628 398.6234  53.113777 ## 401    4 448.8796 448.3469 102.773515 ## 501    5 367.5116 467.9487 164.539700 ## 601    6 300.8930 465.0545 234.052532"},{"path":"/articles/denim_vs_deSolve.html","id":"run-simulation-with-desolve","dir":"Articles","previous_headings":"Comparison between deSolve and denim","what":"Run simulation with deSolve","title":"denim vs deSolve","text":"","code":"times <- seq(0, simulationDuration, timestep)  desolve_start <- Sys.time() ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func) desolve_end <- Sys.time()  # --- show output ode_mod <- as.data.frame(ode_mod) head(ode_mod[ode_mod$time %in% 1:simulationDuration, c(\"time\", \"S\", \"I\", \"R\")]) ##     time        S        I          R ## 101    1 817.9120 179.0585   3.029466 ## 201    2 669.6497 310.8686  19.481654 ## 301    3 548.2628 398.4125  53.324630 ## 401    4 448.8796 448.0650 103.055392 ## 501    5 367.5116 467.6172 164.871207 ## 601    6 300.8930 464.6948 234.412204"},{"path":"/articles/denim_vs_deSolve.html","id":"execution-time-comparison","dir":"Articles","previous_headings":"Comparison between deSolve and denim","what":"Execution time comparison","title":"denim vs deSolve","text":"denim takes approximately 5.36 times long deSolve compute result given specifications . significant difference can attributed difference approaches: deSolve solves system ODEs denim iterates timestep updates population compartment approach denim allow flexibility types dwell time distributions, computation time scales timestep grows smaller (O(n) time complexity).","code":""},{"path":"/articles/denim_vs_deSolve.html","id":"plot-the-result","dir":"Articles","previous_headings":"","what":"Plot the result","title":"denim vs deSolve","text":"","code":"# increase timestep before plotting mod <- mod[mod$Time %in% seq(0, simulationDuration, 0.2),] ode_mod <- ode_mod[ode_mod$time %in% seq(0, simulationDuration, 0.2),]"},{"path":[]},{"path":"/articles/denim_vs_deSolve.html","id":"implementation-using-desolve","dir":"Articles","previous_headings":"Comparison with SEIR model","what":"Implementation using deSolve","title":"denim vs deSolve","text":"Runtime deSolve ~ 0.013","code":"library(deSolve) parameters <- c(scale_I = 4, shape_I=2,                 scale_R = 3, shape_R = 2,                 timeStepDur = 1, R0 = 3.5, N = 1e6)  initialValues <- c(S = 999999, E1 = 1,                    E2 = 0, E = 0, I1=0,                     I2=0, I=0, R=0                    )  # --- Transition def for deSolve transition_func <- function(t, state, param){   with(as.list( c(state, param) ), {       gamma_rate_I = 1/scale_I       gamma_rate_R = 1/scale_R              tr = scale_R*shape_R              dS = - (R0/tr) * S * I/N       # apply linear chain trick       dE1 = (R0/tr) * S * I/N - gamma_rate_I*E1       dE2 = gamma_rate_I*E1 - gamma_rate_I*E2       dE = dE1 + dE2       dI1 = gamma_rate_I*E2 - gamma_rate_R*I1       dI2 = gamma_rate_R*I1 - gamma_rate_R*I2       dI =  dI1 + dI2        dR = gamma_rate_R*I2       list(c(dS, dE1, dE2, dE, dI1, dI2, dI, dR))   }) }  times <- seq(0, 210, 1)  # ------ Compute mean for 10 runs ------ # runtimes <- sapply(1:10, #   function(i){ #     time <- system.time( #       ode(y = initialValues, times = times, parms = parameters, func = transition_func) #     ) #     time[[\"elapsed\"]] #      #   } #    # ) # mean(runtimes)  ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func)  # --- show output ode_mod <- as.data.frame(ode_mod)"},{"path":"/articles/denim_vs_deSolve.html","id":"implementation-using-denim","dir":"Articles","previous_headings":"Comparison with SEIR model","what":"Implementation using denim","title":"denim vs deSolve","text":"Runtime denim ~ 1.0548","code":"denim_model <- list(   \"S -> E\" = \"(R0/tr) * timeStepDur * S * (I/N)\", # formulate according that of uSEIR method   \"E -> I\" = d_gamma(scale = 4, shape = 2),   \"I -> R\" = d_gamma(scale = 3, shape = 2) )  initialValues <- c(S = 999999, E = 1, I= 0, R= 0) parameters <- c(R0 = 3.5,                  tr = 3*2, # compute mean recovery time, for gamma it's scale*shape                 N = 1e6, timeStepDur = 0.01)  # ------ Compute mean for 10 runs ------ # runtimes <- sapply(1:10, #   function (i) { #     time <- system.time( #       sim(transitions = denim_model,  #                      initialValues = initialValues, #                      parameters = parameters, #                      simulationDuration = 210, timeStep = 0.01) #     ) #     return(time[[\"elapsed\"]]) #   }) # mean(runtimes)  mod <- sim(transitions = denim_model,                       initialValues = initialValues,                      parameters = parameters,                      simulationDuration = 210, timeStep = 0.01)  # denim_out[, c(\"S\",\"E\", \"I\", \"R\")] <- denim_out[, c(\"S\",\"E\", \"I\", \"R\")]/1e6 plot(mod)"},{"path":[]},{"path":"/articles/denim_vs_uSEIR.html","id":"useir-defined-in-python","dir":"Articles","previous_headings":"","what":"uSEIR defined in Python","title":"denim vs uSEIR","text":"Source code: https://github.com/jjgomezcadenas/useirn/blob/master/nb/uSEIR.ipynb","code":"library(reticulate) ## Warning: package 'reticulate' was built under R version 4.3.1 # use_python(\"/opt/anaconda3/envs/bnn/bin/python\", required = TRUE) use_condaenv(condaenv='bnn', required = TRUE) matplotlib <- import(\"matplotlib\") matplotlib$use(\"Agg\", force = TRUE) from scipy.stats import gamma import matplotlib import matplotlib.pyplot as plt matplotlib.use('Agg') from matplotlib.pyplot import imshow plt.rcParams[\"figure.figsize\"] = 10, 8 plt.rcParams[\"font.size\"     ] = 14 plt.rcParams['savefig.format'] = 'png' import numpy as np import pandas as pd import pyarrow as pa  def plot_useir(dfs, lbls, T = 'uSEIR', figsize=(10,10)):          fig = plt.figure(figsize=figsize)          ax=plt.subplot(1,2,1)     for i, df in enumerate(dfs):         df.head()         ls = f'S-{lbls[i]}'         lr = f'R-{lbls[i]}'         plt.plot(df.t, df.S, lw=2, label=ls)         plt.plot(df.t, df.R, lw=2, label=lr)      plt.xlabel('time (days)')     plt.ylabel('Fraction of population')     plt.legend()     plt.title(T)          ax=plt.subplot(1,2,2)     for i, df in enumerate(dfs):         le = f'E-{lbls[i]}'         li = f'I-{lbls[i]}'         plt.plot(df.t, df.E, lw=2, label=le)         plt.plot(df.t, df.I, lw=2, label=li)      plt.xlabel('time (days)')     plt.ylabel('Fraction of population')     plt.legend()          plt.title(T)     plt.tight_layout()     plt.show()  def solve_uSeir(ti_shape     = 5.5,                      ti_scale     = 1,                     tr_shape     = 6.5,                      tr_scale     = 1,                    R0           = 3.5):     \"\"\"     The pure python version only uses the gamma distribution and fine grain.     It's sole purpose is benchmarking the cython version     \"\"\"          # This function is similar to calcTransitionProb in denim     def compute_gamma_pde(t_shape, t_scale, eps, tol):         # compute dwell time steps unit         ne = int(gamma.ppf(tol, a=t_shape, scale=t_scale) / eps)         # transition rate per timestep          pdE = np.zeros(ne)         cd1 = 0         for i in np.arange(ne):             # equivalent to computing sum(pi_i) in denim             cd2    = gamma.cdf(i*eps, a=t_shape, scale=t_scale)             pdE[i] = cd2-cd1 # equivalent compute current transition prob in denim             cd1    = cd2                  # return values         # ne: equivalent of dwell time in time steps         # pdE: equivalent to p_i in denim paper         return ne, pdE      N       = 1e+6     Smin    = 1e-10      Emin    = 1e-10     nmax    = 21000 # max time steps     eps     = 0.01     tr = tr_shape*tr_scale     prob    = R0 / tr      pn      = prob * eps     tol     = 0.9999 # similar to the error tolerance in denim      nE, pdE = compute_gamma_pde(ti_shape, ti_scale, eps, tol)     nI, pdI = compute_gamma_pde(tr_shape, tr_scale, eps, tol)      print(f' Function solve_uSeir: time epsilon = {eps}')     print(f' statistical distribution is Gamma , ti = {ti_shape*ti_scale}, tr = {tr_shape*tr_scale}')     print(f' number of exposed compartments = {nE}, infected compartments = {nI}')     print(f' R0 = {R0}, prob = {prob}, pn = {pn}')           I   = np.zeros(nI)     E   = np.zeros(nE)     S    = 1 - 1/N     E[0] = 1 / N          R    = 0     sI   = 0      TT = []     SS = []     EE = []     II = []     RR = []     n    = 0          while True:                  # update R compartment           # I[0] here is equivalent to population that will move to R at t + 0 (i.e. current time step)          R += I[0]          # ----- Simulate for S-I first -----         end = nI - 1 # compute dwell time         # update population for I_k where I_k is the population that will move to R at time t + k (in time step)         for k in np.arange(end):             I[k] = I[k+1] + pdI[k] * E[0]              # pdI[k] * E[0] is just contact rate             # where I[k+1] is value computed from previous timestep (i.e. shift I[k+1] from old iteration to I[k] in current iteration)         I[end] = pdI[end] * E[0]                  #print(I)          # ----- Simulate I-E transition -----         end = nE - 1         for k in np.arange(end):             E[k] = E[k+1] + pn * pdE[k] * sI * S         E[end]   = pn * pdE[end] * sI * S          #print(E)                  # pn * sI * S equivalent to probs * epsilon * S * I/N         S  = S - pn * sI * S                  sI = np.sum(I)         sE = np.sum(E)                  #print(sI)         #print(sE)         TT.append(n * eps)         SS.append(S)         EE.append(sE)         II.append(sI)         RR.append(R)                  #print(f't = {n*eps} S = {S} E ={sE} I ={sI} R = {R}')         n+=1         if (sE < Smin and sI < Emin) or n > nmax:             break          df = pd.DataFrame(list(zip(TT, SS, EE, II, RR)),                 columns =['t', 'S', 'E', 'I', 'R'])           return df  # print(plt.gcf().canvas.get_supported_filetypes())"},{"path":"/articles/denim_vs_uSEIR.html","id":"run-simulation-using-pure-python-implementation","dir":"Articles","previous_headings":"uSEIR defined in Python","what":"Run simulation using pure Python implementation","title":"denim vs uSEIR","text":"Run time pure Python implementation ~ 59.9872","code":"import time from statistics import mean  runs = []  # --- Get runtime for 10 runs ---- # for i in range(10): #   start = time.time() #   df = solve_uSeir(ti_shape     = 2, #                      ti_scale     = 4, #                      tr_shape     = 2, #                      tr_scale     = 3, #                      R0           = 3.5) #   end = time.time() #   runs = runs + [end - start] #   mean(runs)    # plot_useir((df,), ('G',), T = 'uSEIR', figsize=(14,8)) # print(f'python solve_seir call: dr = {end-start}')"},{"path":"/articles/denim_vs_uSEIR.html","id":"run-simulation-using-cython-implementation","dir":"Articles","previous_headings":"uSEIR defined in Python","what":"Run simulation using cython implementation","title":"denim vs uSEIR","text":"Run time Cython implementation ~ 0.4140","code":"# import precompiled cython module import sys sys.path.insert(0, \"../supplements\") import useir import time  runs = [] # --- Get runtime for 10 runs ---- # for i in range(10): #   start = time.time() #   df = useir.csolve_uSeir(dist = \"gamma\", #                     ti_shape     = 2,   #                      ti_scale     = 4,  #                      tr_shape     = 2,   #                      tr_scale     = 3, #                      R0           = 3.5 #   ) #   end = time.time() #  #   runs = runs + [end - start] # mean(runs)  df = useir.csolve_uSeir(dist = \"gamma\",                     ti_shape     = 2,                        ti_scale     = 4,                       tr_shape     = 2,                        tr_scale     = 3,                      R0           = 3.5   ) ##  Function compute_pde with sampling = Fine, time epsilon = 0.01 ##  statistical distribution = gamma, ti = 8.0, tr = 6.0 ##  number of exposed compartments = 4702, infected compartments = 3526 ## len pdE = 4702, max(pdE) =0.0009196976461058881 len pdi = 3526 max(pdI) =0.0012262625368251734 ## prob = 0.5833333333333334, pn = 0.005833333333333334 # convert to pyarrow table for easy conversion to R data.frames to_r_df = pa.Table.from_pandas(df)"},{"path":"/articles/denim_vs_uSEIR.html","id":"run-simulation-using-denim","dir":"Articles","previous_headings":"uSEIR defined in Python","what":"Run simulation using denim","title":"denim vs uSEIR","text":"Run time denim implementation ~ 1.002","code":"library(denim)  denim_model <- list(   \"S -> E\" = \"(R0/tr) * timeStepDur * S * (I/N)\", # formulate according that of uSEIR method   \"E -> I\" = d_gamma(scale = 4, shape = 2),   \"I -> R\" = d_gamma(scale = 3, shape = 2) )   initialValues <- c(S = 999999, E = 1, I= 0, R= 0) parameters <- c(R0 = 3.5,                  tr = 3*2, # compute mean recovery time, for gamma it's scale*shape                 N = 1e6, timeStepDur = 0.01)  # ---- Get runtimes of 10 runs ---- # runtimes <- sapply(1:10, #   function (i) { #     time <- system.time( #       sim(transitions = denim_model,  #                      initialValues = initialValues, #                      parameters = parameters, #                      simulationDuration = 210, timeStep = 0.01) #     ) #     return(time[[\"elapsed\"]]) #   }) #  # mean(runtimes)  # ---- Get output ---- denim_out <- sim(transitions = denim_model,                       initialValues = initialValues,                      parameters = parameters,                      simulationDuration = 210, timeStep = 0.01) ## Warning: package 'arrow' was built under R version 4.3.3 ##  ## Attaching package: 'arrow' ## The following object is masked from 'package:utils': ##  ##     timestamp"},{"path":"/articles/web_only/denim.html","id":"simple-sir-model-with-gamma-distributed-lengths-of-stay","dir":"Articles > Web_only","previous_headings":"","what":"1. Simple SIR model with gamma distributed lengths of stay","title":"denim: deterministic discrete-time model with memory","text":"SIR model uses 3 compartments: S (susceptible), (infected), R (recovered) describe clinical status individuals. use simple form SIR model demonstrate define distribution lengths stay distribution. model equations : \\[S_{t+1} - S_{t} = -\\lambda S_{t} = -\\frac{\\beta I_{t}}{N}S_{t}\\] \\[I_{t+1} - I_{t} = \\frac{\\beta I_{t}}{N}S_{t} - \\gamma I_{t}\\] \\[R_{t+1} - R_{t} = \\gamma I_{t}\\] \\(N\\): total population size, \\(N = S + + R\\) \\(\\beta\\): product contact rates transmission probability; usually define \\(\\lambda =\\frac{\\beta I_{t}}{N}\\) force infection \\(\\gamma\\): recovery rate Usually solve model easier make assumption recovery rate \\(\\gamma\\) constant, leads exponentially distributed length stay .e individuals recover 1 day infected.  realistic length stay distribution can look like , patients recovered 4 days. defined using gamma distribution shape = 3 scale = 2.  model now look like : Model specification Model transition two transitions S -> -> R case. transitions specified list follow format \"transition\" = equation, equation defined one functions waiting time distribution. Initial state Use vector define compartments assigned names initial values format compartment_name = initial_value: Model parameters use math expression, symbols except compartment names parameters, defined constant values. two constant parameters example: beta N: Model application Time step specification run model 30 days give output 0.01 daily intervals. default interval (time step) 1 declared explicitly.","code":"transitions <- list(   \"S -> I\" = \"beta * S * I / N\",   \"I -> R\" = d_gamma(3, 2) ) initialValues <- c(   S = 999,    I = 1,    R = 0 ) parameters <- c(   beta = 0.012,   N = 1000 ) simulationDuration <- 30 timeStep <- 0.01 mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep) head(mod) #>   Time        S        I            R #> 1 0.00 999.0000 1.000000 0.000000e+00 #> 2 0.01 998.9880 1.011982 5.543225e-06 #> 3 0.02 998.9759 1.024097 2.219016e-05 #> 4 0.03 998.9636 1.036346 5.000038e-05 #> 5 0.04 998.9512 1.048730 8.903457e-05 #> 6 0.05 998.9386 1.061252 1.393545e-04 plot(mod)"},{"path":"/articles/web_only/denim.html","id":"how-the-algorithm-work","dir":"Articles > Web_only","previous_headings":"","what":"2. How the algorithm work?","title":"denim: deterministic discrete-time model with memory","text":"SIR model, infected individuals presented single compartment recovery rate \\(\\gamma\\). want recovery rate individuals infected 1 day differ recovery rate 2-day infected patients. rather using one compartment infected (), define multiple infected sub-compartments. number sub-compartments depends maximum day expect infected individuals recovered. example, expect disease maximum 4 days infection, end 4 sub-compartments. sub-compartment recovery rate \\(\\gamma_{1}\\), \\(\\gamma_{2}\\), \\(\\gamma_{3}\\), \\(\\gamma_{4}\\). day 4 certain patient recover (assume disease maximum 4 days infection), \\(\\gamma_{4} = 1\\). Let \\(R_1 + R_2 + R_3 + R_4 = \\Sigma R\\). \\(\\frac{R_1}{\\Sigma R} = p_1\\), \\(\\frac{R_2}{\\Sigma R} = p_2\\), \\(\\frac{R_3}{\\Sigma R} = p_3\\), \\(\\frac{R_4}{\\Sigma R} = p_4\\). mission estimate \\(\\gamma_{1}\\), \\(\\gamma_{2}\\), \\(\\gamma_{3}\\) obtain \\(p_1\\), \\(p_2\\), \\(p_3\\), \\(p_4\\) fit pre-defined distribution equilibrium state. can obtained setting: \\[\\gamma_{} = \\frac{p_i}{1 - \\sum_{j=1}^{-1}p_j}\\] given length stay distribution, identify maximum length stay using cumulative distribution function. cumulative distribution function asymptotic 1 never equal 1, need set value acceptable rounded 1. want cumulative probability 0.999 rounded 1, set error tolerance threshold 1 - 0.999 = 0.001 (specified argument errorTolerance = 0.001). time cumulative probability = 0.999 set maximum length stay compartment. Default errorTolerance denim set 0.001.","code":""},{"path":"/articles/web_only/denim.html","id":"waiting-time-distribution","dir":"Articles > Web_only","previous_headings":"","what":"3. Waiting time distribution","title":"denim: deterministic discrete-time model with memory","text":"Current available distribution package including: d_exponential(rate): Discrete exponential distribution parameter rate d_gamma(scale, shape): Discrete gamma distribution parameters scale shape d_weibull(scale, shape): Discrete Weibull distribution parameters scale shape d_lognormal(mu, sigma): Discrete log-normal distribution parameters mu sigma can define type transitions : Mathematical expression: Transition defined string value \"beta * S * / N\" converted mathematical expression. need define parameters compartment names parameters argument Constant: Transition defined numerical value 1, 2 converted constant. define number individuals moving time step. transprob(x): Every time step fixed percentage left compartment transit right compartment, also convenient way define \\(R_t - R_{t-1} = \\gamma \\) can input \"-> R\" = transprob(gamma) nonparametric(waitingTimes...): vector values, numbers, percentages, density length stay based real data, denim convert distribution multinomial(probabilities): convenient way define several probabilities compartment transit many compartments, may may time step. example, \"V -> VA, VS, VH\" = multinomial(0.6, 0.3, 0.1) means 60% V become VA, 30% become VS 10% become VH. continue define length stay distribution transitions e.g \"V -> VA\" = d_gamma(3, 2), probabilities defined multinomial() percentage left compartment transit time step, percentage individuals move VA equilibrium state. define length stay distribution, \"V -> VA, VS, VH\" = multinomial(0.6, 0.3, 0.1) percentage V transit right compartments per time step similar transprob() function. See detailed explanations Multiple transitions compartment section.","code":""},{"path":"/articles/web_only/denim.html","id":"multiple-transitions-from-a-compartment","dir":"Articles > Web_only","previous_headings":"","what":"4. Multiple transitions from a compartment","title":"denim: deterministic discrete-time model with memory","text":"many ways define type transition two transitions compartment. Consider example: two scenarios example: Susceptible individuals can infected vaccinated. assumption infected first (S -> ), rest infected get vaccinated (S -> V). Infected individuals can recover die. mortality probability known, can implement model, example defining 0.9 * -> R (90% individuals recover) 0.1 * -> D (10% die). , ensure mortality probability 10%, also define length stay individuals infected state recover die follows gamma log-normal distribution, respectively. can define model example follows:  Tips: Instead writing: can also use multinomial(), define length stay distribution obtain result:","code":"transitions <- list(   \"S -> I\" = \"beta * S * I / N\",   \"S -> V\" = 7,   \"0.9 * I -> R\" = d_gamma(3, 2),   \"0.1 * I -> D\" = d_lognormal(2, 0.5) )  initialValues <- c(   S = 999,    I = 1,    R = 0,   V = 0,   D = 0 )  parameters <- c(   beta = 0.12,   N = 1000 )  simulationDuration <- 10 timeStep <- 0.01  mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep) plot(mod) \"0.9 * I -> R\" = d_gamma(3, 2), \"0.1 * I -> D\" = d_lognormal(2, 0.5) \"I -> R, D\" = multinomial(0.9, 0.1), \"I -> R\" = d_gamma(3, 2), \"I -> D\" = d_lognormal(2, 0.5)"},{"path":"/articles/web_only/denim.html","id":"another-example","dir":"Articles > Web_only","previous_headings":"","what":"5. Another example","title":"denim: deterministic discrete-time model with memory","text":"","code":"transitions <- list(   \"S -> I\" = \"beta * S * (I + IV) / N\",   \"S -> V\" = 2,   \"0.1 * I -> D\" = d_lognormal(2, 0.5),   \"0.9 * I -> R\" = d_gamma(3, 2),   \"V -> IV\" = \"0.1 * beta * V * (I + IV) / N\",   \"IV -> R\" = d_exponential(2) )  initialValues <- c(   S = 999,    I = 1,    R = 0,   V = 0,   IV = 0,   D = 0 )  parameters <- c(   beta = 0.12,   N = 1000 )  simulationDuration <- 10 timeStep <- 0.01  mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep) plot(mod)"},{"path":"/articles/web_only/denim_vs_deSolve.html","id":"comparison-between-desolve-and-denim","dir":"Articles > Web_only","previous_headings":"","what":"Comparison between deSolve and denim","title":"denim vs deSolve","text":"Using deSolve, can replicate Erlang distribution exponential distribution testing","code":"library(denim) library(deSolve) ## Warning: package 'deSolve' was built under R version 4.3.1 # --- Transition def for denim transitions <- list(   \"S -> I\" = d_exponential(0.2),   \"I -> R\" = d_gamma(3, 2) ) parameters <- c(rate = 0.2, scale = 3, shape=2)  initialValues <- c(S = 999, I = 1, I1 = 1, I2=0, R=0)  # --- Transition def for deSolve transition_func <- function(t, state, param){   with(as.list( c(state, param) ), {       gamma_rate = 1/scale       dS = -rate*S       # apply linear chain trick       dI1 = rate*S - gamma_rate*I1       dI2 = gamma_rate*I1 - gamma_rate*I2       dI =  dI1 + dI2       dR = gamma_rate*I2       list(c(dS, dI, dI1, dI2, dR))   }) }  # --- Timestep definition simulationDuration <- 20  timestep <- 0.001 # small timestep required for comparison"},{"path":"/articles/web_only/denim_vs_deSolve.html","id":"run-simulation-with-denim","dir":"Articles > Web_only","previous_headings":"Comparison between deSolve and denim","what":"Run simulation with denim","title":"denim vs deSolve","text":"","code":"denim_start <- Sys.time() mod <- sim(transitions = transitions, initialValues = initialValues, parameters, simulationDuration = simulationDuration, timeStep = timestep) denim_end <- Sys.time()  # --- show output head(mod[mod$Time %in% 1:simulationDuration,]) ##      Time        S        I          R ## 1001    1 817.9120 179.0627   3.025308 ## 2001    2 669.6497 310.8811  19.469173 ## 3001    3 548.2628 398.4336  53.303539 ## 4001    4 448.8796 448.0932 103.027204 ## 5001    5 367.5116 467.6504 164.838060 ## 6001    6 300.8930 464.7307 234.376244"},{"path":"/articles/web_only/denim_vs_deSolve.html","id":"run-simulation-with-desolve","dir":"Articles > Web_only","previous_headings":"Comparison between deSolve and denim","what":"Run simulation with deSolve","title":"denim vs deSolve","text":"","code":"times <- seq(0, simulationDuration, timestep)  desolve_start <- Sys.time() ode_mod <- ode(y = initialValues, times = times, parms = parameters, func = transition_func) desolve_end <- Sys.time()  # --- show output ode_mod <- as.data.frame(ode_mod) head(ode_mod[ode_mod$time %in% 1:simulationDuration, c(\"time\", \"S\", \"I\", \"R\")]) ##      time        S        I          R ## 1001    1 817.9120 179.0585   3.029466 ## 2001    2 669.6497 310.8686  19.481654 ## 3001    3 548.2628 398.4125  53.324630 ## 4001    4 448.8796 448.0650 103.055392 ## 5001    5 367.5116 467.6172 164.871207 ## 6001    6 300.8930 464.6948 234.412204"},{"path":"/articles/web_only/denim_vs_deSolve.html","id":"execution-time-comparison","dir":"Articles > Web_only","previous_headings":"Comparison between deSolve and denim","what":"Execution time comparison","title":"denim vs deSolve","text":"denim takes approximately 101.74 times long deSolve compute result given specifications . significant difference can attributed difference approaches: deSolve solves system ODEs denim iterates timestep updates population compartment approach denim allow flexibility types dwell time distributions, computation time scales timestep grows smaller (O(n) time complexity).","code":""},{"path":"/articles/web_only/denim_vs_deSolve.html","id":"plot-the-result","dir":"Articles > Web_only","previous_headings":"","what":"Plot the result","title":"denim vs deSolve","text":"","code":"# increase timestep before plotting mod <- mod[mod$Time %in% seq(0, simulationDuration, 0.2),] ode_mod <- ode_mod[ode_mod$time %in% seq(0, simulationDuration, 0.2),] # ---- Plot S compartment plot(x = mod$Time, y = mod$S,xlab = \"Time\", ylab = \"Count\", main=\"S compartment\",      col = \"#4876ff\", type=\"l\", lwd=3) lines(ode_mod$time, ode_mod$S, lwd=3, lty=3) legend(x = 15, y = 900,legend=c(\"denim\", \"deSolve\"), col = c(\"#4876ff\", \"black\"), lty=c(1,3)) # ---- Plot I compartment plot(x = mod$Time, y = mod$I, xlab = \"Time\", ylab = \"Count\", main=\"I compartment\",       col = \"#4876ff\", type=\"l\", lwd=2) lines(ode_mod$time, ode_mod$I, lwd=3, lty=3) legend(x = 15, y = 350,legend=c(\"denim\", \"deSolve\"), col = c(\"#4876ff\", \"black\"), lty=c(1,3)) # ---- Plot R compartment plot(x = mod$Time, y = mod$R, xlab = \"Time\", ylab = \"Count\", main=\"R compartment\",      col = \"#4876ff\", type=\"l\", lwd=2) lines(ode_mod$time, ode_mod$R, lwd=3, lty=3) legend(x = 15, y = 300,legend=c(\"denim\", \"deSolve\"), col = c(\"#4876ff\", \"black\"), lty=c(1,3))"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thinh Ong. Author, copyright holder. Anh Phan. Author, maintainer. Marc Choisy. Author. Niels Lohman. Contributor. Bjoern Hoehrmann. Contributor. Florian Loitsch. Contributor. Ingo Berg. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ong T, Phan , Choisy M (2024). denim: Generate Simulate Deterministic Discrete-Time Compartmental Models. https://drthinhong.com/denim/, https://github.com/thinhong/denim.","code":"@Manual{,   title = {denim: Generate and Simulate Deterministic Discrete-Time Compartmental Models},   author = {Thinh Ong and Anh Phan and Marc Choisy},   year = {2024},   note = {https://drthinhong.com/denim/, https://github.com/thinhong/denim}, }"},{"path":"/index.html","id":"denim-","dir":"","previous_headings":"","what":"Generate and Simulate Deterministic Discrete-Time Compartmental Models","title":"Generate and Simulate Deterministic Discrete-Time Compartmental Models","text":"R package building simulating deterministic discrete-time compartmental models memory.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate and Simulate Deterministic Discrete-Time Compartmental Models","text":"can install development version denim GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"thinhong/denim\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Generate and Simulate Deterministic Discrete-Time Compartmental Models","text":"basic example illustrate specification simple SIR model, contains three compartments susceptible (S), infected () recovered (R). recovery probabilities infected individuals gamma distributed example: output data frame 4 columns: Time, S, R can plot output :","code":"library(denim)  transitions <- list(   \"S -> I\" = \"beta * S * I / N\",   \"I -> R\" = d_gamma(3, 2) )  parameters <- c(   beta = 0.12,   N = 1000 )  initialValues <- c(   S = 999,    I = 1,    R = 0 )  simulationDuration <- 10 timeStep <- 0.01  mod <- sim(transitions = transitions, initialValues = initialValues,             parameters = parameters, simulationDuration = simulationDuration,             timeStep = timeStep) head(mod) #>   Time        S        I            R #> 1 0.00 999.0000 1.000000 0.000000e+00 #> 2 0.01 998.8801 1.119874 5.543225e-06 #> 3 0.02 998.7459 1.254092 2.278823e-05 #> 4 0.03 998.5956 1.404364 5.306419e-05 #> 5 0.04 998.4273 1.572606 9.785981e-05 #> 6 0.05 998.2389 1.760961 1.588423e-04 plot(mod)"},{"path":"/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Fixed transition — constant","title":"Fixed transition — constant","text":"Define fixed number individuals left compartment transit right compartment every time step","code":""},{"path":"/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fixed transition — constant","text":"","code":"constant(x)"},{"path":"/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fixed transition — constant","text":"x number individuals move one compartment another","code":""},{"path":"/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fixed transition — constant","text":"Distribution object simulator","code":""},{"path":"/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fixed transition — constant","text":"","code":"transitions <- list(\"S->I\" = constant(10))"},{"path":"/reference/d_exponential.html","id":null,"dir":"Reference","previous_headings":"","what":"Discrete exponential distribution — d_exponential","title":"Discrete exponential distribution — d_exponential","text":"Discrete exponential distribution","code":""},{"path":"/reference/d_exponential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discrete exponential distribution — d_exponential","text":"","code":"d_exponential(rate)"},{"path":"/reference/d_exponential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discrete exponential distribution — d_exponential","text":"rate rate parameter exponential distribution","code":""},{"path":"/reference/d_exponential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discrete exponential distribution — d_exponential","text":"Distribution object simulator","code":""},{"path":"/reference/d_exponential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discrete exponential distribution — d_exponential","text":"","code":"transitions <- list(\"I -> D\" = d_exponential(0.3))"},{"path":"/reference/d_gamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Discrete gamma distribution — d_gamma","title":"Discrete gamma distribution — d_gamma","text":"Discrete gamma distribution","code":""},{"path":"/reference/d_gamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discrete gamma distribution — d_gamma","text":"","code":"d_gamma(scale, shape)"},{"path":"/reference/d_gamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discrete gamma distribution — d_gamma","text":"scale scale parameter gamma distribution shape shape parameter gamma distribution","code":""},{"path":"/reference/d_gamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discrete gamma distribution — d_gamma","text":"Distribution object simulator","code":""},{"path":"/reference/d_gamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discrete gamma distribution — d_gamma","text":"","code":"transitions <- list(\"S -> I\" = d_gamma(1, 5))"},{"path":"/reference/d_lognormal.html","id":null,"dir":"Reference","previous_headings":"","what":"Discrete log-normal distribution — d_lognormal","title":"Discrete log-normal distribution — d_lognormal","text":"Discrete log-normal distribution","code":""},{"path":"/reference/d_lognormal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discrete log-normal distribution — d_lognormal","text":"","code":"d_lognormal(mu, sigma)"},{"path":"/reference/d_lognormal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discrete log-normal distribution — d_lognormal","text":"mu location parameter ln mean sigma scale parameter ln standard deviation","code":""},{"path":"/reference/d_lognormal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discrete log-normal distribution — d_lognormal","text":"Distribution object simulator","code":""},{"path":"/reference/d_lognormal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discrete log-normal distribution — d_lognormal","text":"","code":"transitions <- list(\"I -> D\" = d_lognormal(3, 0.6))"},{"path":"/reference/d_weibull.html","id":null,"dir":"Reference","previous_headings":"","what":"Discrete Weibull distribution — d_weibull","title":"Discrete Weibull distribution — d_weibull","text":"Discrete Weibull distribution","code":""},{"path":"/reference/d_weibull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discrete Weibull distribution — d_weibull","text":"","code":"d_weibull(scale, shape)"},{"path":"/reference/d_weibull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discrete Weibull distribution — d_weibull","text":"scale scale parameter Weibull distribution shape shape parameter Weibull distribution","code":""},{"path":"/reference/d_weibull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discrete Weibull distribution — d_weibull","text":"Distribution object simulator","code":""},{"path":"/reference/d_weibull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discrete Weibull distribution — d_weibull","text":"","code":"transitions <- list(\"I -> D\" = d_weibull(0.6, 2))"},{"path":"/reference/denim-package.html","id":null,"dir":"Reference","previous_headings":"","what":"denim — denim-package","title":"denim — denim-package","text":"Simulate deterministic discrete time model","code":""},{"path":"/reference/denim-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"denim — denim-package","text":"Imports","code":""},{"path":[]},{"path":"/reference/denim-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"denim — denim-package","text":"Maintainer: Anh Phan anhptq@oucru.org Authors: Thinh Ong thinhop@oucru.org (ORCID) [copyright holder] Marc Choisy mchoisy@oucru.org (ORCID) contributors: Niels Lohman [contributor] Bjoern Hoehrmann bjoern@hoehrmann.de [contributor] Florian Loitsch [contributor] Ingo Berg [contributor]","code":""},{"path":"/reference/mathexpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Mathematical expression — mathexpr","title":"Mathematical expression — mathexpr","text":"Mathematical expression","code":""},{"path":"/reference/mathexpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mathematical expression — mathexpr","text":"","code":"mathexpr(expr)"},{"path":"/reference/mathexpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mathematical expression — mathexpr","text":"expr User defined mathematial expression. expression processed muparser library offers wide variety operators. Visit muparser website (https://beltoforion.de/en/muparser/features.php) see full list available operators.","code":""},{"path":"/reference/mathexpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mathematical expression — mathexpr","text":"Distribution object simulator","code":""},{"path":"/reference/mathexpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mathematical expression — mathexpr","text":"","code":"transitions <- list(\"S->I\"=mathexpr(\"beta*S/N\")) # definition for parameters in the expression required params <- c(N = 1000, beta = 0.3)"},{"path":"/reference/multinomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Multinomial — multinomial","title":"Multinomial — multinomial","text":"Define set probabilities transition one compartment multiple compartments   equal ","code":"\"I -> R, D\" = multinomial(0.9, 0.1), \"I -> R\" = d_gamma(3, 2), \"I -> D\" = d_lognormal(2, 0.5) \"0.9 * I -> R\" = d_gamma(3, 2), \"0.1 * I -> D\" = d_lognormal(2, 0.5)"},{"path":"/reference/multinomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multinomial — multinomial","text":"","code":"multinomial(...)"},{"path":"/reference/multinomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multinomial — multinomial","text":"... vector probabilities, must add 1","code":""},{"path":"/reference/multinomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multinomial — multinomial","text":"Distribution object simulator","code":""},{"path":"/reference/nonparametric.html","id":null,"dir":"Reference","previous_headings":"","what":"Nonparametric distribution — nonparametric","title":"Nonparametric distribution — nonparametric","text":"Convert vector frequencies, percentages... distribution","code":""},{"path":"/reference/nonparametric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nonparametric distribution — nonparametric","text":"","code":"nonparametric(...)"},{"path":"/reference/nonparametric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nonparametric distribution — nonparametric","text":"... vector values","code":""},{"path":"/reference/nonparametric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nonparametric distribution — nonparametric","text":"Distribution object simulator","code":""},{"path":"/reference/nonparametric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nonparametric distribution — nonparametric","text":"","code":"transitions <- list(\"S->I\"=nonparametric(0.1, 0.2, 0.5, 0.2))"},{"path":"/reference/sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulator for deterministic discrete time model with memory — sim","title":"Simulator for deterministic discrete time model with memory — sim","text":"Simulation function call C++ simulator","code":""},{"path":"/reference/sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulator for deterministic discrete time model with memory — sim","text":"","code":"sim(   transitions,   initialValues,   parameters = NULL,   simulationDuration,   timeStep = 1,   errorTolerance = 0.001 )"},{"path":"/reference/sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulator for deterministic discrete time model with memory — sim","text":"transitions list transitions follows format \"transition\" = distribution() initialValues vector contains initial values compartments defined transitions, follows format compartment_name = initial_value parameters vector contains values parameters compartments, usually parameters used mathexp() functions simulationDuration duration time simulate timeStep set output time interval. example, simulationDuration = 10 means 10 days timeStep = 0.1, output display results 0.1 daily interval errorTolerance set threshold cumulative distribution function can rounded 1. example, want cumulative probability 0.999 rounded 1, set errorTolerance = 0.001 (1 - 0.999 = 0.001). Default 0.001","code":""},{"path":"/reference/sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulator for deterministic discrete time model with memory — sim","text":"data.frame class denim can plotted plot() method","code":""},{"path":"/reference/sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulator for deterministic discrete time model with memory — sim","text":"","code":"transitions <- list(    \"S -> I\" = \"beta * S * I / N\",    \"I -> R\" = d_gamma(3, 2) )  initialValues <- c(    S = 999,     I = 1,     R = 0 )  parameters <- c(    beta = 0.012,    N = 1000 )  simulationDuration <- 30 timeStep <- 0.01  mod <- sim(transitions = transitions,             initialValues = initialValues,             parameters = parameters,             simulationDuration = simulationDuration,             timeStep = timeStep)"},{"path":"/reference/transprob.html","id":null,"dir":"Reference","previous_headings":"","what":"Transition probability — transprob","title":"Transition probability — transprob","text":"fixed percentage left compartment transit right compartment every time step","code":""},{"path":"/reference/transprob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transition probability — transprob","text":"","code":"transprob(x)"},{"path":"/reference/transprob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transition probability — transprob","text":"x float number 0 1","code":""},{"path":"/reference/transprob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transition probability — transprob","text":"Distribution object simulator","code":""},{"path":"/reference/transprob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transition probability — transprob","text":"","code":"transitions <- list(\"S->I\"=transprob(0.8))"},{"path":[]},{"path":"/news/index.html","id":"denim-100","dir":"Changelog","previous_headings":"","what":"denim 1.0.0","title":"denim 1.0.0","text":"CRAN release: 2024-06-05 Initial CRAN submission.","code":""}]
